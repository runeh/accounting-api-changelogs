{
  "basePath": "/v2",
  "definitions": {
    "AccommodationAllowance": {
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "location": {
          "maxLength": 255,
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "zone": {
          "type": "string"
        }
      },
      "required": [
        "location"
      ],
      "type": "object"
    },
    "AccommodationAndRestaurant": {
      "properties": {
        "genericDataOverviews": {
          "items": {
            "$ref": "#/definitions/GenericDataOverview"
          },
          "type": "array"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Account": {
      "properties": {
        "bankAccountCountry": {
          "$ref": "#/definitions/Country"
        },
        "bankAccountIBAN": {
          "type": "string"
        },
        "bankAccountNumber": {
          "type": "string"
        },
        "bankAccountSWIFT": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "If given, all entries on this account must have this currency."
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoicingDepartment": {
          "$ref": "#/definitions/Department",
          "description": "The department that this account is the invoicing account for. Only relevant if the account represents a bank account that is used as an invoicing account."
        },
        "isApplicableForSupplierInvoice": {
          "description": "True if this account is applicable for supplier invoice registration.",
          "type": "boolean"
        },
        "isBankAccount": {
          "type": "boolean"
        },
        "isCloseable": {
          "description": "True if it should be possible to close entries on this account and it is possible to filter on open entries.",
          "type": "boolean"
        },
        "isInactive": {
          "description": "Inactive accounts will not show up in UI lists.",
          "type": "boolean"
        },
        "isInvoiceAccount": {
          "type": "boolean"
        },
        "ledgerType": {
          "description": "Supported ledger types, default is GENERAL. Only available for customers with the module multiple ledgers.",
          "enum": [
            "GENERAL",
            "CUSTOMER",
            "VENDOR",
            "EMPLOYEE",
            "ASSET"
          ],
          "type": "string"
        },
        "legalVatTypes": {
          "description": "List of legal vat types for this account.",
          "items": {
            "$ref": "#/definitions/VatType"
          },
          "readOnly": true,
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "requireReconciliation": {
          "description": "True if this account must be reconciled before the accounting period closure.",
          "type": "boolean"
        },
        "requiresDepartment": {
          "description": "Posting against this account requires department.",
          "type": "boolean"
        },
        "requiresProject": {
          "description": "Posting against this account requires project.",
          "type": "boolean"
        },
        "saftCode": {
          "description": "SAF-T code for account. It will be given a default value based on account number if empty.",
          "type": "string"
        },
        "type": {
          "enum": [
            "ASSETS",
            "EQUITY",
            "LIABILITIES",
            "OPERATING_REVENUES",
            "OPERATING_EXPENSES",
            "INVESTMENT_INCOME",
            "COST_OF_CAPITAL",
            "TAX_ON_ORDINARY_ACTIVITIES",
            "EXTRAORDINARY_INCOME",
            "EXTRAORDINARY_COST",
            "TAX_ON_EXTRAORDINARY_ACTIVITIES",
            "ANNUAL_RESULT",
            "TRANSFERS_AND_ALLOCATIONS"
          ],
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatLocked": {
          "description": "True if all entries on this account must have the vat type given by vatType.",
          "type": "boolean"
        },
        "vatType": {
          "$ref": "#/definitions/VatType",
          "description": "The default vat type for this account."
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "number"
      ],
      "type": "object"
    },
    "AccountClosureFeedback": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "maxLength": 1024,
          "type": "string"
        },
        "customerCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "reason": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AccountClosureInfoDTO": {
      "properties": {
        "customerCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "nbOfYears": {
          "format": "int32",
          "type": "integer"
        },
        "readAccess": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AccountSpecification": {
      "properties": {
        "accounts": {
          "items": {
            "$ref": "#/definitions/Account"
          },
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "totalAmountVat": {
          "type": "number"
        },
        "type": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AccountantClientAccessCategoryModel": {
      "properties": {
        "accessLevel": {
          "enum": [
            "NONE",
            "SOME",
            "ALL"
          ],
          "type": "string"
        },
        "category": {
          "enum": [
            "GENERAL",
            "ACCOUNTING",
            "VOUCHER_APPROVAL",
            "BANK",
            "COMPANY",
            "CUSTOMER",
            "DOCUMENT",
            "INVOICING",
            "PROJECT",
            "PRODUCT",
            "REPORT",
            "WAGE",
            "TASK",
            "HOUR_LIST",
            "TRAVEL_REPORT",
            "VOUCHER",
            "YEAR_END_REPORT"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hasReceivedAggregatedAccess": {
          "type": "boolean"
        },
        "roles": {
          "items": {
            "$ref": "#/definitions/AccountantClientAccessRole"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AccountantClientAccessModel": {
      "properties": {
        "categories": {
          "items": {
            "$ref": "#/definitions/AccountantClientAccessCategoryModel"
          },
          "type": "array"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountantClientAccessRole": {
      "properties": {
        "additionalInformation": {
          "type": "string"
        },
        "dependencies": {
          "items": {
            "enum": [
              "ROLE_ADMINISTRATOR",
              "AUTH_READ_ONLY",
              "AUTH_LOGIN",
              "AUTH_ALL_VOUCHERS",
              "AUTH_COMPANY_ACCOUNTING_REPORTS",
              "AUTH_ACCOUNTING_SETTINGS",
              "AUTH_COMPANY_RESULT_BUDGET",
              "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ATTESTOR",
              "AUTH_DIRECT_REMIT_ADMIN",
              "AUTH_DIRECT_REMIT_LIGHT",
              "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
              "AUTH_DIRECT_REMIT_CREATE_NEW",
              "AUTH_DIRECT_REMIT_ADMIN_ZTL",
              "AUTH_COMPANY_ADMIN",
              "AUTH_EMPLOYEE_INFO",
              "AUTH_COMPANY_EMPLOYEE_ADMIN",
              "AUTH_CUSTOMER_ADMIN",
              "AUTH_CUSTOMER_INFO",
              "AUTH_CREATE_CUSTOMER",
              "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
              "AUTH_ARCHIVE_READ",
              "AUTH_ARCHIVE_WRITE",
              "AUTH_ARCHIVE_ADMIN",
              "AUTH_CREATE_NOTE",
              "AUTH_CREATE_NOTE_TEMPLATE",
              "AUTH_INVOICING",
              "AUTH_OFFER_ADMIN",
              "AUTH_ORDER_ADMIN",
              "AUTH_CREATE_OFFER",
              "AUTH_CREATE_ORDER",
              "AUTH_FACTORING_EXPORT",
              "AUTH_INVOICE_ADMIN_SETTINGS",
              "AUTH_PROJECT_MANAGER",
              "AUTH_PROJECT_MANAGER_COMPANY",
              "AUTH_DEPARTMENT_REPORT",
              "AUTH_CREATE_PROJECT",
              "AUTH_PROJECT_EXTRA_COSTS",
              "AUTH_PROJECT_INFO",
              "AUTH_PROJECT_ADMIN_SETTINGS",
              "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
              "AUTH_PROJECT_CONTROL_FORMS",
              "AUTH_PRODUCT_ADMIN",
              "REPORT_ADMINISTRATOR",
              "REPORT_AUTHOR",
              "AUTH_COMPANY_WAGE_ADMIN",
              "AUTH_WAGE_ADMIN_SETTINGS",
              "AUTH_WAGE_INFORMATION",
              "AUTH_TASK_ADMIN",
              "AUTH_HOURS_COMPANY",
              "AUTH_HOUR_STATISTICS_COMPANY",
              "AUTH_HOURLIST",
              "AUTH_HOURLIST_SETTINGS",
              "AUTH_HOLYDAY_PLAN",
              "AUTH_TRAVEL_REPORTS_COMPANY",
              "AUTH_TRAVEL_REPORT",
              "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
              "AUTH_VOUCHER_EXPORT",
              "AUTH_INBOX_VOUCHER",
              "AUTH_INCOMPLETE_VOUCHERS",
              "AUTH_INCOMING_INVOICE",
              "AUTH_VOUCHER_SETTINGS",
              "AUTH_BANK_RECONCILIATION",
              "AUTH_VAT_REPORT",
              "AUTH_SICKNESS_REIMBURSEMENT",
              "AUTH_REGISTER_INCOME",
              "AUTH_ADVANCED_VOUCHER",
              "AUTH_VOUCHER_IMPORT",
              "AUTH_PRODUCT_INVOICE",
              "AUTH_CUSTOMS_DECLARATION",
              "AUTH_VOUCHER_AUTOMATION",
              "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
              "YEAR_END_REPORT_ADMINISTRATOR"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "hasAccess": {
          "type": "boolean"
        },
        "hasReceivedAccess": {
          "type": "boolean"
        },
        "hasRequiredModule": {
          "type": "boolean"
        },
        "role": {
          "enum": [
            "ROLE_ADMINISTRATOR",
            "AUTH_READ_ONLY",
            "AUTH_LOGIN",
            "AUTH_ALL_VOUCHERS",
            "AUTH_COMPANY_ACCOUNTING_REPORTS",
            "AUTH_ACCOUNTING_SETTINGS",
            "AUTH_COMPANY_RESULT_BUDGET",
            "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_ATTESTOR",
            "AUTH_DIRECT_REMIT_ADMIN",
            "AUTH_DIRECT_REMIT_LIGHT",
            "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
            "AUTH_DIRECT_REMIT_CREATE_NEW",
            "AUTH_DIRECT_REMIT_ADMIN_ZTL",
            "AUTH_COMPANY_ADMIN",
            "AUTH_EMPLOYEE_INFO",
            "AUTH_COMPANY_EMPLOYEE_ADMIN",
            "AUTH_CUSTOMER_ADMIN",
            "AUTH_CUSTOMER_INFO",
            "AUTH_CREATE_CUSTOMER",
            "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
            "AUTH_ARCHIVE_READ",
            "AUTH_ARCHIVE_WRITE",
            "AUTH_ARCHIVE_ADMIN",
            "AUTH_CREATE_NOTE",
            "AUTH_CREATE_NOTE_TEMPLATE",
            "AUTH_INVOICING",
            "AUTH_OFFER_ADMIN",
            "AUTH_ORDER_ADMIN",
            "AUTH_CREATE_OFFER",
            "AUTH_CREATE_ORDER",
            "AUTH_FACTORING_EXPORT",
            "AUTH_INVOICE_ADMIN_SETTINGS",
            "AUTH_PROJECT_MANAGER",
            "AUTH_PROJECT_MANAGER_COMPANY",
            "AUTH_DEPARTMENT_REPORT",
            "AUTH_CREATE_PROJECT",
            "AUTH_PROJECT_EXTRA_COSTS",
            "AUTH_PROJECT_INFO",
            "AUTH_PROJECT_ADMIN_SETTINGS",
            "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
            "AUTH_PROJECT_CONTROL_FORMS",
            "AUTH_PRODUCT_ADMIN",
            "REPORT_ADMINISTRATOR",
            "REPORT_AUTHOR",
            "AUTH_COMPANY_WAGE_ADMIN",
            "AUTH_WAGE_ADMIN_SETTINGS",
            "AUTH_WAGE_INFORMATION",
            "AUTH_TASK_ADMIN",
            "AUTH_HOURS_COMPANY",
            "AUTH_HOUR_STATISTICS_COMPANY",
            "AUTH_HOURLIST",
            "AUTH_HOURLIST_SETTINGS",
            "AUTH_HOLYDAY_PLAN",
            "AUTH_TRAVEL_REPORTS_COMPANY",
            "AUTH_TRAVEL_REPORT",
            "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
            "AUTH_VOUCHER_EXPORT",
            "AUTH_INBOX_VOUCHER",
            "AUTH_INCOMPLETE_VOUCHERS",
            "AUTH_INCOMING_INVOICE",
            "AUTH_VOUCHER_SETTINGS",
            "AUTH_BANK_RECONCILIATION",
            "AUTH_VAT_REPORT",
            "AUTH_SICKNESS_REIMBURSEMENT",
            "AUTH_REGISTER_INCOME",
            "AUTH_ADVANCED_VOUCHER",
            "AUTH_VOUCHER_IMPORT",
            "AUTH_PRODUCT_INVOICE",
            "AUTH_CUSTOMS_DECLARATION",
            "AUTH_VOUCHER_AUTOMATION",
            "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
            "YEAR_END_REPORT_ADMINISTRATOR"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccountingPeriod": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "end": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isClosed": {
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "number": {
          "format": "int32",
          "maximum": 11,
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "start": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Activity": {
      "properties": {
        "activityType": {
          "description": "PROJECT_SPECIFIC_ACTIVITY are made via project/projectactivity, as they must be part of a project.",
          "enum": [
            "GENERAL_ACTIVITY",
            "PROJECT_GENERAL_ACTIVITY",
            "PROJECT_SPECIFIC_ACTIVITY",
            "TASK"
          ],
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "costPercentage": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isChargeable": {
          "type": "boolean"
        },
        "isDisabled": {
          "readOnly": true,
          "type": "boolean"
        },
        "isGeneral": {
          "description": "Manipulate these with ActivityType",
          "readOnly": true,
          "type": "boolean"
        },
        "isProjectActivity": {
          "description": "Manipulate these with ActivityType",
          "readOnly": true,
          "type": "boolean"
        },
        "isTask": {
          "description": "Manipulate these with ActivityType",
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AdditionalServiceOrderLineDTO": {
      "properties": {
        "count": {
          "$ref": "#/definitions/TlxNumber"
        },
        "description": {
          "type": "string"
        },
        "total": {
          "$ref": "#/definitions/TlxNumber"
        },
        "type": {
          "format": "int32",
          "type": "integer"
        },
        "unitPrice": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "Addon": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "apiConsumerId": {
          "format": "int32",
          "type": "integer"
        },
        "categories": {
          "items": {
            "enum": [
              "OTHER",
              "YEAR_END",
              "BANK",
              "STAFF",
              "BOOKING_AND_CHECKOUT",
              "CRM",
              "DEBT_COLLECTION",
              "ONLINE_STORE",
              "HRM",
              "REPORTING",
              "TRAVEL_AND_EXPENSES",
              "RECONCILLIATION",
              "PAYMENT_SERVICES",
              "CHECKOUT",
              "FAG_SYSTEMER",
              "FINANCIAL_SERVICES",
              "PROJECT",
              "MILAGE",
              "WAREHOUSE_LOGISTICS",
              "TIMESHEET",
              "BOARD_WORK"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "maxLength": 1024,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isPublic": {
          "type": "boolean"
        },
        "linkToInfo": {
          "maxLength": 1024,
          "type": "string"
        },
        "logo": {
          "$ref": "#/definitions/AddonLogoDTO"
        },
        "name": {
          "maxLength": 80,
          "type": "string"
        },
        "partnerName": {
          "type": "string"
        },
        "redirectUrl": {
          "maxLength": 1024,
          "type": "string"
        },
        "shortDescription": {
          "maxLength": 150,
          "type": "string"
        },
        "status": {
          "enum": [
            "IN_DEVELOPMENT",
            "PENDING",
            "REJECTED",
            "APPROVED"
          ],
          "type": "string"
        },
        "targetSystemName": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "visibility": {
          "enum": [
            "COMPANY_WIDE",
            "PERSONAL",
            "INTERNAL"
          ],
          "type": "string"
        },
        "wizardStep": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AddonLogoDTO": {
      "properties": {
        "content": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "documentId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Address": {
      "properties": {
        "addressLine1": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "bnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "city": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "displayNameInklMatrikkel": {
          "readOnly": true,
          "type": "string"
        },
        "fnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "gnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "knr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "postalCode": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "snr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "unitNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AdvancedPaymentWidget": {
      "properties": {
        "accountNumber": {
          "description": "Payment type's account number",
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Amount value in invoice currency"
        },
        "creditorAddress": {
          "description": "AutoPay's creditor address for an abroad payment",
          "type": "string"
        },
        "creditorBankAddress": {
          "description": "AutoPay's creditor bank address for an abroad bank code payment",
          "type": "string"
        },
        "creditorBankCode": {
          "description": "AutoPay's creditor bank code for an abroad bank code payment",
          "type": "string"
        },
        "creditorBankCountryId": {
          "description": "AutoPay's creditor bank country id for an abroad bank code payment",
          "format": "int32",
          "type": "integer"
        },
        "creditorBankIdentificator": {
          "description": "AutoPay's SWIFT or bank code type for an abroad payment",
          "format": "int32",
          "type": "integer"
        },
        "creditorBankName": {
          "description": "AutoPay's creditor bank name for an abroad bank code payment",
          "type": "string"
        },
        "creditorBankPostalCity": {
          "description": "AutoPay's creditor bank postal city for an abroad bank code payment",
          "type": "string"
        },
        "creditorBankPostalCode": {
          "description": "AutoPay's creditor bank postal code for an abroad bank code payment",
          "type": "string"
        },
        "creditorBic": {
          "description": "AutoPay's SWIFT code for an abroad payment",
          "type": "string"
        },
        "creditorClearingCode": {
          "description": "AutoPay's creditor bank code",
          "type": "string"
        },
        "creditorCountryId": {
          "description": "AutoPay's creditor country id for an abroad payment",
          "format": "int32",
          "type": "integer"
        },
        "creditorName": {
          "description": "AutoPay's creditor name for an abroad payment",
          "type": "string"
        },
        "creditorPostalCity": {
          "description": "AutoPay's creditor postal city for an abroad payment",
          "type": "string"
        },
        "creditorPostalCode": {
          "description": "AutoPay's creditor postal code for an abroad payment",
          "type": "string"
        },
        "currencyCode": {
          "description": "Invoice currency code or default",
          "type": "string"
        },
        "currencyId": {
          "description": "Invoice currency id or default",
          "format": "int32",
          "type": "integer"
        },
        "customerVendorIbanOrBban": {
          "description": "Account numbers for this vendor",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "date": {
          "description": "Payment's date value",
          "type": "string"
        },
        "isAutoPay": {
          "description": "Flag for an AutoPay payment",
          "type": "boolean"
        },
        "isCreditorAddressOnly": {
          "description": "Flag for the creditor address",
          "type": "boolean"
        },
        "isForeignPayment": {
          "description": "Flag for an AutoPay foreign payment",
          "type": "boolean"
        },
        "isZtl": {
          "description": "Flag for a ZTL payment",
          "type": "boolean"
        },
        "kid": {
          "description": "Kid or receiver's reference value",
          "type": "string"
        },
        "oppositeAmount": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Amount value in payment type currency"
        },
        "paymentTypes": {
          "description": "List of payment types used in this Advanced Payment Widget",
          "items": {
            "$ref": "#/definitions/PaymentWidgetPaymentType"
          },
          "type": "array"
        },
        "regulatoryReportingCode": {
          "description": "AutoPay's regulatory reporting code",
          "type": "string"
        },
        "regulatoryReportingInfo": {
          "description": "AutoPay's regulatory reporting info",
          "type": "string"
        },
        "selectedPaymentType": {
          "$ref": "#/definitions/PaymentWidgetPaymentType",
          "description": "Default payment type for this Advanced Payment Widget"
        }
      },
      "type": "object"
    },
    "AgroToTripletexDTO": {
      "properties": {
        "userEmail": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AidScheme": {
      "properties": {
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "negate": {
          "readOnly": true,
          "type": "boolean"
        },
        "postType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "readOnly": true,
          "type": "string"
        },
        "postValue": {
          "readOnly": true,
          "type": "number"
        },
        "readOnly": {
          "readOnly": true,
          "type": "boolean"
        },
        "source": {
          "readOnly": true,
          "type": "string"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "AltinnCompanyModule": {
      "properties": {
        "altInnId": {
          "format": "int32",
          "type": "integer"
        },
        "altInnPassword": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "altInnId",
        "altInnPassword"
      ],
      "type": "object"
    },
    "AltinnInstance": {
      "properties": {
        "altinnId": {
          "description": "The altinn archive reference",
          "maxLength": 255,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "createdInfo": {
          "description": "The initials and date of when the instance was created",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "instanceGuid": {
          "description": "The id of the instance in Altinn",
          "maxLength": 255,
          "type": "string"
        },
        "partyId": {
          "description": "The partyId in altinn - refering to the organization",
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AnnualAccount": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "end": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AnnualAccountsSubTotalLine": {
      "properties": {
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "info": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "notes": {
          "readOnly": true,
          "type": "string"
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "orid": {
          "readOnly": true,
          "type": "string"
        },
        "technicalName": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "AnnualAccountsSubTotalSection": {
      "properties": {
        "name": {
          "type": "string"
        },
        "subTotalLines": {
          "items": {
            "$ref": "#/definitions/AnnualAccountsSubTotalLine"
          },
          "type": "array"
        },
        "sumClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "sumOpeningBalance": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ApiConsumer": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "consumerName": {
          "maxLength": 100,
          "minLength": 5,
          "type": "string"
        },
        "emails": {
          "format": "email",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "consumerName",
        "emails"
      ],
      "type": "object"
    },
    "ApiError": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "developerMessage": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        },
        "validationMessages": {
          "items": {
            "$ref": "#/definitions/ApiValidationMessage"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ApiValidationMessage": {
      "properties": {
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "rootId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ApproveResponseDTO": {
      "properties": {
        "notApproved": {
          "description": "List of payments that won't be sent to AutoPay approval",
          "items": {
            "$ref": "#/definitions/PaymentDTO"
          },
          "type": "array"
        },
        "redirectUrl": {
          "description": "The redirect URL to AutoPay 2FA after payments are sent to be approved",
          "type": "string"
        },
        "toBeApproved": {
          "description": "List of payments that will be sent to AutoPay approval",
          "items": {
            "$ref": "#/definitions/PaymentDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "AprilaCashCreditApplicationResponseDTO": {
      "properties": {
        "annualInterestRate": {
          "$ref": "#/definitions/TlxNumber"
        },
        "maxCreditLimitAmount": {
          "$ref": "#/definitions/TlxNumber"
        },
        "maxCreditLimitCurrency": {
          "type": "string"
        },
        "monthlyFeeAmount": {
          "$ref": "#/definitions/TlxNumber"
        },
        "monthlyFeeCurrency": {
          "type": "string"
        },
        "monthlyInterestRate": {
          "$ref": "#/definitions/TlxNumber"
        },
        "signUpUrl": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ArchiveModelTypes": {
      "properties": {
        "account": {
          "readOnly": true,
          "type": "boolean"
        },
        "asset": {
          "readOnly": true,
          "type": "boolean"
        },
        "customer": {
          "readOnly": true,
          "type": "boolean"
        },
        "employee": {
          "readOnly": true,
          "type": "boolean"
        },
        "product": {
          "readOnly": true,
          "type": "boolean"
        },
        "project": {
          "readOnly": true,
          "type": "boolean"
        },
        "supplier": {
          "readOnly": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ArchiveTargetPath": {
      "properties": {
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Article": {
      "properties": {
        "body": {
          "type": "string"
        },
        "href": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Asset": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accumulatedDepreciation": {
          "description": "Accumulated depreciation for the asset.",
          "type": "number"
        },
        "acquisitionCost": {
          "description": "Acquisition cost.",
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "dateOfAcquisition": {
          "type": "string"
        },
        "depreciationAccount": {
          "$ref": "#/definitions/Account",
          "description": "Depreciation account for the asset."
        },
        "description": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "incomingBalance": {
          "description": "Incoming balance for the asset.",
          "type": "number"
        },
        "lifetime": {
          "description": "Lifetime in months for the asset.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "dateOfAcquisition",
        "description",
        "name"
      ],
      "type": "object"
    },
    "AssetAccountRow": {
      "properties": {
        "accountName": {
          "description": "Account name",
          "type": "string"
        },
        "accountNumber": {
          "description": "Account number",
          "type": "string"
        },
        "assets": {
          "description": "Assets",
          "items": {
            "$ref": "#/definitions/AssetImport"
          },
          "type": "array"
        },
        "balanceDifference": {
          "description": "Balance difference. This is the sum amount on the account that is not connected to an asset after the import.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "AssetDetails": {
      "properties": {
        "acquisitionCost": {
          "readOnly": true,
          "type": "number"
        },
        "assetId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "balanceChange": {
          "readOnly": true,
          "type": "number"
        },
        "balanceIn": {
          "readOnly": true,
          "type": "number"
        },
        "balanceOut": {
          "readOnly": true,
          "type": "number"
        },
        "dateOfAcquisition": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "AssetGroup": {
      "properties": {
        "accountId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "accountName": {
          "readOnly": true,
          "type": "string"
        },
        "accountNumber": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "acquisitionCostSum": {
          "readOnly": true,
          "type": "number"
        },
        "assetCount": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "assetDetails": {
          "items": {
            "$ref": "#/definitions/AssetDetails"
          },
          "readOnly": true,
          "type": "array"
        },
        "balanceChangeSum": {
          "readOnly": true,
          "type": "number"
        },
        "balanceGroupName": {
          "readOnly": true,
          "type": "string"
        },
        "balanceInSum": {
          "readOnly": true,
          "type": "number"
        },
        "balanceOutSum": {
          "readOnly": true,
          "type": "number"
        }
      },
      "required": [
        "accountNumber"
      ],
      "type": "object"
    },
    "AssetImport": {
      "properties": {
        "accumulatedDepreciation": {
          "description": "Accumulated depreciation for the asset.",
          "type": "number"
        },
        "acquisitionCost": {
          "description": "Acquisition cost.",
          "type": "number"
        },
        "dateOfAcquisition": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "incomingBalance": {
          "description": "Incoming balance for the asset.",
          "type": "number"
        },
        "lifetime": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "lifetime",
        "name"
      ],
      "type": "object"
    },
    "AssetOverview": {
      "properties": {
        "assetGroups": {
          "items": {
            "$ref": "#/definitions/AssetGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "endDate": {
          "readOnly": true,
          "type": "string"
        },
        "startDate": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthConfigDTO": {
      "properties": {
        "checkSessionIframeUrl": {
          "type": "string"
        },
        "loginUrl": {
          "type": "string"
        },
        "logoutUrl": {
          "type": "string"
        },
        "refreshSessionIframeUrl": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuthorizationManager": {
      "type": "object"
    },
    "AuthorizationManagerCompanyRepresentative": {
      "type": "object"
    },
    "AutoLogin": {
      "properties": {
        "loginUrl": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "AutoLoginPayloadDTO": {
      "properties": {
        "redirectPath": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AutoPayMessageDTO": {
      "properties": {
        "message": {
          "type": "string"
        },
        "messageId": {
          "type": "string"
        },
        "messageType": {
          "type": "string"
        }
      },
      "required": [
        "message",
        "messageId",
        "messageType"
      ],
      "type": "object"
    },
    "AutoPaySupport": {
      "properties": {
        "hasApproveInOnlineBanking": {
          "type": "boolean"
        },
        "hasOrgNumber": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isEikaType": {
          "type": "boolean"
        },
        "isPsd2Type": {
          "type": "boolean"
        },
        "requiredBankFieldIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "uploadNeeded": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AutomationRuleDetails": {
      "properties": {
        "accountId": {
          "format": "int32",
          "type": "integer"
        },
        "accountName": {
          "type": "string"
        },
        "amountMax": {
          "$ref": "#/definitions/TlxNumber"
        },
        "amountMaxMonthly": {
          "$ref": "#/definitions/TlxNumber"
        },
        "autoPayBankAgreementId": {
          "format": "int32",
          "type": "integer"
        },
        "automationRuleId": {
          "format": "int32",
          "type": "integer"
        },
        "departmentId": {
          "format": "int32",
          "type": "integer"
        },
        "departmentName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "distributionKeyId": {
          "format": "int32",
          "type": "integer"
        },
        "enabled": {
          "type": "boolean"
        },
        "paymentType": {
          "type": "string"
        },
        "vatTypeId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "AutomationSettingsDTO": {
      "properties": {
        "canAccessAutoPay": {
          "type": "boolean"
        },
        "canAccessFabricAi": {
          "type": "boolean"
        },
        "canAccessFabricAiTraining": {
          "type": "boolean"
        },
        "canAddAutoPayPayments": {
          "type": "boolean"
        },
        "hasBookkeepingBeforeAttestationSetting": {
          "type": "boolean"
        },
        "hasFabricAiMaxAmountPilotFlag": {
          "type": "boolean"
        },
        "hasVoucherApprovalModule": {
          "type": "boolean"
        },
        "testAccount": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "AutopayBankAgreement": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "description": "The account for bank agreement."
        },
        "accountInBankId": {
          "maxLength": 50,
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "approveInOnlineBanking": {
          "type": "boolean"
        },
        "balance": {
          "$ref": "#/definitions/BankStatementBalance",
          "readOnly": true
        },
        "bank": {
          "$ref": "#/definitions/Bank"
        },
        "bban": {
          "description": "The BBAN property.",
          "maxLength": 50,
          "type": "string"
        },
        "ccmAgreementId": {
          "maxLength": 50,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "country": {
          "$ref": "#/definitions/Country",
          "readOnly": true
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "dateCreated": {
          "type": "string"
        },
        "description": {
          "description": "The description property.",
          "maxLength": 250,
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "description": "display name needed for LoadableDropdown component",
          "readOnly": true,
          "type": "string"
        },
        "division": {
          "maxLength": 50,
          "type": "string"
        },
        "iban": {
          "description": "The IBAN property.",
          "maxLength": 50,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isActive": {
          "readOnly": true,
          "type": "boolean"
        },
        "organisationNumber": {
          "maxLength": 50,
          "type": "string"
        },
        "uploaderEmployee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BalanceGroup": {
      "properties": {
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "negate": {
          "description": "The amount from the balance are not prefixed. This property indicates if the value should be negated or not.",
          "readOnly": true,
          "type": "boolean"
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "BalanceSheet": {
      "properties": {
        "rows": {
          "items": {
            "$ref": "#/definitions/BalanceSheetRow"
          },
          "readOnly": true,
          "type": "array"
        },
        "sumBalanceChange": {
          "readOnly": true,
          "type": "number"
        },
        "sumBalanceIn": {
          "readOnly": true,
          "type": "number"
        },
        "sumBalanceOut": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "BalanceSheetAccount": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "readOnly": true
        },
        "balanceChange": {
          "readOnly": true,
          "type": "number"
        },
        "balanceIn": {
          "readOnly": true,
          "type": "number"
        },
        "balanceOut": {
          "readOnly": true,
          "type": "number"
        },
        "endDate": {
          "description": "The end date for this period - exclusive.",
          "readOnly": true,
          "type": "string"
        },
        "startDate": {
          "description": "The start date for this period - inclusive.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "BalanceSheetRow": {
      "properties": {
        "accountId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "accountName": {
          "readOnly": true,
          "type": "string"
        },
        "accountNumber": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "balanceChange": {
          "readOnly": true,
          "type": "number"
        },
        "balanceIn": {
          "readOnly": true,
          "type": "number"
        },
        "balanceOut": {
          "readOnly": true,
          "type": "number"
        },
        "postingCount": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BalanceSheetSettingsDTO": {
      "properties": {
        "showDepartmentModule": {
          "type": "boolean"
        },
        "showEmployeeModule": {
          "readOnly": true,
          "type": "boolean"
        },
        "showProductModule": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Bank": {
      "properties": {
        "autoPaySupport": {
          "$ref": "#/definitions/AutoPaySupport",
          "description": "The autoPay support for this bank",
          "readOnly": true
        },
        "bankStatementFileFormatSupport": {
          "description": "Bank statement file formats supported.",
          "items": {
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV",
              "CULTURA_BANK_TELEPAY",
              "SBANKEN_PRIVAT_CSV",
              "HAUGESUND_SPAREBANK_CSV",
              "VISMA_ACCOUNT_STATEMENT_PSD2",
              "SBANKEN_BEDRIFT_CSV",
              "LANDKREDITT_TELEPAY",
              "ZTL"
            ],
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "description": "Bank name to comply with LoadableDropdown",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Bank name",
          "readOnly": true,
          "type": "string"
        },
        "registerNumbers": {
          "description": "Register numbers belonging to bank.",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankAgreementCreationDTO": {
      "properties": {
        "accountInBankId": {
          "description": "Customer number in bank",
          "type": "string"
        },
        "approveInOnlineBanking": {
          "description": "Accounting approve payments",
          "type": "boolean"
        },
        "bankAccounts": {
          "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
          "items": {
            "$ref": "#/definitions/Account"
          },
          "type": "array"
        },
        "bankId": {
          "description": "Bank ID",
          "format": "int32",
          "type": "integer"
        },
        "ccmAgreementId": {
          "description": "Customer Id from Bank",
          "type": "string"
        },
        "division": {
          "description": "Division (DNB only)",
          "type": "string"
        },
        "electronicCreation": {
          "description": "Electronic agreement creation initiated.",
          "type": "boolean"
        },
        "organizationNumber": {
          "description": "Organization number",
          "type": "string"
        }
      },
      "required": [
        "bankAccounts",
        "bankId"
      ],
      "type": "object"
    },
    "BankAgreementDTO": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "description": "The account for bank agreement."
        },
        "active": {
          "type": "boolean"
        },
        "balance": {
          "$ref": "#/definitions/BankStatementBalance",
          "readOnly": true
        },
        "bank": {
          "$ref": "#/definitions/Bank"
        },
        "bban": {
          "description": "The BBAN property.",
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "country": {
          "$ref": "#/definitions/Country",
          "readOnly": true
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "dateCreated": {
          "type": "string"
        },
        "description": {
          "description": "The description property.",
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "description": "display name needed for LoadableDropdown component",
          "readOnly": true,
          "type": "string"
        },
        "iban": {
          "description": "The IBAN property.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isActive": {
          "readOnly": true,
          "type": "boolean"
        },
        "uploaderEmployee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankBalance": {
      "properties": {
        "bankBalanceDate": {
          "description": "Bank balance date",
          "format": "date",
          "type": "string"
        },
        "currency": {
          "description": "Currency",
          "type": "string"
        },
        "moneyAmount": {
          "description": "Bank balance amount",
          "type": "number"
        }
      },
      "type": "object"
    },
    "BankBalanceEstimation": {
      "properties": {
        "batchId": {
          "maxLength": 255,
          "type": "string"
        },
        "category": {
          "description": "Category",
          "enum": [
            "DUPLICATE",
            "STARTING_BALANCE",
            "NONE",
            "SALARY",
            "ENI",
            "TAX",
            "VAT_RETURNS",
            "VACATION_ALLOWANCE",
            "TRAVEL_AND_EXPENSES"
          ],
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "description": "java.lang.String",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceAmount": {
          "description": "java.math.BigDecimal",
          "type": "number"
        },
        "invoiceId": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceNumber": {
          "type": "string"
        },
        "isIncomingInvoice": {
          "description": "boolean",
          "type": "boolean"
        },
        "isManuallyAdded": {
          "description": "boolean",
          "type": "boolean"
        },
        "recurrence": {
          "description": "Recurrence type",
          "enum": [
            "NONE",
            "DAILY",
            "WEEKLY",
            "MONTHLY"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vendorOrCustomerName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucherId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "category",
        "description",
        "recurrence"
      ],
      "type": "object"
    },
    "BankDashboardAdvice": {
      "properties": {
        "adviceType": {
          "description": "The advice type.",
          "enum": [
            "SHORTEN_DUE_DATE_ON_OUTGOING_INVOICES_TO_CUSTOMERS",
            "INCREASE_DUE_DATE_ON_INCOMING_INVOICES_FROM_VENDORS",
            "APPLY_FOR_CASH_CREDIT_WITH_TRIPLETEX_APRILA"
          ],
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "dateCancelled": {
          "description": "The date the advice has been cancelled by the user.",
          "type": "string"
        },
        "dateUpdated": {
          "description": "The date the advice was updated.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isActive": {
          "description": "The advice is active.",
          "type": "boolean"
        },
        "isCancelled": {
          "description": "The advice has been cancelled.",
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankOnboardingAccessRequestDTO": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "requesteeEmployeeId": {
          "format": "int32",
          "type": "integer"
        },
        "requesteeName": {
          "type": "string"
        },
        "roleId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankOnboardingDTO": {
      "properties": {
        "companyOrgnr": {
          "type": "string"
        },
        "hasFullAccess": {
          "type": "boolean"
        },
        "lockedCurrenciesMap": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "steps": {
          "items": {
            "$ref": "#/definitions/BankOnboardingStepDTO"
          },
          "type": "array"
        },
        "userIsAutoPayProvisioned": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "BankOnboardingStepDTO": {
      "properties": {
        "accessible": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "enum": [
            "INCOMPLETE",
            "COMPLETED",
            "PROCESSING"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "BankReconciliation": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountingPeriod": {
          "$ref": "#/definitions/AccountingPeriod"
        },
        "approvable": {
          "readOnly": true,
          "type": "boolean"
        },
        "autoPayReconciliation": {
          "readOnly": true,
          "type": "boolean"
        },
        "bankAccountClosingBalanceCurrency": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "closedByContact": {
          "$ref": "#/definitions/Contact",
          "readOnly": true
        },
        "closedByEmployee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "closedDate": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isClosed": {
          "type": "boolean"
        },
        "transactions": {
          "description": "Bank transactions tied to the bank reconciliation",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          },
          "readOnly": true,
          "type": "array"
        },
        "type": {
          "description": "Type of Bank Reconciliation.",
          "enum": [
            "MANUAL",
            "AUTOMATIC"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      },
      "required": [
        "account",
        "accountingPeriod",
        "type"
      ],
      "type": "object"
    },
    "BankReconciliationAdjustment": {
      "properties": {
        "amount": {
          "minimum": 0,
          "type": "number"
        },
        "bankReconciliationMatch": {
          "$ref": "#/definitions/BankReconciliationMatch",
          "readOnly": true
        },
        "bankTransactions": {
          "items": {
            "$ref": "#/definitions/BankTransaction"
          },
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "interimAccount": {
          "$ref": "#/definitions/Account"
        },
        "paymentType": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        },
        "postingDate": {
          "type": "string"
        },
        "postings": {
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "type": "array"
        },
        "voucherDetailsLink": {
          "type": "string"
        },
        "voucherNumber": {
          "type": "string"
        },
        "voucherViewLink": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BankReconciliationMatch": {
      "properties": {
        "bankReconciliation": {
          "$ref": "#/definitions/BankReconciliation"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "postings": {
          "description": "Match postings",
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "type": "array"
        },
        "transactions": {
          "description": "Match transactions",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          },
          "type": "array"
        },
        "type": {
          "description": "Type of match, MANUAL and APPROVED_SUGGESTION are considered part of reconciliation.",
          "enum": [
            "MANUAL",
            "PENDING_SUGGESTION",
            "REJECTED_SUGGESTION",
            "APPROVED_SUGGESTION",
            "ADJUSTMENT",
            "AUTO_MATCHED",
            "REJECTED_AUTO_MATCH"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "bankReconciliation"
      ],
      "type": "object"
    },
    "BankReconciliationMatchesCounter": {
      "properties": {
        "autoMatchedMatches": {
          "description": "Number of auto-matched matches since last page access.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "bankReconciliationId": {
          "description": "The reconciliation id for which the number of matches is stored.",
          "format": "int32",
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "suggestedMatches": {
          "description": "Number of suggested matches since last page access.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankReconciliationPaymentType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account",
          "description": "Credit account",
          "readOnly": true
        },
        "debitAccount": {
          "$ref": "#/definitions/Account",
          "description": "Debit account",
          "readOnly": true
        },
        "description": {
          "description": "Description",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isInactive": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankReconciliationSettings": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfMatchesPerPage": {
          "description": "The number of matches showed per page in bank reconciliation.",
          "enum": [
            "ITEMS_10",
            "ITEMS_50",
            "ITEMS_100",
            "ITEMS_500",
            "ITEMS_1000",
            "ITEMS_5000",
            "ITEMS_10000"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "numberOfMatchesPerPage"
      ],
      "type": "object"
    },
    "BankSettings": {
      "properties": {
        "batchBookingOfPayments": {
          "description": "Setting for the user to use or not the batch booking for payments.",
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "daysBeforePaymentOutdated": {
          "description": "Number of days before a payment is set as outdated",
          "format": "int32",
          "maximum": 99,
          "minimum": 3,
          "type": "integer"
        },
        "employeesWithDirectRemitAccess": {
          "description": "Employees with payment access",
          "items": {
            "$ref": "#/definitions/Employee"
          },
          "readOnly": true,
          "type": "array"
        },
        "employeesWithLimitedDirectRemitAccess": {
          "description": "Employees with limited payment access",
          "items": {
            "$ref": "#/definitions/Employee"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "parseEntriesAsSumPosts": {
          "description": "Setting for the user to choose if account statements entries should be parsed as sum posts or not.",
          "type": "boolean"
        },
        "paymentWithUnknownKidParseOption": {
          "description": "Setting for whether incoming AutoPay payments without KID should be automatically posted, sent to voucher reception or ignored.",
          "enum": [
            "VOUCHER_RECEPTION",
            "PARSE",
            "IGNORE"
          ],
          "type": "string"
        },
        "remitNumberOfAcceptors": {
          "description": "The remit number of acceptors.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "showAdviceCurrencyMismatch": {
          "description": "The showAdviceCurrencyMismatch property.",
          "type": "boolean"
        },
        "signAutoPayWithBankId": {
          "description": "Setting for whether the user should have the option to sign payments and agreements with Bank ID in addition to 2FA.",
          "type": "boolean"
        },
        "taxBankAgreement": {
          "$ref": "#/definitions/AutopayBankAgreement"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankStatement": {
      "properties": {
        "bank": {
          "$ref": "#/definitions/Bank",
          "description": "Bank",
          "readOnly": true
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "closingBalanceCurrency": {
          "description": "Closing balance on the account.",
          "readOnly": true,
          "type": "number"
        },
        "fileName": {
          "description": "Bank statement file name.",
          "readOnly": true,
          "type": "string"
        },
        "fromDate": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "openingBalanceCurrency": {
          "description": "Opening balance on the account.",
          "readOnly": true,
          "type": "number"
        },
        "toDate": {
          "readOnly": true,
          "type": "string"
        },
        "transactions": {
          "description": "Bank transactions tied to the bank statement",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankStatementBalance": {
      "properties": {
        "availableAmount": {
          "description": "Available balance.",
          "readOnly": true,
          "type": "number"
        },
        "availableDate": {
          "readOnly": true,
          "type": "string"
        },
        "bookedAmount": {
          "description": "Booked balance on the given date.",
          "readOnly": true,
          "type": "number"
        },
        "bookedDate": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "BankTransaction": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "amountCurrency": {
          "type": "number"
        },
        "bankReconciliationMatchSum": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "bankStatement": {
          "$ref": "#/definitions/BankStatement"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "groupedPostings": {
          "items": {
            "$ref": "#/definitions/BankTransactionPosting"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "matchType": {
          "enum": [
            "ONE_TRANSACTION_TO_ONE_POSTING",
            "ONE_TRANSACTION_TO_MANY_POSTINGS",
            "MANY_TRANSACTIONS_TO_ONE_POSTING",
            "MANY_TRANSACTIONS_TO_MANY_POSTINGS",
            "NO_MATCH",
            "UNKNOWN"
          ],
          "type": "string"
        },
        "matched": {
          "readOnly": true,
          "type": "boolean"
        },
        "postedDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BankTransactionAggregates": {
      "properties": {
        "topCustomers": {
          "description": "top customers and respective earnings",
          "items": {
            "$ref": "#/definitions/CompanyTransactionAggregates"
          },
          "readOnly": true,
          "type": "array"
        },
        "topSuppliers": {
          "description": "top suppliers and respective payments",
          "items": {
            "$ref": "#/definitions/CompanyTransactionAggregates"
          },
          "readOnly": true,
          "type": "array"
        },
        "totalIncomingAmount": {
          "description": "Total incoming amount on given transactions.",
          "readOnly": true,
          "type": "number"
        },
        "totalOutgoingAmount": {
          "description": "Total outgoing amount on given transactions.",
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "BankTransactionPosting": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "invoiceNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "postingMatchType": {
          "enum": [
            "DEFAULT",
            "INTERNAL_TRANSFER",
            "WAGE",
            "TAX",
            "VAT"
          ],
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "BankingSummaryDTO": {
      "properties": {
        "bankBalance": {
          "$ref": "#/definitions/BankBalance",
          "description": "Bank balance"
        },
        "moneyIn": {
          "$ref": "#/definitions/MoneyAmount",
          "description": "Amount of money coming in the account"
        },
        "moneyOut": {
          "$ref": "#/definitions/MoneyAmount",
          "description": "Amount of money going out of the account"
        }
      },
      "type": "object"
    },
    "Banner": {
      "properties": {
        "bannerType": {
          "readOnly": true,
          "type": "string"
        },
        "button": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "cancellable": {
          "readOnly": true,
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "done": {
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "link": {
          "readOnly": true,
          "type": "string"
        },
        "message": {
          "readOnly": true,
          "type": "string"
        },
        "tag": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "title": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BasicData": {
      "properties": {
        "businessActivityDescription": {
          "maxLength": 255,
          "type": "string"
        },
        "businessActivityType": {
          "enum": [
            "OTHER_COMMERCIAL_ACTIVITIES",
            "AGRICULTURE_HORTICULTURE_FUR_FARMING",
            "FISHING_AND_HUNTING_AT_SEA",
            "REINDEER_HUSBANDRY",
            "FAMILY_DAY_CARE_CENTRE_IN_OWN_HOME",
            "SLATE_QUARRYING",
            "FORESTRY"
          ],
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "nationalIdentityNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "BodyPart": {
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        }
      },
      "type": "object"
    },
    "BringCredentials": {
      "properties": {
        "apiKey": {
          "description": "API token for Bring APIs",
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "customerNumber": {
          "description": "Bring customer number",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "moduleBring": {
          "description": "Bring activation in Logistics module",
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "Bring username",
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "customerNumber",
        "moduleBring",
        "username"
      ],
      "type": "object"
    },
    "BrregCompanyLookupDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "businessAddress": {
          "type": "string"
        },
        "businessPostalArea": {
          "type": "string"
        },
        "businessPostalCode": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CalloutDTO": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "pageSpecific": {
          "type": "boolean"
        },
        "severity": {
          "enum": [
            "INFO",
            "WARNING",
            "ERROR",
            "CONFIRMATION"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CashRegisterSystem": {
      "properties": {
        "cashRegisterSystem": {
          "enum": [
            "ABLINDEX_EVERESTBYLINDEX_11240",
            "ABLINDEX_EVERESTBYLINDEX_11250",
            "ABLINDEX_EVERESTBYLINDEX_11260",
            "ABLINDEX_EVERESTBYLINDEX_11270",
            "ABLINDEX_EVERESTBYLINDEX_113110",
            "ABLINDEX_EVERESTBYLINDEX_113170",
            "ABLINDEX_EVERESTBYLINDEX_113250",
            "ABLINDEX_EVERESTBYLINDEX_113290",
            "ABLINDEX_EVERESTBYLINDEX_113300",
            "ABLINDEX_EVERESTBYLINDEX_113310",
            "ABLINDEX_EVERESTBYLINDEX_113320",
            "ABLINDEX_EVERESTBYLINDEX_113330",
            "ABLINDEX_EVERESTBYLINDEX_116110",
            "ABLINDEX_EVERESTBYLINDEX_116170",
            "ABLINDEX_EVERESTBYLINDEX_116200",
            "ABLINDEX_EVERESTBYLINDEX_11670",
            "ABLINDEX_EVERESTBYLINDEX_117110",
            "ABLINDEX_EVERESTBYLINDEX_11740",
            "AJOURNORDICAPS_AJOUR_SOFTWAREBESTEMT_70",
            "AJOURNORDIC_NORGEAS_AJOUR_2",
            "AKTECHOTELAS_PICASSO_83",
            "AKTSIASELTSHELMES_HELMESPOS_101",
            "ALFAGRUPPENAS_ALFAKASSE_V10",
            "ALFASOFTWAREAS_ROLFPOS_701",
            "ALREADYORDEREDAS_MOBILE04_31",
            "AMICABUSINESSSOLUTIONS_TENDERPOS_13000",
            "ANCONAB_SHARPDININGNO_10",
            "APPEXAS_MANITSYS_010",
            "ARANTEK_ARANTEK_74XX",
            "ARANTEK_ARANTEK_75XX",
            "ARANTEK_PAYONE_7XXX",
            "ARANTEK_S8RPOS_75XX",
            "ARANTEK_TOPTOUCH_75XX",
            "ARKOTERAPEUT_WINDOWS_5XX",
            "ATRONELECTRONICGMBH_ACE130_V1103",
            "ATRONELECTRONICGMBH_AFA460_491_V1103",
            "ATRONELECTRONICGMBH_AFA470_V1103",
            "ATRONELECTRONICGMBH_AFR4_V1103",
            "ATRONELECTRONICGMBH_AMR172_V323",
            "ATRONELECTRONICGMBH_ASTS_V123",
            "ATRONELECTRONICGMBH_ATRIES_256",
            "ATRONELECTRONICGMBH_FRTOUCH_V1101",
            "AVIONORWAYAS_AVIOMOBILEPOS_30",
            "AVIONORWAYAS_AVIOPOS_31",
            "AXESSAG_SMARTPOS_121",
            "B2BTRADING_MICROPOS",
            "BAIKINGUAS_BAIKINGUFOOD_BEVERAGE_ANDROID112",
            "BAIKINGUAS_RETAILCLOUD_20181",
            "BESTVALUEAS_HANDELIPRAKSIS_401",
            "BESTVALUEAS_HANDELIPRAKSIS_402",
            "BESTVALUEAS_HANDELIPRAKSIS_403",
            "BESTVALUEAS_HIPSELVBETJENT_101",
            "BIESBROECKAUTOMATIONBV_UNITOUCH_370",
            "BIESBROECKAUTOMATIONBV_UNITOUCH_370ELLERNYEREVERSJON",
            "BITMAKERAS_FYSIOPILATESKASSE_10",
            "BIZSYSAPS_BIZSYSPOS_2019",
            "BLEKENDATAAS_MABBUTIKKOGVERKSTEDSYSTEM_75",
            "BLEKENDATAAS_MABBUTIKKOGVERKSTEDSYSTEM_76",
            "BLEKENDATAAS_MABBUTIKKOGVERKSTEDSYSTEM_77",
            "BLEKENDATAAS_MABBUTIKKOGVERKSTEDSYSTEM_78",
            "BLEKENDATAAS_MABBUTIKKOGVERKSTEDSYSTEM_79",
            "BLEKENDATAAS_MABBUTIKKOGVERKSTEDSYSTEM_8",
            "BOOKNOWSOFTWARELTD_V200_200182",
            "BOOSTITAS_CML2020_R2100",
            "BRPSYSTEMSAB_BRPSYSTEMSPOSNO_10",
            "BRPSYSTEMSAB_BRPSYSTEMSPOSNO_11",
            "BRPSYSTEMSAB_BRP_251",
            "CAGISTAAS_CAGISTAPOS_1X",
            "CAPGEMININORGEAS_FARMAPRO_520",
            "CAPGEMININORGEAS_FARMAPRO_521A",
            "CAPGEMININORGEAS_FARMAPRO_521B",
            "CAPGEMININORGEAS_FARMAPRO_521RC2",
            "CAPGEMININORGEAS_FARMAPRO_522",
            "CAPGEMININORGEAS_FARMAPRO_523",
            "CAPGEMININORGEAS_FARMAPRO_524",
            "CASHITAB_CASHITRETAILMOBILE_34XX",
            "CASHITAB_CASHITRETAIL_34XX",
            "CASIO_CASIOSEC3500_102",
            "CASIO_CASIOSEC3500_103",
            "CASIO_CASIOSEC3500_109",
            "CASIO_CASIOSEC450_102",
            "CASIO_CASIOSEC450_103",
            "CASIO_CASIOSEC450_109",
            "CASIO_CASIOSES3000_102",
            "CASIO_CASIOSES3000_103",
            "CASIO_CASIOSES3000_109",
            "CASIO_CASIOSES400M_STORSKUFF_103",
            "CASIO_CASIOSES400M_STORSKUFF_109",
            "CASIO_CASIOSES400_STORSKUFF_102",
            "CASIO_CASIOVR100_108",
            "CASIO_CASIOVR200_108",
            "CASIO_CASIOVR7000_108",
            "CASIO_CASIOVR7100_108",
            "CASIO_SEC3500_101",
            "CASIO_SEC450_101",
            "CASIO_SES3000_101",
            "CASIO_SES400M_STORSKUFF_101",
            "CASIO_SUSOFT_CASIOVR200_116",
            "CASIO_SUSOFT_CASIOVR7000_116",
            "CASIO_SUSOFT_CASIOVR7100_116",
            "CASIO_VR100_108",
            "CASIO_VR200_108",
            "CASIO_VR7000_108",
            "CASIO_VR7100_108",
            "CASPECOAB_CASPECOCHECKOUT_30",
            "CATENOAS_CLAWPOS_2X",
            "CATENOAS_CPOS_1X",
            "CBITAS_WELLNESS_1",
            "CDKGLOBAL_DRACAR_070900",
            "CEGID_Y2_2016EDITION",
            "CEGID_Y2_V13ELLERNYERE",
            "CENIUMAS_HOSPITALITYPOINTOFSALE_1XXX",
            "CENTRICNETHERLANDSBV_CENTRICDYNAVISION_2016",
            "CENTRICNETHERLANDSBV_CENTRICINPOSITION_2017",
            "CENTRIC_DYNAVISION_4224001",
            "CHD_CHD6800MINIPOS_2260",
            "CHECKINAS_KASSAWEB_10",
            "CINCHAS_CINCHPAY_1",
            "CLOUDRETAILSYSTEMSA_S_CBRETAIL_53",
            "CLOUDRETAILSYSTEMSA_S_CBRETAIL_64070ELLERNYERE",
            "CODAB_G3_VERSION1",
            "COMPILATORAB_DACKDATA_520ELLERNYERE",
            "COMPUSOFTAS_COMPUSOFT_48",
            "COMPUTANSEAS_ASSETSERVERINGMOBILE_51XKLM",
            "COMPUTANSEAS_ASSETSERVERINGMOBILE_520KLM",
            "COMPUTANSEAS_ASSETSERVERING_51XKL",
            "COMPUTANSEAS_ASSETSERVERING_520KL",
            "COMPUTANSEAS_ASSET_M3MOBILE_51XKLM",
            "COMPUTANSEAS_ASSET_M3MOBILE_520KLM",
            "COMPUTANSEAS_ASSET_M3_51XKL",
            "COMPUTANSEAS_ASSET_M3_520KL",
            "CONDUENTOGENTUR_EXPERT900OGEXPERT9200_030_ENTUR_ELECTRON100AFCREST20195_CONDUENT_",
            "CONDUENTOGENTUR_EXPERT900OGEXPERT9200_1X_ENTUR_ELECTRON100AFCREST20195_CONDUENT_",
            "CONDUENT_EXPERT900OGEXPERT9200_20191",
            "COOLNETNORGEAS_LIMEPOS_1",
            "CORDELNORGEAS_CORDEL_20",
            "COWHILLS_RPOS_10",
            "CRDSYSTEMSOY_BARTRACE_10",
            "CRDSYSTEMSOY_BARTRACE_100",
            "CROSSOVERTECHNOLOGIESLTD_XPOS_VERSIONS1AND2",
            "DATANOVAAS_DATANOVAIZI_1",
            "DATANOVAAS_WINDOWSSHOPPINGRETAIL_5",
            "DATATEKNIKKNILSEN_TIMEBOKPOS_102",
            "DATORAMAAB_OMEGABASIC_3211",
            "DATORAMAAB_OMEGAKASSASYSTEM_3211",
            "DATORAMAAB_OMEGALITE_3211",
            "DATORAMAAB_OMEGASPLASH_3211",
            "DATORAMAAB_OMEGASTYLE_3211",
            "DDDRETAILNORWAYAS_DDDPOS_1884",
            "DDDRETAILNORWAYAS_DDDPOS_1911",
            "DDDRETAILNORWAYAS_DDDPOS_19XX",
            "DEFINITAS_ANOVAKASSE_K170",
            "DEFINITAS_OMNISHOPPOSMOBILE_20OGNYERE",
            "DEGREECONSULTINGGROUPAS_DEGREEPOINTOFSALESSOLUTION_1",
            "DEKKPROSOLUTIONSAS_DEKKPROPOS_10",
            "DENVER_NORSHOPPRO_143900",
            "DFSTOKHEIM_FUELPOS_VERSION51",
            "DIALOGEXEAS_DXPOS_110",
            "DIEBOLDNIXDORFAS_TPNET_1010",
            "DLSOFTWARE_DLPRIME_3",
            "DOMINOS_PULSE_385",
            "DOVERFUELINGSOLUTIONS_FUSION_10",
            "DOVERFUELINGSOLUTIONS_NUCLEUS10FORFUSION_103",
            "EASYUPDATEAS_BUTIKKDATA_70",
            "EASYUPDATEAS_BUTIKKDATA_70ELLERNYERE",
            "EGA_S_DETAIL6_6828",
            "EGA_S_FACKTAPOS_610",
            "EGA_S_HAIRTOOLS_120ELLERNYERE",
            "EGNORGEAS_2DPOINT_7X",
            "EGNORGEAS_EGBRLDYNAMICSAX2009POS_10",
            "EGRETAILAS_EGPOS_242X",
            "EGRETAILAS_EGPOS_300X",
            "EGRETAILAS_EGPOS_30X",
            "EGRETAILAS_EGPOS_40X",
            "EINRSOFTWAREAS_POS9_100",
            "EINRSOFTWAREAS_POSBE_VERSJON10ELLERNYERE",
            "ELECTRASWEDENAB_ELECTRASMARTBDS_3",
            "ELEKTRONISKEBETALINGSSYSTEMERAS_FLEXPAY_30",
            "ELFOAS_VISIONPOINT_6",
            "ELFOAS_VISIONPOS_222",
            "ELFOAS_VISIONPOS_6",
            "ELWATCHAS_JUSTCARDROUGHLINE",
            "EMMAEDBAS_BRAVOPOS_3",
            "EMSOFTWAREPARTNERSAS_ELGUIDE_65600",
            "ENTUR_BLUEBIRDBM180_MT3452",
            "ENTUR_BLUEBIRDBM180_MT35",
            "ENTUR_BLUEBIRDBM180_MT37",
            "ENTUR_ESS_5",
            "ENTUR_ESS_6",
            "ENTUR_ESS_7",
            "EONBITAS_EONTYRE_100",
            "ESCHERGROUPIRL_PULS_5502",
            "ESPOSNORGEAS_DIGGIPOS_10",
            "ESPOSNORGEAS_ESPOSLIGHT_60",
            "EVRYASA_OPAS_921812XX",
            "EXPRESSRETAILSVERIGEAB_EXPRESSRETAIL_20",
            "EXTENDARETAILAB_EXTENDARETAILPOS_177X",
            "EXTENDARETAILAB_EXTENDARETAILPOS_178X",
            "EXTENDARETAILAB_EXTENDARETAILPOS_179",
            "EXTENDARETAILAS_RSPOS_171",
            "EXTENDARETAILAS_RSPOS_173",
            "EXTENDARETAILAS_RSPOS_174",
            "EXTENDARETAILAS_SILENTTOUCH_162SP1",
            "EXTENDARETAILAS_SILENTTOUCH_171",
            "EXTENDARETAILAS_SILENTTOUCH_172",
            "EXTENDARETAILAS_SILENTTOUCH_181",
            "EXTENDARETAILAS_SILENTTOUCH_191",
            "EXTENDARETAILAS_SILENTTOUCH_201",
            "EXTENDARETAILAS_SILENTTOUCH_211",
            "EXTENDARETAILAS_SUPERPOS_1721",
            "EXTENDARETAILAS_SUPERPOS_173",
            "EXTENDARETAILAS_WALLMOBPOS_217",
            "EXTENDARETAILSOFTWAREAB_EXTENDARETAILPOS_EXTENDARETAILKAPV1816",
            "EXTENSORAS_EXTENSOR05_132",
            "FARAAS_FARAFTS_FTSCSR3800FTSTN31",
            "FASFLOWSOLUTIONSAS_FASTFLOW_2406",
            "FASTFLOWSOLUTIONSAS_FASTFLOW_2600",
            "FDTSYSTEMAB_EXCELLENCERETAILPOS_10220",
            "FIFTYTWO_BORDINGDATA_LBAILBNDLBNSLBNNLBVDLSSBLSSDLSSELGARLGABLGAPLMBLLAPGLAPZLGPSLGPZLAPT_52",
            "FILMSTADENAB_BOSS_20",
            "FLEXICONSYSTEMAB_EXCELLENCE_201811",
            "FLEXPOS_FLEXPOS_215",
            "FLUGGERNORWAYAS_FLUGGERAX2009POS_10",
            "FRONTSYSTEMS_FRONTKASSEFORIOS_10",
            "FRONTSYSTEMS_I_T_21",
            "FROSTVIKAS_NPOS_421",
            "FUTURARETAILSOLUTIONSAG_FUTURERS_337",
            "FWHTECHNOLOGIES_SUBWAYPOS_20190NO",
            "FWHTECHNOLOGIES_SUBWAYPOS_20191NO",
            "FYGITECHNOLOGIESAS_SPG_10",
            "GASTROFIXGMBH_GASTROFIXPOS_215",
            "GASTROFIXGMBH_GASTROFIXPOS_225",
            "GASTROFIXGMBH_GASTROFIX_214",
            "GASTROFIXGMBH_GASTROFIX_215",
            "GASTROFIXGMBH_LIGHTSPEEDGASTROFIXPOS_30",
            "GETAPOS_WINSILVER_391ELLERSENERE",
            "GETSAS_INSIDEPOS_10",
            "GETSHOPAS_1_1",
            "GIANTLEAPTECHNOLOGIESAS_POCKETSALES_20",
            "GKSOFTWARESE_SAPOMNICHANNELPOINTOFSALEBYGK_300ADD",
            "GKSOFTWARESE_SAPOMNICHANNELPOINTOFSALEBYGK_570PVH",
            "GKSOFTWARESE_TPOS1024_12061803",
            "HANOAS_HANOFOTTERAPEUT_2",
            "HANOAS_HANOFRISOER_2",
            "HANOAS_HANOHANDEL_2",
            "HANOAS_HANOHUDPLEIE_2",
            "HANOAS_MASSOR_2",
            "HANO_NORPOS_2",
            "HANSAWORLD_STANDARDERP_85",
            "HEADSSVENSKAAB_HEADSRETAIL_162",
            "HEADSSVENSKAAB_HEADSRETAIL_172",
            "HEADSSVENSKAAB_HEADSRETAIL_18X",
            "HEADSSVENSKAAB_HEADSRETAIL_19X",
            "HOEDEGAARD_COAS_QUORION_QMP50",
            "HOISTGROUPDEVELOPMENTLTD_HOTSOFT_82400",
            "HOLTLRETAILSOLUTIONSGMBH_POSFLOW5_5",
            "HOOPLAAS_HOOPLAPOS_12X",
            "HOOPLASERVICESAS_HOOPLAMPOS_12X",
            "HOOPLASERVICESAS_HOOPLAPOS_12X",
            "HRSHOSPITALITYANDRETAILSYSTEMS_ORACLEHOSPITALITYOPERA_54",
            "HRSHOSPITALITYANDRETAILSYSTEMS_ORACLEHOSPITALITYRES3700_50",
            "HRSHOSPITALITYANDRETAILSYSTEMS_ORACLEHOSPITALITYRES3700_52",
            "HRSHOSPITALITYANDRETAILSYSTEMS_ORACLEHOSPITALITYRES3700_54",
            "HRSHOSPITALITYANDRETAILSYSTEMS_ORACLEHOSPITALITYRES3700_55",
            "HUGBNAURHF_CENTARA_27",
            "IBM_SUREPOS_566",
            "INCADEA_ENGINE_2XOG3X",
            "INFOTRONICSAS_INFOPAYKASSE_1030",
            "INSOFTAS_CASHREG_11XX",
            "INTELLIGENTPOINTOFSALE_SALES_LTD_IPOSKASSAREGISTER_10",
            "INTELLITIXTECHNOLOGIESINC_INTELLIPAY_216",
            "INTELLITIXTECHNOLOGIES_INTELLIPAY_216",
            "ITICKET_POS_V1",
            "ITPARTNERHELGELANDAS_PLANITKASSE_2018OKTOBER",
            "ITXMERKENBV_HIPOS_NOR43",
            "IZETTLEMERCHANTSERVICEAS_IZZETTLEKASSESYSTEM_11",
            "IZETTLEMERCHANTSERVICESAB_IZETTLEKASSAREGISTER_11",
            "IZETTLEMERCHANTSERVICESAB_IZETTLEKASSAREGISTER_21",
            "IZETTLE_IZETTLEREADER_03000000",
            "JEEVESINFORMATIONSYSTEMSAB_GARP_43",
            "JEEVESINFORMATIONSYSTEMS_GARP_42",
            "JMDATASYSTEMAS_JMTPOS_10",
            "K3BUSINESSTECHNOLOGIES_IMAGINE_1XXX",
            "KASSAMAGNEETTIOY_RESTOLUTION_N21",
            "KASSEOGBUTIKKDATA_CASIO_SES3000",
            "KASSESERVICEAS_DUELLAGENT_1006",
            "KASSESERVICEAS_DUELLAGENT_1008",
            "KASSESERVICEAS_DUELLAGENT_1X",
            "KASSESERVICEAS_DUELLAGENT_2028",
            "KASSESERVICEAS_DUELLAGENT_2029",
            "KASSESERVICEAS_DUELLPOS_112",
            "KASSESERVICEAS_DUELLPOS_113",
            "KASSESERVICEAS_DUELLPOS_114",
            "KASSESERVICEAS_DUELLPOS_115",
            "KASSESERVICEAS_DUELLPOS_116",
            "KASSESERVICEAS_DUELLPOS_117",
            "KASSESERVICEAS_DUELLPOS_118",
            "KASSESERVICEAS_DUELLPOS_119",
            "KASSESERVICEAS_DUELLPOS_120",
            "KASSESERVICEAS_DUELLPOS_121",
            "KASSESERVICEAS_DUELLPOS_122",
            "KASSESERVICEAS_DUELLPOS_123",
            "KASSESERVICEAS_DUELLPOS_124",
            "KASSESERVICEAS_DUELLPOS_125",
            "KASSESERVICEAS_DUELLPOS_126",
            "KASSESERVICEAS_DUELLPOS_127",
            "KASSESERVICEAS_DUELLPOS_128",
            "KASSESERVICEAS_DUELLPOS_129",
            "KASSESERVICEAS_DUELLPOS_130",
            "KASSESERVICEAS_DUELLPOS_131",
            "KASSESERVICEAS_DUELLPOS_132",
            "KASSESERVICEAS_DUELLPOS_134",
            "KASSESERVICEAS_DUELLPOS_135",
            "KASSESERVICEAS_DUELLPOS_136",
            "KASSESERVICEAS_DUELLPOS_140",
            "KASSESERVICEAS_DUELLPOS_150",
            "KASSESERVICEAS_DUELLPOS_160",
            "KONSULENTDATA_RESTAURANTAS_KDRGOLD_37",
            "KONSULENTDATA_RESTAURANTAS_KDRGOLD_40",
            "KONTAKTLOES_K1_101",
            "LAVACLOUDPOSAS_AVELYN_1000",
            "LAVU_LAVUPOS_389",
            "LEEROYGROUPAB_LEEROYMPOS_20NO",
            "LEXITGROUPNORWAYAS_LEXPOS_10",
            "LEXITGROUPNORWAYAS_LEXPOS_10ELLERNYERE",
            "LIGHTSPEEDPOSGERMANYGMBH_LIGHTSPEEDGASTROFIXPOS_312",
            "LINDBAKRETAILSYSTEMSAS_EGPOS_40X",
            "LINDBAKRETAILSYSTEMSAS_LINDBAKPOS_25X",
            "LINDBAKRETAILSYSTEMSAS_LINDBAKPOS_300X",
            "LINDBAKRETAILSYSTEMSAS_LINDBAKPOS_30X",
            "LIVINGCONSULTINGAS_POCKETERP_20",
            "LONGRUNSOFTWARE_ECWINS_2019R1",
            "LSRETAILEHF_LSCENTRAL_150ANDNEWER",
            "LSRETAILEHF_LSNAV_1002",
            "LSRETAILEHF_LSNAV_1006",
            "LSRETAILEHF_LSNAV_110",
            "LSRETAILEHF_LSNAV_1105750",
            "LSRETAILEHF_LSNAV_130ANDNEWER",
            "LSRETAILEHF_LSNAV_90007244",
            "LSRETAILEHF_LSONEFORSAPBUSINESSONE_2019ANDLATER",
            "LSRETAILEHF_LSONE_2019ANDLATER",
            "LSRETAIL_LSNAV2009_64",
            "LSRETAIL_LSNAV2015_80",
            "LSRETAIL_LSNAV2017_100200396",
            "LSRETAIL_LSNAV2017_1002_ELLERNYERE",
            "LSRETAIL_LSNAV2017_1008",
            "LSRETAIL_LSONE_20172",
            "LYKO_LYKOSMP_2",
            "MABUAS_ZPOS_14",
            "MESTERBLOMSTAS_MGKASSASYSTEM_1033",
            "MESTERBLOMSTAS_MGKASSASYSTEM_1044",
            "MESTERBLOMSTAS_MGKASSASYSTEM_1055",
            "MESTERBLOMSTAS_MGKASSASYSTEM_1066",
            "MESTERBLOMSTAS_MGKASSASYSTEM_9111",
            "MESTERBLOMSTAS_MGKASSASYSTEM_922",
            "METRA_LCC_7XX",
            "MICROSOFTCORP_DYNAMICS365FORFINANCEANDOPERATIONSDYNAMICS365FORRETAILANDCOMMERCE_ENTERPRISEEDITIONAPPLICATIONUPDATE5ANDLATER",
            "MICROSOFTCORP_DYNAMICS365FORFINANCEANDOPERATIONSDYNAMICS365FORRETAIL_ENTERPRISEEDITIONAPPLICATIONUPDATE5",
            "MICROSOFT_AX2009LSPOS_SPESIALTILPASNINGFORSKEIDAR",
            "MICROSOFT_DYNAMICSAX2012_R3",
            "MICROSOFT_DYNAMICSAXSPESIALTILPASSETFORAKZONOBELEUROPE_2012R3",
            "MICROSOFT_DYNAMICSNAVCLASSICPOS_50",
            "MINSAITSA_TMSFORPOS_240",
            "MOBITECHAS_MTPROG_05",
            "MOBITECHAS_SVPOS_MRK2",
            "MOREFLO_MOREFLO_3",
            "MULTICASENORGEAS_MULTICASEFORRETNINGSSYSTEM_317X",
            "MULTICASENORGEAS_MULTICASEFORRETNINGSSYSTEM_417X",
            "MULTICASENORGEAS_MULTICASEFORRETNINGSSYSTEM_418X",
            "MULTICASENORGEAS_MULTICASEFORRETNINGSSYSTEM_419X",
            "MULTICASENORGEAS_MULTICASEFORRETNINGSSYSTEM_420X",
            "MULTICASENORGEAS_MULTICASEFORRETNINGSSYSTEM_421X",
            "MUNUAS_MUNUCLOUDPOS_16ANDABOVE",
            "MUNUAS_RSPOS_16ANDBELOW",
            "MYSTORENOAS_20_20",
            "MYSTORENOAS_MYSTOREDATAKASSE_32",
            "NASOFT_MYCRON_NASOFTKASSADEL_VER62",
            "NAVIPARTNER_NPRETAIL_2017",
            "NAVIPROAB_CASHJET_2013",
            "NAVIPROAB_CASHJET_IPOS10",
            "NCRDANMARKAS_ASARPOS_304",
            "NCRDANMARKAS_NCRALOHAAFM_19",
            "NCRDANMARKAS_OCTANE2000_Z0933",
            "NCRDANMARK_STOREPOINT18104_18104",
            "NEWBLACKBV_EVAUNIFIEDCOMMERCE_20",
            "NMIRUNEEDGARSVENDSEN_MULTISYSPOS_907",
            "NORBITSAS_ATHENAPAY_10",
            "NORBITSAS_ATHENAPOS_30",
            "NORBITSAS_ATHENAXPOS_10",
            "NORDICCINEMAGROUP_BOSS_10",
            "NORENSIKT_JUMPEREZPAD5S_10",
            "NORSKSOLIMPORT_SUNMASTER_SUNMASTER1048",
            "NUTIDAB_NUTIDPCKASSA_3851811281",
            "NUTIDAB_NUTIDPCKASSA_385190221",
            "NUTIDAB_NUTIDPCKASSA_385190528",
            "NUTIDAB_NUTIDPCKASSA_385190911",
            "NUTIDAB_NUTIDPCKASSA_385191002",
            "NUTIDAB_NUTIDPCKASSA_3851910021",
            "NUTIDAB_NUTIDPCKASSA_385191022",
            "NUTIDAB_NUTIDPCKASSA_385191204",
            "NUTIDAB_NUTIDPCKASSA_3852001291",
            "NUTIDAB_NUTIDPCKASSA_3852003021",
            "NUTIDAB_NUTIDPCKASSA_3852005041",
            "NUTIDAB_NUTIDPCKASSA_3852009301",
            "NUTIDAB_NUTIDPCKASSA_3852101271",
            "NUTIDAB_NUTIDPCKASSA_385210127X",
            "NUTIDAB_NUTIDPCKASSA_385210414X",
            "NUTIDAB_NUTIDPCKASSA_385210624X",
            "NUTIDAB_SHARPHOSPITALITY_3851701011",
            "NUTIDAB_SHARPHOSPITALITY_3851702141",
            "NUTIDAB_SHARPHOSPITALITY_3851704051",
            "NUTIDAB_SHARPHOSPITALITY_3851705111",
            "NUTIDAB_SHARPHOSPITALITY_3851707061",
            "NUTIDAB_SHARPHOSPITALITY_3851708161",
            "NUTIDAB_SHARPHOSPITALITY_3851709041",
            "NUTIDAB_SHARPHOSPITALITY_3851710101",
            "NUTIDAB_SHARPHOSPITALITY_3851711151",
            "NUTIDAB_SHARPHOSPITALITY_3851712281",
            "NUTIDAB_SHARPHOSPITALITY_3851802131",
            "NUTIDAB_SHARPHOSPITALITY_3851804111",
            "NUTIDAB_SHARPHOSPITALITY_3851805221",
            "NUTIDAB_SHARPHOSPITALITY_3851807091",
            "NUTIDAB_SHARPHOSPITALITY_3851807241",
            "NUTIDAB_SHARPHOSPITALITY_3851810101",
            "NUTIDAB_SHARPHOSPITALITY_3851811281",
            "NUTIDAB_SHARPHOSPITALITY_385190221",
            "NUTIDAB_SHARPHOSPITALITY_385190528",
            "NUTIDAB_SHARPHOSPITALITY_385190911",
            "NUTIDAB_SHARPHOSPITALITY_385191002",
            "NUTIDAB_SHARPHOSPITALITY_385191022",
            "NUTIDAB_SHARPHOSPITALITY_385191204",
            "NUTIDAB_SHARPHOSPITALITY_3852001291",
            "NUTIDAB_SHARPHOSPITALITY_3852003021",
            "NUTIDAB_SHARPHOSPITALITY_3852005021",
            "NUTIDAB_SHARPHOSPITALITY_3852005041",
            "NUTIDAB_SHARPHOSPITALITY_3852009301",
            "NUTIDAB_SHARPHOSPITALITY_3852101271",
            "NUTIDAB_SHARPHOSPITALITY_385210127X",
            "NUTIDAB_SHARPHOSPITALITY_385210414X",
            "NUTIDAB_SHARPHOSPITALITY_385210624X",
            "NUTIDAB_SHARPMPAYANDROID_110X",
            "NUTIDAB_SHARPRETAIL_3851701011",
            "NUTIDAB_SHARPRETAIL_3851702141",
            "NUTIDAB_SHARPRETAIL_3851704051",
            "NUTIDAB_SHARPRETAIL_3851705111",
            "NUTIDAB_SHARPRETAIL_3851707061",
            "NUTIDAB_SHARPRETAIL_3851708161",
            "NUTIDAB_SHARPRETAIL_3851709041",
            "NUTIDAB_SHARPRETAIL_3851710101",
            "NUTIDAB_SHARPRETAIL_3851711151",
            "NUTIDAB_SHARPRETAIL_3851712281",
            "NUTIDAB_SHARPRETAIL_3851802131",
            "NUTIDAB_SHARPRETAIL_3851804111",
            "NUTIDAB_SHARPRETAIL_3851805221",
            "NUTIDAB_SHARPRETAIL_3851807091",
            "NUTIDAB_SHARPRETAIL_3851807241",
            "NUTIDAB_SHARPRETAIL_3851810101",
            "NUTIDAB_SHARPRETAIL_3851811281",
            "NUTIDAB_SHARPRETAIL_385190221",
            "NUTIDAB_SHARPRETAIL_385190528",
            "NUTIDAB_SHARPRETAIL_385190911",
            "NUTIDAB_SHARPRETAIL_385191002",
            "NUTIDAB_SHARPRETAIL_385191022",
            "NUTIDAB_SHARPRETAIL_385191204",
            "NUTIDAB_SHARPRETAIL_3852001291",
            "NUTIDAB_SHARPRETAIL_3852003021",
            "NUTIDAB_SHARPRETAIL_3852005041",
            "NUTIDAB_SHARPRETAIL_3852009301",
            "NUTIDAB_SHARPRETAIL_3852101271",
            "NUTIDAB_SHARPRETAIL_385210127X",
            "NUTIDAB_SHARPRETAIL_385210414X",
            "NUTIDAB_SHARPRETAIL_385210624X",
            "NUTIDAB_SHARPSTARTANDROID_10",
            "NUTIDAB_SHARPSTARTANDROID_101",
            "NUTIDAB_SHARPSTARTANDROID_102",
            "NUTIDAB_SHARPSTARTANDROID_103",
            "NUTIDAB_SHARPSTARTANDROID_10X",
            "NUTIDAB_SHARPSTART_3851701011",
            "NUTIDAB_SHARPSTART_3851702141",
            "NUTIDAB_SHARPSTART_3851704051",
            "NUTIDAB_SHARPSTART_3851705111",
            "NUTIDAB_SHARPSTART_3851707061",
            "NUTIDAB_SHARPSTART_3851708161",
            "NUTIDAB_SHARPSTART_3851709041",
            "NUTIDAB_SHARPSTART_3851710101",
            "NUTIDAB_SHARPSTART_3851711151",
            "NUTIDAB_SHARPSTART_3851712281",
            "NUTIDAB_SHARPSTART_3851802131",
            "NUTIDAB_SHARPSTART_3851804111",
            "NUTIDAB_SHARPSTART_3851805221",
            "NUTIDAB_SHARPSTART_3851807091",
            "NUTIDAB_SHARPSTART_3851807241",
            "NUTIDAB_SHARPSTART_3851810101",
            "NUTIDAB_SHARPSTART_3851811281",
            "NUTIDAB_SHARPSTART_385190221",
            "NUTIDAB_SHARPSTART_385190528",
            "NUTIDAB_SHARPSTART_385190911",
            "NUTIDAB_SHARPSTART_385191002",
            "NUTIDAB_SHARPSTART_385191022",
            "NUTIDAB_SHARPSTART_385191204",
            "NUTIDAB_SHARPSTART_3852001291",
            "NUTIDAB_SHARPSTART_3852003021",
            "NUTIDAB_SHARPSTART_3852005041",
            "NUTIDAB_SHARPSTART_3852009301",
            "NUTIDAB_SHARPSTART_3852101271",
            "NUTIDAB_SHARPSTART_385210127X",
            "NUTIDAB_SHARPSTART_385210414X",
            "NUTIDAB_SHARPSTART_385210624X",
            "NUTIDAB_SHARPSUPERMARKET_3851701011",
            "NUTIDAB_SHARPSUPERMARKET_3851702141",
            "NUTIDAB_SHARPSUPERMARKET_3851704051",
            "NUTIDAB_SHARPSUPERMARKET_3851705111",
            "NUTIDAB_SHARPSUPERMARKET_3851707061",
            "NUTIDAB_SHARPSUPERMARKET_3851708161",
            "NUTIDAB_SHARPSUPERMARKET_3851709041",
            "NUTIDAB_SHARPSUPERMARKET_3851710101",
            "NUTIDAB_SHARPSUPERMARKET_3851711151",
            "NUTIDAB_SHARPSUPERMARKET_3851712281",
            "NUTIDAB_SHARPSUPERMARKET_3851802131",
            "NUTIDAB_SHARPSUPERMARKET_3851804111",
            "NUTIDAB_SHARPSUPERMARKET_3851805221",
            "NUTIDAB_SHARPSUPERMARKET_3851807091",
            "NUTIDAB_SHARPSUPERMARKET_3851807241",
            "NUTIDAB_SHARPSUPERMARKET_3851810101",
            "NUTIDAB_SHARPSUPERMARKET_3851811281",
            "NUTIDAB_SHARPSUPERMARKET_385190221",
            "NUTIDAB_SHARPSUPERMARKET_385190528",
            "NUTIDAB_SHARPSUPERMARKET_385190911",
            "NUTIDAB_SHARPSUPERMARKET_3851910021",
            "NUTIDAB_SHARPSUPERMARKET_385191022",
            "NUTIDAB_SHARPSUPERMARKET_385191204",
            "NUTIDAB_SHARPSUPERMARKET_3852001291",
            "NUTIDAB_SHARPSUPERMARKET_3852003021",
            "NUTIDAB_SHARPSUPERMARKET_3852005041",
            "NUTIDAB_SHARPSUPERMARKET_3852009301",
            "NUTIDAB_SHARPSUPERMARKET_3852101271",
            "NUTIDAB_SHARPSUPERMARKET_385210127X",
            "NUTIDAB_SHARPSUPERMARKET_385210414X",
            "NUTIDAB_SHARPSUPERMARKET_385210624X",
            "NUTIDAB_SHARPWELLNESS_3851701011",
            "NUTIDAB_SHARPWELLNESS_3851702141",
            "NUTIDAB_SHARPWELLNESS_3851704051",
            "NUTIDAB_SHARPWELLNESS_3851705111",
            "NUTIDAB_SHARPWELLNESS_3851707061",
            "NUTIDAB_SHARPWELLNESS_3851708161",
            "NUTIDAB_SHARPWELLNESS_3851709041",
            "NUTIDAB_SHARPWELLNESS_3851710101",
            "NUTIDAB_SHARPWELLNESS_3851711151",
            "NUTIDAB_SHARPWELLNESS_3851712281",
            "NUTIDAB_SHARPWELLNESS_3851802131",
            "NUTIDAB_SHARPWELLNESS_3851804111",
            "NUTIDAB_SHARPWELLNESS_3851805221",
            "NUTIDAB_SHARPWELLNESS_3851807091",
            "NUTIDAB_SHARPWELLNESS_3851807241",
            "NUTIDAB_SHARPWELLNESS_3851810101",
            "NUTIDAB_SHARPWELLNESS_3851811281",
            "NUTIDAB_SHARPWELLNESS_385190221",
            "NUTIDAB_SHARPWELLNESS_385190528",
            "NUTIDAB_SHARPWELLNESS_385190911",
            "NUTIDAB_SHARPWELLNESS_385191002",
            "NUTIDAB_SHARPWELLNESS_385191022",
            "NUTIDAB_SHARPWELLNESS_385191204",
            "NUTIDAB_SHARPWELLNESS_3852001291",
            "NUTIDAB_SHARPWELLNESS_3852003021",
            "NUTIDAB_SHARPWELLNESS_3852005041",
            "NUTIDAB_SHARPWELLNESS_3852009301",
            "NUTIDAB_SHARPWELLNESS_3852101271",
            "NUTIDAB_SHARPWELLNESS_385210127X",
            "NUTIDAB_SHARPWELLNESS_385210414X",
            "NUTIDAB_SHARPWELLNESS_385210624X",
            "ODINSYSTEMERAS_FIXIT_3426",
            "ODINSYSTEMERAS_FIXIT_35X",
            "OFFICELINKAS_FRONTLINE_40",
            "OLYMPIAGOEUROPEGMBH_OLYMPIA_CM911",
            "OMDATAAS_ORC_10",
            "OMEGAPSAS_PIMSKASSE_10",
            "ONLINEEDBAS_EXCELINE_2000",
            "ONLINEPOS_ALLINONE_1",
            "OPENSOLUTIONNORWAYAS_OPENSOLUTIONRETAILSYSTEM_40",
            "OPENSOLUTIONNORWAYAS_OPENVENUE_20",
            "ORACLE_SIMPHONY_29",
            "ORACLE_SIMPHONY_29ANDLATER",
            "ORDERXAS_ORDERXMPOS_10",
            "ORDRAS_1000_1",
            "PALISIS_PIDION_4X",
            "PASTELLDATAAB_PROFIT10NO_88",
            "PCKASSE_PCK_3",
            "PCKAS_COMPLETEPOS_4",
            "PCKAS_COMPLETEPOS_40",
            "PCKAS_ERPPOS_15XXXX",
            "PCKAS_PCKASSE_31",
            "PCKAS_PCKASSE_3158",
            "PCKAS_PCKASSE_VER3X",
            "PCKNO_PCKASSE_3158",
            "PENGVINAFFARSSYSTEMAB_PENGVIN_4262",
            "PERFECTITBEXAB_BEXPOS_3XX",
            "PILAROAS_PILAROPROPOS_3",
            "PINCHONATIONAB_CASHIERCLOUD_100",
            "PLUTOSYSTEMSAB_PLUTO1024_K0427OGNYERE",
            "POINTSOFTSCANDINAVIAAS_POINTSOFT_2701961",
            "POLYGONCOMMUNICATIONSAS_PRSPOS_214",
            "POSONEA_S_POSONE_POSONE4",
            "POWEREDBYYONOTONOY_POWEREDBYYONOTONPOS_10",
            "PRESSISCONSULTINGAS_PRESSISPOS_V20",
            "PRESSISCONSULTINGAS_PRESSISPOS_V5030",
            "PRESSISCONSULTINGAS_PRESSISPOS_V5220",
            "PRESSISCONSULTINGAS_PRESSISPOS_V6001",
            "PRESSISCONSULTINGAS_PRESSISPOS_V7002",
            "PROFITIMPACTNORGEAS_PIMS_100",
            "PROFITIMPACTNORGEAS_RESERVATOR_100",
            "PROOPTICSAS_HEADSOPTICS_1",
            "PROVENDO_ODOO_11",
            "PULSENRETAILAB_HARMONEY_35XX",
            "PUNTOFASL_EJOURNALNOR_2018111",
            "QUADRIGAAB_EUROSHOP_2018",
            "QUICKORDERAPS_QUICKPOS_251",
            "QUICKSYSYTEMSAS_Q3_30240",
            "QUICKSYSYTEMSAS_Q3_30X",
            "QUICKSYSYTEMSAS_QUICKNG_2089",
            "QUORIONDATASYSTEMSGMBH_CR18_G3180822NO",
            "QUORIONDATASYSTEMSGMBH_CR21B_G1170615NO",
            "QUORIONDATASYSTEMSGMBH_CR50_170601NO",
            "QUORIONDATASYSTEMSGMBH_QMP18_G3180822NO",
            "QUORIONDATASYSTEMSGMBH_QMP18_QA180822NO",
            "QUORIONDATASYSTEMSGMBH_QMP2044_170601NO",
            "QUORIONDATASYSTEMSGMBH_QMP2044_H4170615NO",
            "QUORIONDATASYSTEMSGMBH_QMP2044_H4180822NO",
            "QUORIONDATASYSTEMSGMBH_QMP2264_170601NO",
            "QUORIONDATASYSTEMSGMBH_QMP2264_H4170615NO",
            "QUORIONDATASYSTEMSGMBH_QMP2264_H4180822NO",
            "QUORIONDATASYSTEMSGMBH_QMP50_G1170615NO",
            "QUORIONDATASYSTEMSGMBH_QMP50_H1180822NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH10_QA170215NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH10_QA170615NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH10_QA180822NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH12_170601NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH12_QA170615NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH12_QA180822NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH15_170601NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH15_QA170615NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH15_QA180822NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH8_170601NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH8_QB170615NO",
            "QUORIONDATASYSTEMSGMBH_QTOUCH8_QB180822NO",
            "RAVNWEBVEVERIETAS_KINOLOGGBILLETTSALG_1",
            "RAVNWEBVEVERIETAS_KINOLOGGBILLETTSALG_2",
            "RDISOFTWAREACAPGEMINICOMPANYT_NP61_SLE141FMNP6130MR5QR0HF0K517MR2HF25",
            "RDISOFTWAREACAPGEMINICOMPANY_NP61_SLE145ELLERNYERE",
            "RDISOFTWARE_NP61_2021Q2HF5_NP613010QR1HF151K5176QR4HF9SLE445",
            "REDROCKSOLUTIONSAS_TOGITALPOS_V286",
            "REKNESAS_REKNESWMS_154X",
            "RESPONSERETAILAS_MANDARIN_442",
            "RETAILPLANITAS_OPTITECRS_16271",
            "RETAILPLANITNORGEAS_OPTIMALTILL_OPTIMALKASSE_16351OGNYERE",
            "RETAILPROINTERNATIONALLLC_PRISMNO_1XXXX",
            "RETAILPROINTERNATIONALLLC_RETAILPROVERSION86_860",
            "SALDIDKAPS_GERNERSPOS_1",
            "SCALEITAS_SCALEITPOS_10",
            "SEATGEEK_SRO_4221OGNYERE",
            "SHINHEUNGPRECISIONCOLTD_SAM4SER230EJ_NOR04000",
            "SHINHEUNGPRECISIONCOLTD_SAM4SER260EJ_NOR04000",
            "SHINHEUNGPRECISIONCOLTD_SAM4SER265EJ_NOR04000",
            "SHINHEUNGPRECISIONCOLTD_SAM4SER510BSE_NOR04000",
            "SHINHEUNGPRECISIONCOLTD_SAM4SNR500_NOR04000",
            "SHOEDVISIONAMBA_SHOESHOP_3161",
            "SHOPBOXAPS_SHOPBOX_16X",
            "SHOPLABSAS_SHOPLABS_160",
            "SIAIBSC_COMPANY_RESICO_40",
            "SITOO_SITOOPOS_1X",
            "SKIBARSYSTEMSAB_SKIBARV2CASHIER_09100",
            "SKIDATASCANDINAVIAAB_SUMMITLOGIC_26",
            "SKISTARAB_SORENPOS_446151OCHSENARE",
            "SMARTIPOS_APP_10",
            "SMARTLAUNDRYAS_SMARTIPOS_100",
            "SMSAS_RMSV_IDNR151190_595NO",
            "SMSAS_RMSV_IDNR151190_RMSV592NO",
            "SMSAS_RMSV_IDNR151190_RMSV59NO",
            "SODVINSYSTEMERAS_XAKTMEDLEMBUTIKK_20181201ELLERNYERE",
            "SODVINSYSTEMERAS_XAKTMEDLEM_20181201ELLERNYERE",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_314",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_332",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_335",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_3351",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_340",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_341",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_342",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_343",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_344",
            "SPECSAVERSORACLERETAILJAVA_OPTICUS_346",
            "SPECTERAB_SPECTERPOS_3XX",
            "STAMFORDAB_ECSBUTIKSDATA_62031OCHSENARE",
            "SUNMITECHNOLOGYCOLTD_OLIVERPOS_2388",
            "SUSOFT_APOS_11",
            "SVERIGEKASSANAB_NORPOS_A02",
            "SYNSAMGROUPSWEDENAB_EYELIFE_30",
            "TAILORMOADEAPS_TAILORSOFT_2913902",
            "TELLIXAS_PROTOUCH_1130",
            "TELLIXAS_PROTOUCH_12X",
            "TELLIXAS_PROTOUCH_13X",
            "TELLIXAS_PROTOUCH_14X",
            "TELLIXAS_PROTOUCH_15X",
            "TELLIXAS_PROTOUCH_16X",
            "TICKETCOAS_TICKETCOADMIN_166ANDROID",
            "TICKETCOAS_TICKETCOADMIN_180ANDROID",
            "TICKETCOAS_TICKETCOADMIN_3200IOS",
            "TICKETCOAS_TICKETCOADMIN_3210IOS",
            "TICKETINTERNATIONALSOFTWARETRADINGGMBH_COKG_DOLPHIN_81300",
            "TICKSTERAB_TICKSTERBLINKPOS_21X",
            "TICKSTERAB_TICKSTERBLINKPOS_22X",
            "TIDYPOSAS_POCKETERP_TIDYPAY_217",
            "TIMEKIOSKAS_TIMEKIOSKPOS_52",
            "TIMMAOY_TIMMABUSINESS_1",
            "TIMMAOY_TIMMABUSINESS_1200",
            "TIXAS_BOTIXNO_2019",
            "TOKHEIMBELGIUMNV_FUELPOS_EUR46",
            "TOKHEIMBELGIUMNV_FUELPOS_EUR49",
            "TOKHEIMBELGIUMNV_FUELPOS_EUR52",
            "TOUCHSOFTAS_TOUCHSOFTPOS_2381",
            "TOUCHSOFTAS_TOUCHSOFTPOS_32",
            "TOUCHSOFTAS_TOUCHSOFTPOS_32XX",
            "TOUCHSOFTAS_TOUCHSOFTPOS_33XX",
            "TOUCHSOFTAS_TOUCHSOFTPOS_4XX",
            "TRIVECSYSTEMSAS_DOMINONO_385",
            "TRIVECSYSTEMSAS_DOMINONO_4XXXX",
            "TURNITOU_TURNITRIDE_31",
            "UNIKUMDATASYSTEMAB_PYRAMIDBUSINESSSTUDIOS_342",
            "UNIMICROAS_UNIOEKONOMIV3_366XXX",
            "UNIPOSAS_BUTIKKDATA_623",
            "UNIPOSAS_BUTIKKDATA_7X",
            "UNIPOSAS_BUTIKKDATA_8X",
            "UNIPOSAS_SMARTKASSE_10",
            "UNIPOSAS_SMARTKASSE_2X",
            "VANGSOFTWARE_VANGSOFTWARE_VASO22",
            "VECTRONSYSTEMAG_VECTRONPOS_5X",
            "VECTRON_VECTRONPOSTOUCH_600",
            "VERENDUSSYSTEMAB_VERENDUSBUTIKK_11",
            "VESTSYSTEMPARTNERAS_VSPMILJOE_30",
            "VESTSYSTEMPARTNER_APOS_30",
            "VETSERVEAS_VETSERVECLASSIC_1187ELLERNYERE",
            "VISBOOKAS_VISBOOK_7X",
            "VISMARETAILAS_WALLMOBPOS_217PLUSS",
            "VISMARETAILSOFTWAREAS_SILENTTOUCH_162SP1",
            "VISMARETAILSOFTWAREAS_SILENTTOUCH_171",
            "VISMARETAILSOFTWAREAS_SILENTTOUCH_172",
            "VISMARETAILSOFTWAREAS_SILENTTOUCH_181",
            "VISMARETAILSOFTWAREAS_SUPERPOS_1721",
            "VISMASOFTWAREINTERNATIONALAS_VISMAERPPOS_12X",
            "VISMASOFTWAREINTERNATIONALAS_VISMAERPPOS_13000",
            "VISMASOFTWARELABSAS_VISMAENTERPRISEKASSEPLUS_20202",
            "VISMASOFTWARELABSAS_VISMAENTERPRISEKASSE_20202",
            "VITECAUTODATAAS_ADKASSE_1001",
            "VITECFIXITSYSTEMERAS_FIXIT_35X",
            "VITECINFOEASYAS_PCKASSE_10218",
            "VITECSMARTVISITORSYSTEMAB_DK5000_3110",
            "WINPOSGROUP_WINPOSMEGASTORE_30",
            "WINSOLUTIONAS_2021_10",
            "WINTERSTEIGERAG_EASYRENT_17",
            "WLCOMAS_BUILD103_2018310245",
            "WSAELECTRONICGMBH_TICKETLINE_72XOGNYERE",
            "WTWAS_LINEFARE_10",
            "ZIRIUSAS_ZIRIUSKASSE_35",
            "ANNET_KASSASYSTEM"
          ],
          "readOnly": true,
          "type": "string"
        },
        "genericDataSubTypeGroupId": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataType": {
          "enum": [
            "MISC",
            "TRANSPORT",
            "ACCOMMODATION_AND_RESTAURANT",
            "PROFIT_AND_LOSS",
            "CUSTOMER_RECEIVABLE",
            "INVENTORIES",
            "TANGIBLE_FIXED_ASSETS",
            "RECONCILIATION_OF_EQUITY",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "DOCUMENT_DOWNLOADED",
            "GROUP_CONTRIBUTIONS",
            "TAX_RETURN",
            "TAX_CALCULATIONS",
            "DOCUMENTATION"
          ],
          "readOnly": true,
          "type": "string"
        },
        "groupId": {
          "readOnly": true,
          "type": "number"
        },
        "yearOfInitialRegistration": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "Category": {
      "properties": {
        "category": {
          "enum": [
            "GENERAL",
            "ACCOUNTING",
            "VOUCHER_APPROVAL",
            "BANK",
            "COMPANY",
            "CUSTOMER",
            "DOCUMENT",
            "INVOICING",
            "PROJECT",
            "PRODUCT",
            "REPORT",
            "WAGE",
            "TASK",
            "HOUR_LIST",
            "TRAVEL_REPORT",
            "VOUCHER",
            "YEAR_END_REPORT"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CellBlueprintV1": {
      "properties": {
        "cellFormat": {
          "type": "string"
        },
        "columnReference": {
          "type": "string"
        },
        "defaultAxis": {
          "enum": [
            "NONE",
            "ROW",
            "COL"
          ],
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "rowReference": {
          "type": "string"
        },
        "valueFormat": {
          "type": "string"
        },
        "variableName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Change": {
      "properties": {
        "changeType": {
          "enum": [
            "CREATE",
            "UPDATE",
            "DELETE",
            "LOCKED",
            "REOPENED",
            "DO_NOT_SHOW"
          ],
          "type": "string"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ChangeOfEquity": {
      "properties": {
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "negate": {
          "readOnly": true,
          "type": "boolean"
        },
        "postType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "readOnly": true,
          "type": "string"
        },
        "postValue": {
          "readOnly": true,
          "type": "number"
        },
        "readOnly": {
          "readOnly": true,
          "type": "boolean"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Checklist": {
      "properties": {
        "changedDate": {
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "checked": {
          "type": "boolean"
        },
        "checklistProperty": {
          "$ref": "#/definitions/ChecklistProperty"
        },
        "comment": {
          "maxLength": 255,
          "type": "string"
        },
        "customizedChecklistProperty": {
          "$ref": "#/definitions/CustomizedChecklistProperty"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "ChecklistProperty": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "checklistType": {
          "enum": [
            "TANGIBLE_FIXED_ASSETS",
            "PROFIT_AND_LOSS",
            "INVENTORIES",
            "CUSTOMER_RECEIVABLES",
            "COMMERCIAL_VEHICLE",
            "ACCOMMODATION_AND_RESTAURANT",
            "RESULT_BALANCE",
            "PERSONAL_INCOME",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "TAXABLE_RESULT",
            "GROUP_CONTRIBUTION",
            "DIVIDEND",
            "DISPOSITIONS",
            "RECONCILIATION_OF_EQUITY",
            "PROPERTY",
            "ASSET_PAPIR",
            "TAX_RETURN",
            "TAX_RETURN_TAX_CALCULATION",
            "CONTROL_TAX_RETURN",
            "SUBMIT",
            "GENERAL_INFO",
            "RESULT_BALANCE_ANNUAL_ACCOUNT",
            "NOTES",
            "CONTROL_ANNUAL_ACCOUNT",
            "ANNUAL_ACCOUNT_SUBMITTED",
            "ABOUT_BUSINESS",
            "PREPARATION",
            "SETTLEMENTS_ITEMS",
            "WHAT_TO_REPORT"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "info": {
          "maxLength": 255,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "section": {
          "maxLength": 255,
          "type": "string"
        },
        "typeId": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Checkout": {
      "properties": {
        "company": {
          "$ref": "#/definitions/Company",
          "description": "Information about the company."
        },
        "employee": {
          "$ref": "#/definitions/Employee",
          "description": "Employee that wants to checkout."
        },
        "isPayingCustomer": {
          "description": "Returns whether the company category is paying.",
          "type": "boolean"
        },
        "isProxyOrClient": {
          "description": "Returns whether employee is proxy or not",
          "type": "boolean"
        },
        "payingCustomer": {
          "type": "boolean"
        },
        "proxyOrClient": {
          "type": "boolean"
        }
      },
      "required": [
        "company",
        "employee"
      ],
      "type": "object"
    },
    "Choice": {
      "properties": {
        "name": {
          "type": "string"
        },
        "positive": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "positive",
        "value"
      ],
      "type": "object"
    },
    "Client": {
      "properties": {
        "accountantOrSimilar": {
          "readOnly": true,
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customerCompanyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "format": "email",
          "maxLength": 254,
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "faxNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "organizationNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "type": {
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "FLI",
            "Other"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "address",
        "name",
        "type"
      ],
      "type": "object"
    },
    "ClientAccessTemplate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "roleContainers": {
          "items": {
            "enum": [
              "ROLE_ADMINISTRATOR",
              "AUTH_READ_ONLY",
              "AUTH_LOGIN",
              "AUTH_ALL_VOUCHERS",
              "AUTH_COMPANY_ACCOUNTING_REPORTS",
              "AUTH_ACCOUNTING_SETTINGS",
              "AUTH_COMPANY_RESULT_BUDGET",
              "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ATTESTOR",
              "AUTH_DIRECT_REMIT_ADMIN",
              "AUTH_DIRECT_REMIT_LIGHT",
              "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
              "AUTH_DIRECT_REMIT_CREATE_NEW",
              "AUTH_DIRECT_REMIT_ADMIN_ZTL",
              "AUTH_COMPANY_ADMIN",
              "AUTH_EMPLOYEE_INFO",
              "AUTH_COMPANY_EMPLOYEE_ADMIN",
              "AUTH_CUSTOMER_ADMIN",
              "AUTH_CUSTOMER_INFO",
              "AUTH_CREATE_CUSTOMER",
              "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
              "AUTH_ARCHIVE_READ",
              "AUTH_ARCHIVE_WRITE",
              "AUTH_ARCHIVE_ADMIN",
              "AUTH_CREATE_NOTE",
              "AUTH_CREATE_NOTE_TEMPLATE",
              "AUTH_INVOICING",
              "AUTH_OFFER_ADMIN",
              "AUTH_ORDER_ADMIN",
              "AUTH_CREATE_OFFER",
              "AUTH_CREATE_ORDER",
              "AUTH_FACTORING_EXPORT",
              "AUTH_INVOICE_ADMIN_SETTINGS",
              "AUTH_PROJECT_MANAGER",
              "AUTH_PROJECT_MANAGER_COMPANY",
              "AUTH_DEPARTMENT_REPORT",
              "AUTH_CREATE_PROJECT",
              "AUTH_PROJECT_EXTRA_COSTS",
              "AUTH_PROJECT_INFO",
              "AUTH_PROJECT_ADMIN_SETTINGS",
              "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
              "AUTH_PROJECT_CONTROL_FORMS",
              "AUTH_PRODUCT_ADMIN",
              "REPORT_ADMINISTRATOR",
              "REPORT_AUTHOR",
              "AUTH_COMPANY_WAGE_ADMIN",
              "AUTH_WAGE_ADMIN_SETTINGS",
              "AUTH_WAGE_INFORMATION",
              "AUTH_TASK_ADMIN",
              "AUTH_HOURS_COMPANY",
              "AUTH_HOUR_STATISTICS_COMPANY",
              "AUTH_HOURLIST",
              "AUTH_HOURLIST_SETTINGS",
              "AUTH_HOLYDAY_PLAN",
              "AUTH_TRAVEL_REPORTS_COMPANY",
              "AUTH_TRAVEL_REPORT",
              "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
              "AUTH_VOUCHER_EXPORT",
              "AUTH_INBOX_VOUCHER",
              "AUTH_INCOMPLETE_VOUCHERS",
              "AUTH_INCOMING_INVOICE",
              "AUTH_VOUCHER_SETTINGS",
              "AUTH_BANK_RECONCILIATION",
              "AUTH_VAT_REPORT",
              "AUTH_SICKNESS_REIMBURSEMENT",
              "AUTH_REGISTER_INCOME",
              "AUTH_ADVANCED_VOUCHER",
              "AUTH_VOUCHER_IMPORT",
              "AUTH_PRODUCT_INVOICE",
              "AUTH_CUSTOMS_DECLARATION",
              "AUTH_VOUCHER_AUTOMATION",
              "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
              "YEAR_END_REPORT_ADMINISTRATOR"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ClientForApproval": {
      "properties": {
        "authorized": {
          "type": "boolean"
        },
        "clientId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "forApprovalCount": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientForRemit": {
      "properties": {
        "authorized": {
          "type": "boolean"
        },
        "clientId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "forPaymentCount": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientForReview": {
      "properties": {
        "authorized": {
          "type": "boolean"
        },
        "clientId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "forReviewCount": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ClientInbox": {
      "properties": {
        "authorized": {
          "type": "boolean"
        },
        "clientId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "inboxCount": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CloseGroup": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "postings": {
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ColorField": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "enum": [
            "FONT_COLOR",
            "MAIN_COLOR"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Comment": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "maxLength": 1024,
          "readOnly": true,
          "type": "string"
        },
        "createdAt": {
          "readOnly": true,
          "type": "string"
        },
        "editedAt": {
          "readOnly": true,
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucherId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "employee"
      ],
      "type": "object"
    },
    "CommentCreation": {
      "properties": {
        "commentText": {
          "description": "The text of the comment to be created",
          "type": "string"
        }
      },
      "required": [
        "commentText"
      ],
      "type": "object"
    },
    "CommentField": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommentInput": {
      "properties": {
        "comment": {
          "description": "The comment",
          "type": "string"
        },
        "isStructured": {
          "description": "Is this comment a structured comment? It must be in a predefined list from Skatteetaten",
          "type": "boolean"
        },
        "vatReturnsId": {
          "description": "The id of the vatReturns",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "comment"
      ],
      "type": "object"
    },
    "CommentValue": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "enum": [
            "INVOICE_COMMENT"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommercialVehicle": {
      "properties": {
        "accountedValue": {
          "readOnly": true,
          "type": "number"
        },
        "amountToBePostedOnAccount": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataOverviews": {
          "items": {
            "$ref": "#/definitions/GenericDataOverview"
          },
          "type": "array"
        },
        "groupedAccountedValue": {
          "readOnly": true,
          "type": "number"
        },
        "sumExpenses": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Company": {
      "properties": {
        "accountantOrSimilar": {
          "readOnly": true,
          "type": "boolean"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "format": "email",
          "maxLength": 254,
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "faxNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "organizationNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "type": {
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "FLI",
            "Other"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "address",
        "name",
        "type"
      ],
      "type": "object"
    },
    "CompanyAuthorityDTO": {
      "properties": {
        "hasCompanyAuthority": {
          "enum": [
            "DENIED",
            "MANUAL_CHECK",
            "ACCEPTED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyAutoCompleteDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "companyCode": {
          "type": "string"
        },
        "companyType": {
          "format": "int32",
          "type": "integer"
        },
        "countryId": {
          "format": "int32",
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberMobile": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "items": {
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyBankAccountPresentation": {
      "properties": {
        "bban": {
          "description": "Bban-number",
          "type": "string"
        },
        "bic": {
          "description": "BIC/SWIFT for this bankaccount",
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/Country",
          "readOnly": true
        },
        "iban": {
          "description": "Iban-number",
          "type": "string"
        },
        "provider": {
          "enum": [
            "NETS",
            "AUTOPAY"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyChooserDTO": {
      "properties": {
        "currentCompany": {
          "$ref": "#/definitions/CompanyDTO"
        },
        "hasAccessToMultipleCompanies": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "CompanyDTO": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "parent": {
          "$ref": "#/definitions/CompanyDTO"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyHoliday": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "days": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isMaxPercentage2Amount6G": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vacationPayPercentage1": {
          "type": "number"
        },
        "vacationPayPercentage2": {
          "type": "number"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CompanyHolidays": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "percentage": {
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "percentage"
      ],
      "type": "object"
    },
    "CompanyRepresentative": {
      "properties": {
        "authorizationManager": {
          "$ref": "#/definitions/AuthorizationManagerCompanyRepresentative"
        },
        "authorizationManagerForCsvPrinter": {
          "$ref": "#/definitions/AuthorizationManager"
        },
        "birthdate": {
          "format": "date-time",
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "type": "array"
        },
        "clientId": {
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "companyName": {
          "type": "string"
        },
        "createLog": {
          "$ref": "#/definitions/RequestlogModel"
        },
        "createLogAsString": {
          "type": "string"
        },
        "createLogId": {
          "format": "int64",
          "type": "integer"
        },
        "deleteLog": {
          "$ref": "#/definitions/RequestlogModel"
        },
        "deleteLogAsString": {
          "type": "string"
        },
        "deleteLogId": {
          "format": "int64",
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "dirty": {
          "type": "boolean"
        },
        "dirtyProperties": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "guiId": {
          "format": "int32",
          "type": "integer"
        },
        "guiRevision": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "longId": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "new": {
          "type": "boolean"
        },
        "revision": {
          "format": "int32",
          "type": "integer"
        },
        "roleInCompany": {
          "format": "int32",
          "type": "integer"
        },
        "selected": {
          "type": "boolean"
        },
        "signatureStatus": {
          "format": "int32",
          "type": "integer"
        },
        "socialSecurityNumber": {
          "type": "string"
        },
        "tripletexUserId": {
          "format": "int32",
          "type": "integer"
        },
        "updateLog": {
          "$ref": "#/definitions/RequestlogModel"
        },
        "updateLogAsString": {
          "type": "string"
        },
        "updateLogId": {
          "format": "int64",
          "type": "integer"
        },
        "urlDetails": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CompanyRepresentativeDTO": {
      "properties": {
        "birthdate": {
          "format": "date-time",
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roleInCompany": {
          "format": "int32",
          "type": "integer"
        },
        "signatureStatus": {
          "format": "int32",
          "type": "integer"
        },
        "socialSecurityNumber": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "name",
        "signatureStatus",
        "socialSecurityNumber"
      ],
      "type": "object"
    },
    "CompanyStandardTime": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "company": {
          "$ref": "#/definitions/Company"
        },
        "fromDate": {
          "type": "string"
        },
        "hoursPerDay": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fromDate",
        "hoursPerDay"
      ],
      "type": "object"
    },
    "CompanyTransactionAggregates": {
      "properties": {
        "id": {
          "description": "Customer id.",
          "readOnly": true,
          "type": "number"
        },
        "incomingAmount": {
          "description": "Incoming amount from this customer.",
          "readOnly": true,
          "type": "number"
        },
        "name": {
          "description": "Customer name.",
          "readOnly": true,
          "type": "number"
        },
        "outgoingAmount": {
          "description": "Outgoing amount to this company.",
          "readOnly": true,
          "type": "number"
        },
        "percentageOfIncoming": {
          "description": "Percentage of incoming amount from all companies.",
          "readOnly": true,
          "type": "number"
        },
        "percentageOfOutgoing": {
          "description": "Percentage outgoing amount from all companies.",
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ConsumerToken": {
      "properties": {
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "expirationDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "token": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Contact": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "format": "email",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobileCountry": {
          "$ref": "#/definitions/Country",
          "description": "The country of the mobile phone number. If not set, the country is derived as best as possible from phoneNumberMobile. NB! 8 digit numbers are assumed to be Norwegian."
        },
        "phoneNumberWork": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ContentDisposition": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "readDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Coordinate": {
      "properties": {
        "geoEmpty": {
          "type": "boolean"
        },
        "latitude": {
          "format": "double",
          "type": "number"
        },
        "location": {
          "type": "string"
        },
        "longitude": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "Cost": {
      "properties": {
        "amountCurrencyIncVat": {
          "type": "number"
        },
        "amountNOKInclVAT": {
          "type": "number"
        },
        "amountNOKInclVATHigh": {
          "readOnly": true,
          "type": "number"
        },
        "amountNOKInclVATLow": {
          "readOnly": true,
          "type": "number"
        },
        "amountNOKInclVATMedium": {
          "readOnly": true,
          "type": "number"
        },
        "category": {
          "maxLength": 100,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comments": {
          "type": "string"
        },
        "costCategory": {
          "$ref": "#/definitions/TravelCostCategory"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isChargeable": {
          "type": "boolean"
        },
        "isPaidByEmployee": {
          "readOnly": true,
          "type": "boolean"
        },
        "paymentType": {
          "$ref": "#/definitions/TravelPaymentType"
        },
        "predictions": {
          "additionalProperties": {
            "$ref": "#/definitions/Prediction"
          },
          "type": "object"
        },
        "rate": {
          "type": "number"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "amountCurrencyIncVat",
        "paymentType"
      ],
      "type": "object"
    },
    "Country": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isoAlpha2Code": {
          "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true,
          "type": "string"
        },
        "isoAlpha3Code": {
          "description": "The ISO 3166-1 Alpha3 code of the country (3 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "maxLength": 3,
          "readOnly": true,
          "type": "string"
        },
        "isoNumericCode": {
          "description": "The ISO 3166-1 numeric code of the country (3 digits). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Credentials": {
      "properties": {
        "appSecret": {
          "description": "App secret",
          "type": "string"
        },
        "mfaCode": {
          "description": "Optional mfa auth code",
          "format": "int32",
          "type": "integer"
        },
        "password": {
          "description": "Users password",
          "type": "string"
        },
        "username": {
          "description": "Users username (email)",
          "type": "string"
        }
      },
      "required": [
        "appSecret",
        "password",
        "username"
      ],
      "type": "object"
    },
    "Currency": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 10,
          "type": "string"
        },
        "description": {
          "maxLength": 100,
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "factor": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isDisabled": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "CurrencyExchangeRate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "minimum": 0,
          "type": "number"
        },
        "source": {
          "description": "Source of exchange rates, i.e Norges Bank",
          "enum": [
            "NORGES_BANK",
            "HALLONEN"
          ],
          "type": "string"
        },
        "sourceCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "targetCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "sourceCurrency",
        "targetCurrency"
      ],
      "type": "object"
    },
    "CurrencyWithRates": {
      "properties": {
        "code": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "factor": {
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        },
        "rate": {
          "minimum": 0,
          "type": "number"
        },
        "source": {
          "description": "Source of exchange rates, i.e Norges Bank",
          "enum": [
            "NORGES_BANK",
            "HALLONEN"
          ],
          "type": "string"
        },
        "sourceCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "targetCurrencyId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "code",
        "sourceCurrency",
        "targetCurrencyId"
      ],
      "type": "object"
    },
    "Customer": {
      "properties": {
        "accountManager": {
          "$ref": "#/definitions/Employee"
        },
        "bankAccountPresentation": {
          "description": "List of bankAccount for this customer",
          "items": {
            "$ref": "#/definitions/CompanyBankAccountPresentation"
          },
          "type": "array"
        },
        "bankAccounts": {
          "description": "[DEPRECATED] List of the bank account numbers for this customer. Norwegian bank account numbers only.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "category1": {
          "$ref": "#/definitions/CustomerCategory",
          "description": "Category 1 of this customer"
        },
        "category2": {
          "$ref": "#/definitions/CustomerCategory",
          "description": "Category 2 of this customer"
        },
        "category3": {
          "$ref": "#/definitions/CustomerCategory",
          "description": "Category 3 of this customer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "The preferred currency for this customer"
        },
        "customerNumber": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "email": {
          "format": "email",
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "emailAttachmentType": {
          "description": "Define the invoice attachment type for emailing to the customer.<br>LINK: Send invoice as link in email.<br>ATTACHMENT: Send invoice as attachment in email.<br>",
          "enum": [
            "LINK",
            "ATTACHMENT"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceEmail": {
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "invoiceSendMethod": {
          "description": "Define the invoicing method for the customer.<br>EMAIL: Send invoices as email.<br>EHF: Send invoices as EHF.<br>EFAKTURA: Send invoices as EFAKTURA.<br>AVTALEGIRO: Send invoices as AVTALEGIRO.<br>VIPPS: Send invoices through VIPPS.<br>PAPER: Send invoices as paper invoice.<br>MANUAL: User will have to send invocie manually.<br>",
          "enum": [
            "EMAIL",
            "EHF",
            "EFAKTURA",
            "AVTALEGIRO",
            "VIPPS",
            "PAPER",
            "MANUAL"
          ],
          "type": "string"
        },
        "invoiceSendSMSNotification": {
          "description": "Is sms-notification on/off",
          "type": "boolean"
        },
        "invoicesDueIn": {
          "description": "Number of days/months in which invoices created from this customer is due",
          "format": "int32",
          "maximum": 10000,
          "minimum": 0,
          "type": "integer"
        },
        "invoicesDueInType": {
          "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
          "enum": [
            "DAYS",
            "MONTHS",
            "RECURRING_DAY_OF_MONTH"
          ],
          "type": "string"
        },
        "isAutomaticNoticeOfDebtCollectionEnabled": {
          "description": "Has automatic notice of debt collection enabled for this customer.",
          "type": "boolean"
        },
        "isAutomaticReminderEnabled": {
          "description": "Has automatic reminders enabled for this customer.",
          "type": "boolean"
        },
        "isAutomaticSoftReminderEnabled": {
          "description": "Has automatic soft reminders enabled for this customer.",
          "type": "boolean"
        },
        "isCustomer": {
          "readOnly": true,
          "type": "boolean"
        },
        "isFactoring": {
          "description": "If true; send this customers invoices to factoring (if factoring is turned on in account).",
          "type": "boolean"
        },
        "isInactive": {
          "readOnly": true,
          "type": "boolean"
        },
        "isPrivateIndividual": {
          "type": "boolean"
        },
        "isSupplier": {
          "description": "Defines if the customer is also a supplier.",
          "type": "boolean"
        },
        "language": {
          "enum": [
            "NO",
            "EN",
            "SV"
          ],
          "type": "string"
        },
        "ledgerAccount": {
          "$ref": "#/definitions/Account",
          "description": "Can be used to specify the ledger account of the customer if it's different from the default 1500 account."
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "organizationNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "overdueNoticeEmail": {
          "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
          "format": "email",
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "singleCustomerInvoice": {
          "description": "Enables various orders on one customer invoice.",
          "type": "boolean"
        },
        "supplierNumber": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CustomerCategory": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "type": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "CustomerReceivable": {
      "properties": {
        "accountedValue": {
          "readOnly": true,
          "type": "number"
        },
        "amountToBePostedOnAccount": {
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceAccountingValues": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceAscertainedLoss": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceDifferences": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceReceivableAndNonInvoicedRevenue": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceWriteDown": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataOverviews": {
          "items": {
            "$ref": "#/definitions/GenericDataOverview"
          },
          "type": "array"
        },
        "openingBalanceAccountingValues": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceAscertainedLoss": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceDifferences": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceReceivableAndNonInvoicedRevenue": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceWriteDown": {
          "readOnly": true,
          "type": "number"
        },
        "sumTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "CustomerTripletexAccount2": {
      "properties": {
        "accessRequestType": {
          "description": "If the accounting office is both an accounatant and an auditor",
          "enum": [
            "DEFAULT",
            "ACCOUNTANT",
            "AUDITOR"
          ],
          "type": "string"
        },
        "accountType": {
          "enum": [
            "TEST",
            "PAYING",
            "FREE"
          ],
          "type": "string"
        },
        "administrator": {
          "$ref": "#/definitions/Employee",
          "description": "Administrator user to create in the new company. Leave empty if calling this enpoint as an auditor og accountant company"
        },
        "administratorPassword": {
          "description": "The password of the administrator user.",
          "type": "string"
        },
        "autoValidateUserLogin": {
          "description": "Should the user be automatically validated?",
          "type": "boolean"
        },
        "chartOfAccountsType": {
          "description": "The chart of accounts to use for the new company",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ],
          "type": "string"
        },
        "createApiToken": {
          "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.",
          "type": "boolean"
        },
        "creatorReceivingReceipt": {
          "description": "Should the receipt for this order be sent to the user creating the account?",
          "type": "boolean"
        },
        "customerId": {
          "description": "The customer id to an already created customer to create a Tripletex account for.",
          "format": "int32",
          "type": "integer"
        },
        "customerInvoiceEmail": {
          "description": "The address to send the invoice to at the customer.",
          "type": "string"
        },
        "modules": {
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          },
          "type": "array"
        },
        "numberOfEmployees": {
          "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "sendEmails": {
          "description": "Should the emails normally sent during creation be sent in this case?",
          "type": "boolean"
        },
        "sendInvoiceToCustomer": {
          "description": "Should the invoices for this account be sent to the customer?",
          "type": "boolean"
        },
        "type": {
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "FLI",
            "Other"
          ],
          "type": "string"
        },
        "vatStatusType": {
          "description": "VAT type",
          "enum": [
            "VAT_REGISTERED",
            "VAT_NOT_REGISTERED",
            "VAT_APPLICANT"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountType",
        "modules",
        "type"
      ],
      "type": "object"
    },
    "CustomizedChecklistProperty": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "checklistType": {
          "enum": [
            "TANGIBLE_FIXED_ASSETS",
            "PROFIT_AND_LOSS",
            "INVENTORIES",
            "CUSTOMER_RECEIVABLES",
            "COMMERCIAL_VEHICLE",
            "ACCOMMODATION_AND_RESTAURANT",
            "RESULT_BALANCE",
            "PERSONAL_INCOME",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "TAXABLE_RESULT",
            "GROUP_CONTRIBUTION",
            "DIVIDEND",
            "DISPOSITIONS",
            "RECONCILIATION_OF_EQUITY",
            "PROPERTY",
            "ASSET_PAPIR",
            "TAX_RETURN",
            "TAX_RETURN_TAX_CALCULATION",
            "CONTROL_TAX_RETURN",
            "SUBMIT",
            "GENERAL_INFO",
            "RESULT_BALANCE_ANNUAL_ACCOUNT",
            "NOTES",
            "CONTROL_ANNUAL_ACCOUNT",
            "ANNUAL_ACCOUNT_SUBMITTED",
            "ABOUT_BUSINESS",
            "PREPARATION",
            "SETTLEMENTS_ITEMS",
            "WHAT_TO_REPORT"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DashboardContextDTO": {
      "properties": {
        "companyCurrency": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "showAgroTourMe": {
          "type": "boolean"
        },
        "showMamutTourMe": {
          "type": "boolean"
        },
        "showTourMe": {
          "type": "boolean"
        },
        "showYearEndTourMe": {
          "type": "boolean"
        },
        "trialAccount": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "DashboardDTO": {
      "properties": {
        "widgets": {
          "$ref": "#/definitions/Widgets"
        }
      },
      "type": "object"
    },
    "DatabaseComponentAuthorizationManager": {
      "type": "object"
    },
    "DatabaseComponentAuthorizationManagerRequestlogModel": {
      "type": "object"
    },
    "Day": {
      "properties": {
        "hours": {
          "items": {
            "$ref": "#/definitions/Hours"
          },
          "type": "array"
        },
        "weekDay": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "Delete": {
      "properties": {
        "available": {
          "description": "Is the delete operation available for this Voucher?",
          "readOnly": true,
          "type": "boolean"
        },
        "reasons": {
          "description": "If the delete operation is not available then this is a list of reasons why. Otherwise the list will be empty",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "DeliveryAddress": {
      "properties": {
        "addressLine1": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "bnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "city": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "displayNameInklMatrikkel": {
          "readOnly": true,
          "type": "string"
        },
        "fnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "gnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "knr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        },
        "postalCode": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "snr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "unitNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Department": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "departmentManager": {
          "$ref": "#/definitions/Employee"
        },
        "departmentNumber": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isInactive": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "DepreciationRate": {
      "properties": {
        "balanceGroup": {
          "maxLength": 20,
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "maxPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "maxPercentagePreviousYear": {
          "$ref": "#/definitions/TlxNumber"
        },
        "oppositePostingAccount": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "oppositePostingAccountPreviousYear": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Deviation": {
      "properties": {
        "action": {
          "enum": [
            "ACTION_IGNORE",
            "ACTION_GENERATE_RESTORDER",
            "ACTION_RETURN",
            "ACTION_RETURN_GENERATE_RESTORDER"
          ],
          "type": "string"
        },
        "cause": {
          "enum": [
            "CAUSE_DEFECT",
            "CAUSE_TOO_FEW",
            "CAUSE_TOO_MANY",
            "CAUSE_REPLACEMENT"
          ],
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "deviation": {
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "purchaseOrderLine": {
          "$ref": "#/definitions/PurchaseOrderline"
        },
        "quantityOrdered": {
          "readOnly": true,
          "type": "number"
        },
        "quantityReceived": {
          "readOnly": true,
          "type": "number"
        },
        "receivedBy": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "purchaseOrderLine"
      ],
      "type": "object"
    },
    "DifferencesOverview": {
      "properties": {
        "permanentDifferencesAdditions": {
          "items": {
            "$ref": "#/definitions/PermanentDifferences"
          },
          "type": "array"
        },
        "permanentDifferencesDeductions": {
          "items": {
            "$ref": "#/definitions/PermanentDifferences"
          },
          "type": "array"
        },
        "sumAdditions": {
          "readOnly": true,
          "type": "number"
        },
        "sumChanges": {
          "readOnly": true,
          "type": "number"
        },
        "sumDeductions": {
          "readOnly": true,
          "type": "number"
        },
        "temporaryDifferences": {
          "items": {
            "$ref": "#/definitions/TemporaryDifferences"
          },
          "type": "array"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "DiscountGroup": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "nameAndNumber": {
          "readOnly": true,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Disposition": {
      "properties": {
        "annualResult": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedFreeEquityClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedUncoveredLossClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "dividend": {
          "readOnly": true,
          "type": "number"
        },
        "freeEquity": {
          "readOnly": true,
          "type": "number"
        },
        "freeEquityClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "freeEquityDiff": {
          "readOnly": true,
          "type": "number"
        },
        "freeEquityOpeningBalance": {
          "readOnly": true,
          "type": "number"
        },
        "groupContributionGiven": {
          "readOnly": true,
          "type": "number"
        },
        "groupContributionReceived": {
          "readOnly": true,
          "type": "number"
        },
        "remainingUncoveredLoss": {
          "readOnly": true,
          "type": "number"
        },
        "sumAnnualResult": {
          "readOnly": true,
          "type": "number"
        },
        "uncoveredLossClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "uncoveredLossDiff": {
          "readOnly": true,
          "type": "number"
        },
        "uncoveredLossOpeningBalance": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "DistributionKey": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "distributionKeyBlade": {
          "$ref": "#/definitions/DistributionKeyBlade"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DistributionKeyBit": {
      "properties": {
        "departmentId": {
          "format": "int32",
          "type": "integer"
        },
        "departmentName": {
          "type": "string"
        },
        "percentage": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "DistributionKeyBlade": {
      "properties": {
        "distributionKeyBits": {
          "items": {
            "$ref": "#/definitions/DistributionKeyBit"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Dividend": {
      "properties": {
        "accountedDividend": {
          "items": {
            "$ref": "#/definitions/DividendDetails"
          },
          "type": "array"
        },
        "accountedGroupContribution": {
          "items": {
            "$ref": "#/definitions/DividendDetails"
          },
          "type": "array"
        },
        "annualResultAfterTax": {
          "items": {
            "$ref": "#/definitions/DividendDetails"
          },
          "type": "array"
        },
        "difference": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "equityInAccount": {
          "items": {
            "$ref": "#/definitions/DividendDetails"
          },
          "type": "array"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "DividendDetails": {
      "properties": {
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "value": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Division": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        },
        "municipalityDate": {
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "organizationNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "Document": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "fileName": {
          "description": "The name of the document.",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mimeType": {
          "description": "Type of the document",
          "example": "type/subtype of resource. E.g. application/pdf",
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "size": {
          "description": "The size of the document in bytes.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fileName"
      ],
      "type": "object"
    },
    "DocumentArchive": {
      "properties": {
        "archiveDate": {
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "fileName": {
          "description": "The name of the document.",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mimeType": {
          "description": "Type of the document",
          "maxLength": 100,
          "type": "string"
        },
        "size": {
          "description": "The size of the document in readable format.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fileName",
        "mimeType"
      ],
      "type": "object"
    },
    "DocumentationGenericData": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "documentName": {
          "type": "string"
        },
        "genericDataSubType": {
          "enum": [
            "NONE",
            "NOT_LICENSED",
            "FREIGHT_TRANSPORT",
            "TAXI",
            "PRODUCT_TYPE_INVENTORY",
            "CASH_REGISTER_SYSTEM",
            "PRIVATE_WITHDRAWAL_OF_GOODS",
            "ENTERTAINMENT"
          ],
          "type": "string"
        },
        "genericDataSubTypeGroupId": {
          "format": "int32",
          "type": "integer"
        },
        "genericDataType": {
          "enum": [
            "MISC",
            "TRANSPORT",
            "ACCOMMODATION_AND_RESTAURANT",
            "PROFIT_AND_LOSS",
            "CUSTOMER_RECEIVABLE",
            "INVENTORIES",
            "TANGIBLE_FIXED_ASSETS",
            "RECONCILIATION_OF_EQUITY",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "DOCUMENT_DOWNLOADED",
            "GROUP_CONTRIBUTIONS",
            "TAX_RETURN",
            "TAX_CALCULATIONS",
            "DOCUMENTATION"
          ],
          "type": "string"
        },
        "groupId": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "postType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "type": "string"
        },
        "postValue": {
          "type": "string"
        },
        "uploaderName": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "required": [
        "postType",
        "postValue"
      ],
      "type": "object"
    },
    "DownloadedBrreg": {
      "properties": {
        "date": {
          "readOnly": true,
          "type": "string"
        },
        "docId": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "DrivingStop": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "latitude": {
          "type": "number"
        },
        "locationName": {
          "maxLength": 250,
          "type": "string"
        },
        "longitude": {
          "type": "number"
        },
        "mileageAllowance": {
          "$ref": "#/definitions/MileageAllowance"
        },
        "sortIndex": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "type": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "locationName",
        "mileageAllowance"
      ],
      "type": "object"
    },
    "ElectronicSupportDTO": {
      "properties": {
        "bankId": {
          "description": "Bank ID",
          "format": "int32",
          "type": "integer"
        },
        "bankName": {
          "description": "Name of the bank",
          "type": "string"
        },
        "bankUrl": {
          "description": "Bank url for ordering electronic agreements for ElectronicSupportDTO of type PARTIAL.",
          "type": "string"
        },
        "type": {
          "description": "Type of electronic agreement creation is supported by this bank.COMPLETE: Supports creating the agreement towards AutoPay and Tripletex though the bank.PARTIAL: Supports creating the agreement towards AutoPay only.",
          "enum": [
            "PARTIAL",
            "COMPLETE",
            "PSD2"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Employee": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address",
          "description": "Address tied to the employee"
        },
        "allowInformationRegistration": {
          "description": "Determines if salary information can be registered on the user including hours, travel expenses and employee expenses. The user may also be selected as a project member on projects.",
          "readOnly": true,
          "type": "boolean"
        },
        "bankAccountNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "bic": {
          "description": "Bic (swift) field",
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comments": {
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "creditorBankCountryId": {
          "description": "Country of creditor bank field",
          "format": "int32",
          "type": "integer"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "dnumber": {
          "maxLength": 11,
          "type": "string"
        },
        "email": {
          "format": "email",
          "maxLength": 100,
          "type": "string"
        },
        "employeeCategory": {
          "$ref": "#/definitions/EmployeeCategory"
        },
        "employeeNumber": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "employments": {
          "description": "Employments tied to the employee",
          "items": {
            "$ref": "#/definitions/Employment"
          },
          "type": "array"
        },
        "firstName": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "holidayAllowanceEarned": {
          "$ref": "#/definitions/HolidayAllowanceEarned"
        },
        "iban": {
          "description": "IBAN field",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "internationalId": {
          "$ref": "#/definitions/InternationalId"
        },
        "isAuthProjectOverviewURL": {
          "readOnly": true,
          "type": "boolean"
        },
        "isContact": {
          "readOnly": true,
          "type": "boolean"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 1,
          "type": "string"
        },
        "nationalIdentityNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberHome": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobileCountry": {
          "$ref": "#/definitions/Country",
          "description": "The country of the mobile phone number. If not set, the country is derived as best as possible from phoneNumberMobile. NB! 8 digit numbers are assumed to be Norwegian."
        },
        "phoneNumberWork": {
          "maxLength": 100,
          "type": "string"
        },
        "pictureId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "userType": {
          "description": "Define the employee's user type.<br>STANDARD: Reduced access. Users with limited system entitlements.<br>EXTENDED: Users can be given all system entitlements.<br>NO_ACCESS: User with no log on access.<br>Users with access to Tripletex must confirm the email address.",
          "enum": [
            "STANDARD",
            "EXTENDED",
            "NO_ACCESS"
          ],
          "type": "string"
        },
        "usesAbroadPayment": {
          "description": "UsesAbroadPayment field. Determines if we should use domestic or abroad remittance. To be able to use abroad remittance, one has to: 1: have Autopay 2: have valid combination of the fields Iban, Bic (swift) and Country of creditor bank. ",
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "firstName",
        "lastName"
      ],
      "type": "object"
    },
    "EmployeeCategory": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "EmployeeCompanyDTO": {
      "properties": {
        "company": {
          "$ref": "#/definitions/Company"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "isDefault": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EmployeeEmail": {
      "properties": {
        "email": {
          "description": "Employee e-mail address",
          "format": "email",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "email"
      ],
      "type": "object"
    },
    "EmployeeLoginInfo": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employeeId": {
          "description": "Employee id",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastLoginDate": {
          "description": "Last successful employee login datetime",
          "readOnly": true,
          "type": "string"
        },
        "salesForceEmployee": {
          "$ref": "#/definitions/SalesForceEmployee",
          "description": "Sales force employee",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "username": {
          "description": "Employee username",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EmployeePreferences": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "filterOnProjectManager": {
          "type": "boolean"
        },
        "filterOnProjectParticipant": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "language": {
          "enum": [
            "NO",
            "EN",
            "SV"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "EmployeeRoleModelDTO": {
      "properties": {
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "hasAccess": {
          "type": "boolean"
        },
        "role": {
          "enum": [
            "ROLE_ADMINISTRATOR",
            "AUTH_READ_ONLY",
            "AUTH_LOGIN",
            "AUTH_ALL_VOUCHERS",
            "AUTH_COMPANY_ACCOUNTING_REPORTS",
            "AUTH_ACCOUNTING_SETTINGS",
            "AUTH_COMPANY_RESULT_BUDGET",
            "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_ATTESTOR",
            "AUTH_DIRECT_REMIT_ADMIN",
            "AUTH_DIRECT_REMIT_LIGHT",
            "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
            "AUTH_DIRECT_REMIT_CREATE_NEW",
            "AUTH_DIRECT_REMIT_ADMIN_ZTL",
            "AUTH_COMPANY_ADMIN",
            "AUTH_EMPLOYEE_INFO",
            "AUTH_COMPANY_EMPLOYEE_ADMIN",
            "AUTH_CUSTOMER_ADMIN",
            "AUTH_CUSTOMER_INFO",
            "AUTH_CREATE_CUSTOMER",
            "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
            "AUTH_ARCHIVE_READ",
            "AUTH_ARCHIVE_WRITE",
            "AUTH_ARCHIVE_ADMIN",
            "AUTH_CREATE_NOTE",
            "AUTH_CREATE_NOTE_TEMPLATE",
            "AUTH_INVOICING",
            "AUTH_OFFER_ADMIN",
            "AUTH_ORDER_ADMIN",
            "AUTH_CREATE_OFFER",
            "AUTH_CREATE_ORDER",
            "AUTH_FACTORING_EXPORT",
            "AUTH_INVOICE_ADMIN_SETTINGS",
            "AUTH_PROJECT_MANAGER",
            "AUTH_PROJECT_MANAGER_COMPANY",
            "AUTH_DEPARTMENT_REPORT",
            "AUTH_CREATE_PROJECT",
            "AUTH_PROJECT_EXTRA_COSTS",
            "AUTH_PROJECT_INFO",
            "AUTH_PROJECT_ADMIN_SETTINGS",
            "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
            "AUTH_PROJECT_CONTROL_FORMS",
            "AUTH_PRODUCT_ADMIN",
            "REPORT_ADMINISTRATOR",
            "REPORT_AUTHOR",
            "AUTH_COMPANY_WAGE_ADMIN",
            "AUTH_WAGE_ADMIN_SETTINGS",
            "AUTH_WAGE_INFORMATION",
            "AUTH_TASK_ADMIN",
            "AUTH_HOURS_COMPANY",
            "AUTH_HOUR_STATISTICS_COMPANY",
            "AUTH_HOURLIST",
            "AUTH_HOURLIST_SETTINGS",
            "AUTH_HOLYDAY_PLAN",
            "AUTH_TRAVEL_REPORTS_COMPANY",
            "AUTH_TRAVEL_REPORT",
            "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
            "AUTH_VOUCHER_EXPORT",
            "AUTH_INBOX_VOUCHER",
            "AUTH_INCOMPLETE_VOUCHERS",
            "AUTH_INCOMING_INVOICE",
            "AUTH_VOUCHER_SETTINGS",
            "AUTH_BANK_RECONCILIATION",
            "AUTH_VAT_REPORT",
            "AUTH_SICKNESS_REIMBURSEMENT",
            "AUTH_REGISTER_INCOME",
            "AUTH_ADVANCED_VOUCHER",
            "AUTH_VOUCHER_IMPORT",
            "AUTH_PRODUCT_INVOICE",
            "AUTH_CUSTOMS_DECLARATION",
            "AUTH_VOUCHER_AUTOMATION",
            "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
            "YEAR_END_REPORT_ADMINISTRATOR"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "EmployeeToken": {
      "properties": {
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "expirationDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "token": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "EmployeeTokenBundle": {
      "properties": {
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employeeToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "robotEmployee": {
          "$ref": "#/definitions/Employee"
        }
      },
      "type": "object"
    },
    "Employment": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "division": {
          "$ref": "#/definitions/Division"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employmentDetails": {
          "description": "Employment types tied to the employment",
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          },
          "type": "array"
        },
        "employmentEndReason": {
          "description": "Define the employment end reason.",
          "enum": [
            "EMPLOYMENT_END_EXPIRED",
            "EMPLOYMENT_END_EMPLOYEE",
            "EMPLOYMENT_END_EMPLOYER",
            "EMPLOYMENT_END_WRONGLY_REPORTED",
            "EMPLOYMENT_END_SYSTEM_OR_ACCOUNTANT_CHANGE",
            "EMPLOYMENT_END_INTERNAL_CHANGE"
          ],
          "type": "string"
        },
        "employmentId": {
          "description": "Existing employment ID used by the current accounting system",
          "maxLength": 255,
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isMainEmployer": {
          "description": "Determines if company is main employer for the employee. Default value is true.<br />Some values will be default set if not sent upon creation of employment: <br/> If isMainEmployer is NOT sent and tax deduction code loennFraHovedarbeidsgiver is sent, isMainEmployer will be set to true. <br /> If isMainEmployer is NOT sent and tax deduction code loennFraBiarbeidsgiver is sent, isMainEmployer will be set to false. <br /> If true and deduction code is NOT sent, value of tax deduction code will be set to loennFraHovedarbeidsgiver. <br /> If false and deduction code is NOT sent, value of tax deduction code will be set to loennFraBiarbeidsgiver. <br /> For other types of Tax Deduction Codes, isMainEmployer does not influence anything.",
          "type": "boolean"
        },
        "lastSalaryChangeDate": {
          "type": "string"
        },
        "noEmploymentRelationship": {
          "description": "Activate pensions and other benefits with no employment relationship.",
          "type": "boolean"
        },
        "startDate": {
          "type": "string"
        },
        "taxDeductionCode": {
          "description": "EMPTY - represents that a tax deduction code is not set on the employment. It is illegal to set the field to this value.  <br /> Default value of this field is loennFraHovedarbeidsgiver or loennFraBiarbeidsgiver depending on boolean isMainEmployer",
          "enum": [
            "loennFraHovedarbeidsgiver",
            "loennFraBiarbeidsgiver",
            "pensjon",
            "loennTilUtenrikstjenestemann",
            "loennKunTrygdeavgiftTilUtenlandskBorger",
            "loennKunTrygdeavgiftTilUtenlandskBorgerSomGrensegjenger",
            "introduksjonsstoenad",
            "ufoereytelserFraAndre",
            "EMPTY"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "startDate"
      ],
      "type": "object"
    },
    "EmploymentDetails": {
      "properties": {
        "annualSalary": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "employmentForm": {
          "description": "Define the employment form.",
          "enum": [
            "PERMANENT",
            "TEMPORARY"
          ],
          "type": "string"
        },
        "employmentType": {
          "description": "Define the employment type.",
          "enum": [
            "ORDINARY",
            "MARITIME",
            "FREELANCE"
          ],
          "type": "string"
        },
        "hourlyWage": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "maritimeEmployment": {
          "$ref": "#/definitions/MaritimeEmployment"
        },
        "occupationCode": {
          "$ref": "#/definitions/OccupationCode",
          "description": "To find the right value to enter in this field, you could go to GET /employee/employment/occupationCode to get a list of valid ID's."
        },
        "payrollTaxMunicipalityId": {
          "$ref": "#/definitions/Municipality"
        },
        "percentageOfFullTimeEquivalent": {
          "type": "number"
        },
        "remunerationType": {
          "description": "Define the remuneration type.",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ],
          "type": "string"
        },
        "shiftDurationHours": {
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "workingHoursScheme": {
          "description": "Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS",
            "OTHER_SHIFT"
          ],
          "type": "string"
        }
      },
      "required": [
        "percentageOfFullTimeEquivalent"
      ],
      "type": "object"
    },
    "EmploymentType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 100,
          "type": "string"
        },
        "employmentType": {
          "description": "Defines the employment type option. ",
          "enum": [
            "ORDINARY",
            "MARITIME",
            "FREELANCE"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "nameNO": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "employmentType"
      ],
      "type": "object"
    },
    "EnhetsregisteretDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "enterprises": {
          "items": {
            "$ref": "#/definitions/EnterpriseDTO"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "municipality": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orgNumber": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "registrationDate": {
          "format": "date",
          "type": "string"
        },
        "vatRegistered": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EnterpriseDTO": {
      "properties": {
        "municipality": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orgNumber": {
          "type": "string"
        },
        "registrationDate": {
          "format": "date",
          "type": "string"
        },
        "startDateMunicipality": {
          "format": "date",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Entitlement": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "customer": {
          "$ref": "#/definitions/Company",
          "description": "The company this role applies for"
        },
        "employee": {
          "$ref": "#/definitions/Employee",
          "description": "Employee which has this privilege"
        },
        "entitlementId": {
          "description": "Unique id for the type of privilege.",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Descriptive name for the privilege. Might change between releases.",
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "customer",
        "employee",
        "entitlementId"
      ],
      "type": "object"
    },
    "EnumType": {
      "properties": {
        "enumType": {
          "enum": [
            "VEHICLE_TYPE",
            "VEHICLE_CATEGORY",
            "TAXIMETER",
            "BUSINESS_ACTIVITY_TYPE",
            "TAX_TRANSACTION_TYPE",
            "TYPE_OF_GOODS",
            "CASH_REGISTER_SYSTEM",
            "COUNTRY_CODE",
            "STEP_TYPE"
          ],
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "stepNumber": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "technicalName": {
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        },
        "value": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "EventInfoDTO": {
      "properties": {
        "description": {
          "type": "string"
        },
        "examples": {
          "items": {
            "$ref": "#/definitions/WebHookWrapper"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventInfoDescription": {
      "properties": {
        "description": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExternalProduct": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "costExcludingVatCurrency": {
          "description": "Price purchase (cost) excluding VAT in the product's currency",
          "readOnly": true,
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "discountPrice": {
          "readOnly": true,
          "type": "number"
        },
        "elNumber": {
          "maxLength": 14,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isInactive": {
          "type": "boolean"
        },
        "isStockItem": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "nrfNumber": {
          "maxLength": 14,
          "type": "string"
        },
        "priceExcludingVatCurrency": {
          "description": "Price of purchase excluding VAT in the product's currency",
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "description": "Price of purchase including VAT in the product's currency",
          "type": "number"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ExtraordinaryIncomeAndCost": {
      "properties": {
        "amount": {
          "readOnly": true,
          "type": "number"
        },
        "description": {
          "readOnly": true,
          "type": "number"
        },
        "note": {
          "$ref": "#/definitions/YearEndReportNote",
          "readOnly": true
        },
        "noteGroupType": {
          "enum": [
            "EXTRAORDINARY_INCOME_GROUP",
            "EXTRAORDINARY_COST_GROUP",
            "GROUP_GROUP",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_GROUP"
          ],
          "readOnly": true,
          "type": "string"
        },
        "notePostType": {
          "enum": [
            "ID_FOR_NOTE",
            "IS_CHECKED",
            "UPDATED_BY",
            "UPDATED_DATE",
            "ACCOUNTS",
            "ACCOUNTING_PRINCIPLES_FREE_TEXT",
            "ACCOUNTING_PRINCIPLES_USE_DEFAULT_TEXT",
            "STILL_IN_BUSINESS",
            "STILL_IN_BUSINESS_INFO",
            "NUMBER_OF_MAN_YEARS",
            "OPENING_BALANCE_SALARY",
            "CLOSING_BALANCE_SALARY",
            "OPENING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "CLOSING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "OPENING_BALANCE_PENSION_COST",
            "CLOSING_BALANCE_PENSION_COST",
            "OPENING_BALANCE_OTHER_BENEFITS",
            "CLOSING_BALANCE_OTHER_BENEFITS",
            "ABOUT_MAN_YEARS_AND_SALARY",
            "EXTRAORDINARY_INCOME_AND_COST",
            "EXTRAORDINARY_INCOME_AND_COST_DESCRIPTION",
            "EXTRAORDINARY_INCOME_AND_COST_AMOUNT",
            "EXTRAORDINARY_INCOME_AND_COST_ADDITIONAL_INFORMATION",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_ACQUISITION_COST",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_CAPITALISED_VALUE",
            "FIXED_ASSETS_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ECONOMIC_LIFE",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ACQUISITION_COST",
            "FIXED_ASSETS_GOODWILL",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE",
            "FIXED_ASSETS_ADDITIONAL_INFORMATION",
            "GROUP",
            "GROUP_INVESTMENTS",
            "GROUP_OPENING_BALANCE",
            "GROUP_REVENUE_RECOGNIZED_AS_INCOME",
            "GROUP_OTHER_CHANGES",
            "GROUP_CLOSING_BALANCE",
            "GROUP_ADDED_VALUE",
            "GROUP_DEPRECIATION_OF_ADDED_VALUES",
            "GROUP_GOODWILL",
            "GROUP_DEPRECIATION_OF_GOODWILL",
            "GROUP_TOTAL_ACQUISITION_COST",
            "GROUP_TOTAL_CAPITALIZED_EQUITY",
            "GROUP_IS_SUBSIDIARY",
            "GROUP_NAME_OF_PARENT_COMPANY",
            "GROUP_BUSINESS_OFFICE_PARENT_COMPANY",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION_JUSTIFICATION",
            "GROUP_TRANSACTIONS_WITH_SUBSIDIARIES",
            "GROUP_INTERNAL_GAIN_TRANSACTIONS",
            "GROUP_RECEIVABLES_AND_LIABILITIES",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_MORTGAGED_ASSETS",
            "OPENING_BALANCE_OTHER_COLLATERAL",
            "OPENING_BALANCE_GUANRANTEES",
            "GROUP_RECEIVABLES_AND_LIABILITIES_ADDITIONAL_INFO",
            "RECEIVABLES_FALL_DUE_LATER_THAN_ONE_YEAR",
            "RECEIVABLES_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ASSET",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_REAL_VALUE",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_VALUE_ADJUSTMENT",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_DESCRIPTION",
            "HOLDING_OWN_SHARES",
            "HOLDING_OWN_SHARES_NUMBER_OF_SHARES",
            "HOLDING_OWN_SHARES_NOMINAL_VALUE_OF_SHARES",
            "HOLDING_OWN_SHARES_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_ACQUISITIONS_REMUNERATION",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_REMUNERATION",
            "OWN_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "OWN_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_DISPOSAL_REMUNERATION",
            "PARENT_COMPANY_SHARES_DISPOSAL_REMUNERATION",
            "OWN_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "HOLDING_OWN_SHARES_THIS_YEARS_PAYOUT",
            "HOLDING_OWN_SHARES_PROVISION_FOR_THE_YEAR",
            "HOLDING_OWN_SHARES_PROVISIONS",
            "HOLDING_OWN_SHARES_ADDITIONAL_INFORMATION",
            "DEBT_DUE_FOR_PAYMENT",
            "DEBT_SECURED_BY_MORTGAGE",
            "DEBT_CAPITALISED_VALUE",
            "DEBT_TOTAL_NON_RECOGNIZED_WARRANTY_OBLIGATIONS",
            "DEBT_WARRANTY_OBLIGATIONS",
            "DEBT_ADDITIONAL_INFORMATION",
            "LOAN_AND_PROVISION_OF_SECURITY_IS_GRANTED",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_ADDITIONAL_INFORMATION",
            "FREE_NOTE_FREE_TEXT"
          ],
          "readOnly": true,
          "type": "string"
        },
        "noteSubTypeGroupId": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "Favorite": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pageUrl": {
          "type": "string"
        },
        "rank": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "FavoriteMenu": {
      "properties": {
        "favoriteList": {
          "items": {
            "$ref": "#/definitions/Favorite"
          },
          "type": "array"
        },
        "shouldShow": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FileIdForIncomingPaymentsDTO": {
      "properties": {
        "accountNumber": {
          "description": "Account number.",
          "readOnly": true,
          "type": "string"
        },
        "date": {
          "description": "Date on incoming payments file.",
          "format": "date",
          "readOnly": true,
          "type": "string"
        },
        "fileId": {
          "description": "FileId corresponding to an Incoming Payment PDF.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "postingIds": {
          "description": "List of postingIds correlated to this fileId",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "FinacialInstrumentAsset": {
      "properties": {
        "asset": {
          "readOnly": true,
          "type": "number"
        },
        "note": {
          "$ref": "#/definitions/YearEndReportNote",
          "readOnly": true
        },
        "noteGroupType": {
          "enum": [
            "EXTRAORDINARY_INCOME_GROUP",
            "EXTRAORDINARY_COST_GROUP",
            "GROUP_GROUP",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_GROUP"
          ],
          "readOnly": true,
          "type": "string"
        },
        "notePostType": {
          "enum": [
            "ID_FOR_NOTE",
            "IS_CHECKED",
            "UPDATED_BY",
            "UPDATED_DATE",
            "ACCOUNTS",
            "ACCOUNTING_PRINCIPLES_FREE_TEXT",
            "ACCOUNTING_PRINCIPLES_USE_DEFAULT_TEXT",
            "STILL_IN_BUSINESS",
            "STILL_IN_BUSINESS_INFO",
            "NUMBER_OF_MAN_YEARS",
            "OPENING_BALANCE_SALARY",
            "CLOSING_BALANCE_SALARY",
            "OPENING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "CLOSING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "OPENING_BALANCE_PENSION_COST",
            "CLOSING_BALANCE_PENSION_COST",
            "OPENING_BALANCE_OTHER_BENEFITS",
            "CLOSING_BALANCE_OTHER_BENEFITS",
            "ABOUT_MAN_YEARS_AND_SALARY",
            "EXTRAORDINARY_INCOME_AND_COST",
            "EXTRAORDINARY_INCOME_AND_COST_DESCRIPTION",
            "EXTRAORDINARY_INCOME_AND_COST_AMOUNT",
            "EXTRAORDINARY_INCOME_AND_COST_ADDITIONAL_INFORMATION",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_ACQUISITION_COST",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_CAPITALISED_VALUE",
            "FIXED_ASSETS_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ECONOMIC_LIFE",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ACQUISITION_COST",
            "FIXED_ASSETS_GOODWILL",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE",
            "FIXED_ASSETS_ADDITIONAL_INFORMATION",
            "GROUP",
            "GROUP_INVESTMENTS",
            "GROUP_OPENING_BALANCE",
            "GROUP_REVENUE_RECOGNIZED_AS_INCOME",
            "GROUP_OTHER_CHANGES",
            "GROUP_CLOSING_BALANCE",
            "GROUP_ADDED_VALUE",
            "GROUP_DEPRECIATION_OF_ADDED_VALUES",
            "GROUP_GOODWILL",
            "GROUP_DEPRECIATION_OF_GOODWILL",
            "GROUP_TOTAL_ACQUISITION_COST",
            "GROUP_TOTAL_CAPITALIZED_EQUITY",
            "GROUP_IS_SUBSIDIARY",
            "GROUP_NAME_OF_PARENT_COMPANY",
            "GROUP_BUSINESS_OFFICE_PARENT_COMPANY",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION_JUSTIFICATION",
            "GROUP_TRANSACTIONS_WITH_SUBSIDIARIES",
            "GROUP_INTERNAL_GAIN_TRANSACTIONS",
            "GROUP_RECEIVABLES_AND_LIABILITIES",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_MORTGAGED_ASSETS",
            "OPENING_BALANCE_OTHER_COLLATERAL",
            "OPENING_BALANCE_GUANRANTEES",
            "GROUP_RECEIVABLES_AND_LIABILITIES_ADDITIONAL_INFO",
            "RECEIVABLES_FALL_DUE_LATER_THAN_ONE_YEAR",
            "RECEIVABLES_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ASSET",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_REAL_VALUE",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_VALUE_ADJUSTMENT",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_DESCRIPTION",
            "HOLDING_OWN_SHARES",
            "HOLDING_OWN_SHARES_NUMBER_OF_SHARES",
            "HOLDING_OWN_SHARES_NOMINAL_VALUE_OF_SHARES",
            "HOLDING_OWN_SHARES_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_ACQUISITIONS_REMUNERATION",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_REMUNERATION",
            "OWN_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "OWN_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_DISPOSAL_REMUNERATION",
            "PARENT_COMPANY_SHARES_DISPOSAL_REMUNERATION",
            "OWN_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "HOLDING_OWN_SHARES_THIS_YEARS_PAYOUT",
            "HOLDING_OWN_SHARES_PROVISION_FOR_THE_YEAR",
            "HOLDING_OWN_SHARES_PROVISIONS",
            "HOLDING_OWN_SHARES_ADDITIONAL_INFORMATION",
            "DEBT_DUE_FOR_PAYMENT",
            "DEBT_SECURED_BY_MORTGAGE",
            "DEBT_CAPITALISED_VALUE",
            "DEBT_TOTAL_NON_RECOGNIZED_WARRANTY_OBLIGATIONS",
            "DEBT_WARRANTY_OBLIGATIONS",
            "DEBT_ADDITIONAL_INFORMATION",
            "LOAN_AND_PROVISION_OF_SECURITY_IS_GRANTED",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_ADDITIONAL_INFORMATION",
            "FREE_NOTE_FREE_TEXT"
          ],
          "readOnly": true,
          "type": "string"
        },
        "noteSubTypeGroupId": {
          "readOnly": true,
          "type": "number"
        },
        "realValue": {
          "readOnly": true,
          "type": "number"
        },
        "valueAdjustment": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "FlexSummary": {
      "properties": {
        "change": {
          "readOnly": true,
          "type": "number"
        },
        "incomingHourBalance": {
          "readOnly": true,
          "type": "number"
        },
        "outgoingHourBalance": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "FormDataBodyPart": {
      "properties": {
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "formDataContentDisposition": {
          "$ref": "#/definitions/FormDataContentDisposition"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "name": {
          "type": "string"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        },
        "simple": {
          "type": "boolean"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormDataContentDisposition": {
      "properties": {
        "creationDate": {
          "format": "date-time",
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "modificationDate": {
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "readDate": {
          "format": "date-time",
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FormDataMultiPart": {
      "properties": {
        "bodyParts": {
          "items": {
            "$ref": "#/definitions/BodyPart"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "fields": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/FormDataBodyPart"
            },
            "type": "array"
          },
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        }
      },
      "type": "object"
    },
    "FundingPartnerApplication": {
      "properties": {
        "amount": {
          "description": "The amount property",
          "format": "int32",
          "maximum": 30000000,
          "minimum": 1000000,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comments": {
          "description": "The comment property",
          "maxLength": 500,
          "minLength": 0,
          "type": "string"
        },
        "email": {
          "description": "The email property",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "firstName": {
          "description": "The firstname property",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastName": {
          "description": "The lastName property",
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "loanType": {
          "description": "The loanType property",
          "enum": [
            "OTHER",
            "REAL_ESTATE"
          ],
          "type": "string"
        },
        "phoneNumber": {
          "description": "The phoneNumber property",
          "maxLength": 25,
          "minLength": 8,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "amount",
        "firstName",
        "lastName",
        "loanType",
        "phoneNumber"
      ],
      "type": "object"
    },
    "FundingPartnerQualify": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "loanType": {
          "description": "Which loan type to check",
          "enum": [
            "OTHER",
            "REAL_ESTATE"
          ],
          "type": "string"
        },
        "otherPositiveResult": {
          "type": "boolean"
        },
        "otherResultBelowLimit": {
          "type": "boolean"
        },
        "otherRevenue": {
          "type": "boolean"
        },
        "qualify": {
          "description": "Overall if the company qualifies the automatic check",
          "type": "boolean"
        },
        "realEstateBalance": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GenericData": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "genericDataSubType": {
          "enum": [
            "NONE",
            "NOT_LICENSED",
            "FREIGHT_TRANSPORT",
            "TAXI",
            "PRODUCT_TYPE_INVENTORY",
            "CASH_REGISTER_SYSTEM",
            "PRIVATE_WITHDRAWAL_OF_GOODS",
            "ENTERTAINMENT"
          ],
          "type": "string"
        },
        "genericDataSubTypeGroupId": {
          "format": "int32",
          "type": "integer"
        },
        "genericDataType": {
          "enum": [
            "MISC",
            "TRANSPORT",
            "ACCOMMODATION_AND_RESTAURANT",
            "PROFIT_AND_LOSS",
            "CUSTOMER_RECEIVABLE",
            "INVENTORIES",
            "TANGIBLE_FIXED_ASSETS",
            "RECONCILIATION_OF_EQUITY",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "DOCUMENT_DOWNLOADED",
            "GROUP_CONTRIBUTIONS",
            "TAX_RETURN",
            "TAX_CALCULATIONS",
            "DOCUMENTATION"
          ],
          "type": "string"
        },
        "groupId": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "postType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "type": "string"
        },
        "postValue": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "required": [
        "postType",
        "postValue"
      ],
      "type": "object"
    },
    "GenericDataOverview": {
      "properties": {
        "annualDeduction": {
          "readOnly": true,
          "type": "number"
        },
        "annualIncomeRecognition": {
          "readOnly": true,
          "type": "number"
        },
        "annualIncomeRecognitionOrDeductionBasis": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedDeduction": {
          "readOnly": true,
          "type": "number"
        },
        "cashRegisterSystemPosts": {
          "items": {
            "$ref": "#/definitions/CashRegisterSystem"
          },
          "type": "array"
        },
        "closingBalanceProfitAndLoss": {
          "readOnly": true,
          "type": "number"
        },
        "expenses": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataType": {
          "enum": [
            "MISC",
            "TRANSPORT",
            "ACCOMMODATION_AND_RESTAURANT",
            "PROFIT_AND_LOSS",
            "CUSTOMER_RECEIVABLE",
            "INVENTORIES",
            "TANGIBLE_FIXED_ASSETS",
            "RECONCILIATION_OF_EQUITY",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "DOCUMENT_DOWNLOADED",
            "GROUP_CONTRIBUTIONS",
            "TAX_RETURN",
            "TAX_CALCULATIONS",
            "DOCUMENTATION"
          ],
          "readOnly": true,
          "type": "string"
        },
        "genericDataTypeGroupId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "groupId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "objectIdentifier": {
          "readOnly": true,
          "type": "string"
        },
        "openingBalanceProfitAndLoss": {
          "readOnly": true,
          "type": "number"
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/GenericData"
          },
          "type": "array"
        },
        "reversedExpenses": {
          "readOnly": true,
          "type": "number"
        },
        "showProfitAndLossDetails": {
          "readOnly": true,
          "type": "boolean"
        },
        "sumProfitAndLoss": {
          "readOnly": true,
          "type": "number"
        },
        "typeOfGoodsPosts": {
          "items": {
            "$ref": "#/definitions/TypeOfGoods"
          },
          "type": "array"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "GenericDataRate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "readOnly": true,
          "type": "number"
        },
        "ratePreviousYear": {
          "$ref": "#/definitions/TlxNumber"
        },
        "rateType": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "GoodsReceipt": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "goodsReceiptLines": {
          "description": "Purchase Order lines tied to the goods receipt",
          "items": {
            "$ref": "#/definitions/GoodsReceiptLine"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "receivedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "registrationDate": {
          "type": "string"
        },
        "status": {
          "enum": [
            "STATUS_OPEN",
            "STATUS_CONFIRMED"
          ],
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "goodsReceiptLines",
        "registrationDate"
      ],
      "type": "object"
    },
    "GoodsReceiptLine": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "deviation": {
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "If not entered, the default warehouse will be used"
        },
        "inventoryLocation": {
          "$ref": "#/definitions/InventoryLocation",
          "description": "Inventory location field -- pilot program"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "quantityOrdered": {
          "readOnly": true,
          "type": "number"
        },
        "quantityReceived": {
          "type": "number"
        },
        "quantityRest": {
          "readOnly": true,
          "type": "number"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "product",
        "quantityReceived"
      ],
      "type": "object"
    },
    "GroupContributions": {
      "properties": {
        "accountedValue": {
          "readOnly": true,
          "type": "number"
        },
        "amountToBePostedOnAccount": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataOverviews": {
          "items": {
            "$ref": "#/definitions/GenericDataOverview"
          },
          "type": "array"
        },
        "groupedAccountedValue": {
          "readOnly": true,
          "type": "number"
        },
        "sumExpenses": {
          "readOnly": true,
          "type": "number"
        },
        "sumReceived": {
          "readOnly": true,
          "type": "number"
        },
        "sumSubmitted": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "GroupInvestment": {
      "properties": {
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "investment": {
          "readOnly": true,
          "type": "number"
        },
        "note": {
          "$ref": "#/definitions/YearEndReportNote",
          "readOnly": true
        },
        "noteGroupType": {
          "enum": [
            "EXTRAORDINARY_INCOME_GROUP",
            "EXTRAORDINARY_COST_GROUP",
            "GROUP_GROUP",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_GROUP"
          ],
          "readOnly": true,
          "type": "string"
        },
        "notePostType": {
          "enum": [
            "ID_FOR_NOTE",
            "IS_CHECKED",
            "UPDATED_BY",
            "UPDATED_DATE",
            "ACCOUNTS",
            "ACCOUNTING_PRINCIPLES_FREE_TEXT",
            "ACCOUNTING_PRINCIPLES_USE_DEFAULT_TEXT",
            "STILL_IN_BUSINESS",
            "STILL_IN_BUSINESS_INFO",
            "NUMBER_OF_MAN_YEARS",
            "OPENING_BALANCE_SALARY",
            "CLOSING_BALANCE_SALARY",
            "OPENING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "CLOSING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "OPENING_BALANCE_PENSION_COST",
            "CLOSING_BALANCE_PENSION_COST",
            "OPENING_BALANCE_OTHER_BENEFITS",
            "CLOSING_BALANCE_OTHER_BENEFITS",
            "ABOUT_MAN_YEARS_AND_SALARY",
            "EXTRAORDINARY_INCOME_AND_COST",
            "EXTRAORDINARY_INCOME_AND_COST_DESCRIPTION",
            "EXTRAORDINARY_INCOME_AND_COST_AMOUNT",
            "EXTRAORDINARY_INCOME_AND_COST_ADDITIONAL_INFORMATION",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_ACQUISITION_COST",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_CAPITALISED_VALUE",
            "FIXED_ASSETS_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ECONOMIC_LIFE",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ACQUISITION_COST",
            "FIXED_ASSETS_GOODWILL",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE",
            "FIXED_ASSETS_ADDITIONAL_INFORMATION",
            "GROUP",
            "GROUP_INVESTMENTS",
            "GROUP_OPENING_BALANCE",
            "GROUP_REVENUE_RECOGNIZED_AS_INCOME",
            "GROUP_OTHER_CHANGES",
            "GROUP_CLOSING_BALANCE",
            "GROUP_ADDED_VALUE",
            "GROUP_DEPRECIATION_OF_ADDED_VALUES",
            "GROUP_GOODWILL",
            "GROUP_DEPRECIATION_OF_GOODWILL",
            "GROUP_TOTAL_ACQUISITION_COST",
            "GROUP_TOTAL_CAPITALIZED_EQUITY",
            "GROUP_IS_SUBSIDIARY",
            "GROUP_NAME_OF_PARENT_COMPANY",
            "GROUP_BUSINESS_OFFICE_PARENT_COMPANY",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION_JUSTIFICATION",
            "GROUP_TRANSACTIONS_WITH_SUBSIDIARIES",
            "GROUP_INTERNAL_GAIN_TRANSACTIONS",
            "GROUP_RECEIVABLES_AND_LIABILITIES",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_MORTGAGED_ASSETS",
            "OPENING_BALANCE_OTHER_COLLATERAL",
            "OPENING_BALANCE_GUANRANTEES",
            "GROUP_RECEIVABLES_AND_LIABILITIES_ADDITIONAL_INFO",
            "RECEIVABLES_FALL_DUE_LATER_THAN_ONE_YEAR",
            "RECEIVABLES_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ASSET",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_REAL_VALUE",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_VALUE_ADJUSTMENT",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_DESCRIPTION",
            "HOLDING_OWN_SHARES",
            "HOLDING_OWN_SHARES_NUMBER_OF_SHARES",
            "HOLDING_OWN_SHARES_NOMINAL_VALUE_OF_SHARES",
            "HOLDING_OWN_SHARES_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_ACQUISITIONS_REMUNERATION",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_REMUNERATION",
            "OWN_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "OWN_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_DISPOSAL_REMUNERATION",
            "PARENT_COMPANY_SHARES_DISPOSAL_REMUNERATION",
            "OWN_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "HOLDING_OWN_SHARES_THIS_YEARS_PAYOUT",
            "HOLDING_OWN_SHARES_PROVISION_FOR_THE_YEAR",
            "HOLDING_OWN_SHARES_PROVISIONS",
            "HOLDING_OWN_SHARES_ADDITIONAL_INFORMATION",
            "DEBT_DUE_FOR_PAYMENT",
            "DEBT_SECURED_BY_MORTGAGE",
            "DEBT_CAPITALISED_VALUE",
            "DEBT_TOTAL_NON_RECOGNIZED_WARRANTY_OBLIGATIONS",
            "DEBT_WARRANTY_OBLIGATIONS",
            "DEBT_ADDITIONAL_INFORMATION",
            "LOAN_AND_PROVISION_OF_SECURITY_IS_GRANTED",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_ADDITIONAL_INFORMATION",
            "FREE_NOTE_FREE_TEXT"
          ],
          "readOnly": true,
          "type": "string"
        },
        "noteSubTypeGroupId": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "otherChanges": {
          "readOnly": true,
          "type": "number"
        },
        "revenueRecognizedAsIncome": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "HeaderBlueprintV1": {
      "properties": {
        "autoGroup": {
          "$ref": "#/definitions/ReportGroupAutoGroup"
        },
        "cellFormat": {
          "type": "string"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/HeaderBlueprintV1"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "expression": {
          "type": "string"
        },
        "filter": {
          "$ref": "#/definitions/ReportGroupFilter"
        },
        "hideSelf": {
          "type": "boolean"
        },
        "initialExpansionState": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "removeEmpty": {
          "type": "boolean"
        },
        "valueFormat": {
          "type": "string"
        },
        "variableName": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "HelpCenterArticles": {
      "properties": {
        "faqs": {
          "items": {
            "$ref": "#/definitions/Article"
          },
          "type": "array"
        },
        "helpCenterUrl": {
          "type": "string"
        },
        "keyboardShortcutsArticleUrl": {
          "type": "string"
        },
        "mainArticle": {
          "$ref": "#/definitions/Article"
        },
        "relevantArticles": {
          "items": {
            "$ref": "#/definitions/Article"
          },
          "type": "array"
        },
        "salesforceSupportRequestsUrl": {
          "type": "string"
        },
        "videos": {
          "items": {
            "$ref": "#/definitions/Video"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "HistoricalPosting": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "description": "The ledger account of the posting."
        },
        "amount": {
          "description": "The posting amount in company currency. Important: The amounts in this amount field must have sum = 0 on all the dates. If multiple postings with different dates, then the sum must be 0 on each of the dates.",
          "type": "number"
        },
        "amountCurrency": {
          "description": "The posting amount in posting currency.",
          "type": "number"
        },
        "amountGross": {
          "description": "The posting gross amount in company currency.",
          "type": "number"
        },
        "amountGrossCurrency": {
          "description": "The posting gross amount in posting currency.",
          "type": "number"
        },
        "amountVat": {
          "description": "The amount of vat on this posting in company currency (NOK).",
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "closeGroup": {
          "description": "Optional. Used to create a close group for postings.",
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "Posting currency."
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "date": {
          "description": "The posting date.",
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "description": "The description of the posting.",
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceNumber": {
          "description": "Invoice number.",
          "maxLength": 100,
          "type": "string"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "termOfPayment": {
          "description": "Due date.",
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      },
      "required": [
        "account",
        "amount",
        "amountCurrency",
        "amountGross",
        "amountGrossCurrency",
        "amountVat",
        "currency",
        "date"
      ],
      "type": "object"
    },
    "HistoricalVoucher": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "description": "The voucher date.",
          "type": "string"
        },
        "description": {
          "description": "The voucher description.",
          "type": "string"
        },
        "externalVoucherNumber": {
          "description": "External voucher number. This is the voucher number in the historical system.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "description": "The voucher number generated by Tripletex. System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "postings": {
          "description": "The list of postings of the voucher. In postings, these fields must be provided: date, account, currency, amount, amountBasis, amountVat, amountCurrency, amountBasisCurrency.",
          "items": {
            "$ref": "#/definitions/HistoricalPosting"
          },
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucherType": {
          "$ref": "#/definitions/VoucherType",
          "description": "Voucher type. Optional. Must not be of type 'Utgående faktura' ('Outgoing Invoice') on new vouchers, instead use voucherType=null or use the Invoice endpoint."
        },
        "year": {
          "description": "Voucher year. System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "date",
        "description",
        "externalVoucherNumber",
        "postings"
      ],
      "type": "object"
    },
    "HolidayAllowanceEarned": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "amountExtraHolidayWeek": {
          "type": "number"
        },
        "basis": {
          "type": "number"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "HourSummary": {
      "properties": {
        "budgetChargeableHours": {
          "readOnly": true,
          "type": "number"
        },
        "chargeableHours": {
          "readOnly": true,
          "type": "number"
        },
        "hourlyWageHoursWithPay": {
          "readOnly": true,
          "type": "number"
        },
        "hoursWithPay": {
          "readOnly": true,
          "type": "number"
        },
        "nonChargeableHours": {
          "readOnly": true,
          "type": "number"
        },
        "nonChargeableHoursWithPay": {
          "readOnly": true,
          "type": "number"
        },
        "standardTime": {
          "readOnly": true,
          "type": "number"
        },
        "sumHours": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "HourlyCostAndRate": {
      "properties": {
        "budgetRate": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hourCostRate": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "HourlyRate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "fixedRate": {
          "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE.",
          "type": "number"
        },
        "hourlyRateModel": {
          "description": "Defines the model used for the hourly rate.",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "projectSpecificRates": {
          "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          },
          "type": "array"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "hourlyRateModel",
        "startDate"
      ],
      "type": "object"
    },
    "Hours": {
      "properties": {
        "endTime": {
          "type": "string"
        },
        "startTime": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdPortenLogin": {
      "properties": {
        "url": {
          "description": "The url which the client needs to redirect for performing authentication",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdPortenLoginRequest": {
      "properties": {
        "internalRedirectUrl": {
          "description": "The url where the user should be redirected back to when authentication is complete",
          "type": "string"
        }
      },
      "type": "object"
    },
    "IdPortenLoginStatus": {
      "properties": {
        "active": {
          "description": "Is the token still active?",
          "readOnly": true,
          "type": "boolean"
        },
        "expiresAt": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageField": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageValue": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "enum": [
            "TOP_LOGO"
          ],
          "type": "string"
        },
        "imageName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "IncomeAndCostSummaryDTO": {
      "properties": {
        "accumulatedSurplusValues": {
          "items": {
            "$ref": "#/definitions/TlxNumber"
          },
          "type": "array"
        },
        "costValues": {
          "items": {
            "$ref": "#/definitions/TlxNumber"
          },
          "type": "array"
        },
        "incomeValues": {
          "items": {
            "$ref": "#/definitions/TlxNumber"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "IncomeStatement": {
      "properties": {
        "businessIncome": {
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "readOnly": true,
          "type": "number"
        },
        "payedGroupContribution": {
          "readOnly": true,
          "type": "number"
        },
        "receivedGroupContribution": {
          "readOnly": true,
          "type": "number"
        },
        "taxableBusinessIncome": {
          "readOnly": true,
          "type": "number"
        },
        "totalAddition": {
          "readOnly": true,
          "type": "number"
        },
        "totalDeduction": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "IncomingInvoicePaymentHistory": {
      "properties": {
        "baseVoucherId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "remainingAmountToPay": {
          "readOnly": true,
          "type": "number"
        },
        "remainingAmountToPayCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "transactions": {
          "items": {
            "$ref": "#/definitions/IncomingInvoicePaymentHistoryTransaction"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "IncomingInvoicePaymentHistoryTransaction": {
      "properties": {
        "amountCurrencyNegative": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "amountNegative": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "baseVoucherId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "currencyCode": {
          "readOnly": true,
          "type": "string"
        },
        "currencyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "date": {
          "readOnly": true,
          "type": "string"
        },
        "deleteMessage": {
          "readOnly": true,
          "type": "string"
        },
        "isDeletable": {
          "readOnly": true,
          "type": "boolean"
        },
        "isReversed": {
          "readOnly": true,
          "type": "boolean"
        },
        "paymentType": {
          "enum": [
            "NOT_PAID",
            "NETS",
            "AUTOPAY",
            "POSTING_RULE",
            "ZTL"
          ],
          "readOnly": true,
          "type": "string"
        },
        "postingId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "text1": {
          "readOnly": true,
          "type": "string"
        },
        "text2": {
          "readOnly": true,
          "type": "string"
        },
        "text3": {
          "readOnly": true,
          "type": "string"
        },
        "voucherId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "voucherNumberAsString": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "InternationalId": {
      "properties": {
        "country": {
          "$ref": "#/definitions/Country"
        },
        "intAmeldingType": {
          "description": "Define the employee's International Identificator.<br>PASSPORT_NO<br>NATIONAL_INSURANCE_NO<br>TAX_IDENTIFICATION_NO<br>VALUE_ADDED_TAX_IDENTIFICATION_NO",
          "enum": [
            "PASSPORT_NO",
            "NATIONAL_INSURANCE_NO",
            "TAX_IDENTIFICATION_NO",
            "VALUE_ADDED_TAX_IDENTIFICATION_NO"
          ],
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Inventories": {
      "properties": {
        "product": {
          "$ref": "#/definitions/Product",
          "readOnly": true
        },
        "stock": {
          "items": {
            "$ref": "#/definitions/Stock"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "InventoriesDetails": {
      "properties": {
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalancePostType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "readOnly": true,
          "type": "string"
        },
        "closingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalancePostType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "readOnly": true,
          "type": "string"
        },
        "openingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "InventoriesOverview": {
      "properties": {
        "changes": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceDifferences": {
          "readOnly": true,
          "type": "number"
        },
        "inventories": {
          "items": {
            "$ref": "#/definitions/InventoriesDetails"
          },
          "type": "array"
        },
        "openingBalanceDifferences": {
          "readOnly": true,
          "type": "number"
        },
        "totalClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "totalClosingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "totalOpeningBalance": {
          "readOnly": true,
          "type": "number"
        },
        "totalOpeningBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Inventory": {
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "hasLocations": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inactive": {
          "type": "boolean"
        },
        "isInactive": {
          "type": "boolean"
        },
        "isMainInventory": {
          "type": "boolean"
        },
        "lastStocking": {
          "type": "string"
        },
        "mainInventory": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phone": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "InventoryLocation": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "isDeletable": {
          "readOnly": true,
          "type": "boolean"
        },
        "isInactive": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "inventory",
        "name"
      ],
      "type": "object"
    },
    "Invoice": {
      "properties": {
        "amount": {
          "description": "In the company’s currency, typically NOK.",
          "readOnly": true,
          "type": "number"
        },
        "amountCurrency": {
          "description": "In the specified currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountCurrencyOutstanding": {
          "description": "The amountCurrency outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountCurrencyOutstandingTotal": {
          "description": "The amountCurrency outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountExcludingVat": {
          "description": "Amount excluding VAT (NOK).",
          "readOnly": true,
          "type": "number"
        },
        "amountExcludingVatCurrency": {
          "description": "Amount excluding VAT in the specified currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountOutstanding": {
          "description": "The amount outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountOutstandingTotal": {
          "description": "The amount outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountRoundoff": {
          "description": "Amount of round off to nearest integer.",
          "readOnly": true,
          "type": "number"
        },
        "amountRoundoffCurrency": {
          "description": "Amount of round off to nearest integer in the specified currency.",
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "description": "Comment text for the specific invoice.",
          "type": "string"
        },
        "creditedInvoice": {
          "description": "The id of the original invoice if this is a credit note.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The invoice customer",
          "readOnly": true
        },
        "deliveryDate": {
          "description": "The delivery date.",
          "readOnly": true,
          "type": "string"
        },
        "ehfSendStatus": {
          "description": "[Deprecated] EHF (Peppol) send status. This only shows status for historic EHFs.",
          "enum": [
            "DO_NOT_SEND",
            "SEND",
            "SENT",
            "SEND_FAILURE_RECIPIENT_NOT_FOUND"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceComment": {
          "description": "Comment text for the invoice. This was specified on the order as invoiceComment.",
          "readOnly": true,
          "type": "string"
        },
        "invoiceDate": {
          "type": "string"
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "invoiceNumber": {
          "description": "If value is set to 0, the invoice number will be generated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "invoiceRemark": {
          "$ref": "#/definitions/InvoiceRemark",
          "description": "Invoice remark - automatically stops reminder/notice of debt collection until specified date."
        },
        "invoiceRemarks": {
          "description": "Deprecated Invoice remarks - please use the 'invoiceRemark' instead.",
          "type": "string"
        },
        "isApproved": {
          "readOnly": true,
          "type": "boolean"
        },
        "isCharged": {
          "readOnly": true,
          "type": "boolean"
        },
        "isCreditNote": {
          "readOnly": true,
          "type": "boolean"
        },
        "isCredited": {
          "readOnly": true,
          "type": "boolean"
        },
        "isPeriodizationPossible": {
          "readOnly": true,
          "type": "boolean"
        },
        "kid": {
          "description": "KID - Kundeidentifikasjonsnummer.",
          "maxLength": 25,
          "type": "string"
        },
        "orderLines": {
          "description": "Orderlines connected to the invoice.",
          "items": {
            "$ref": "#/definitions/OrderLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "orders": {
          "description": "Related orders. Only one order per invoice is supported at the moment.",
          "items": {
            "$ref": "#/definitions/Order"
          },
          "type": "array"
        },
        "paidAmount": {
          "description": "[BETA] Optional. Used to specify the prepaid amount of the invoice. The paid amount can be specified here, or as a parameter to the /invoice API endpoint.",
          "type": "number"
        },
        "paymentTypeId": {
          "description": "[BETA] Optional. Used to specify payment type for prepaid invoices. Payment type can be specified here, or as a parameter to the /invoice API endpoint.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "postings": {
          "description": "The invoice postings, which includes a posting for the invoice with a positive amount, and one or more posting for the payments with negative amounts.",
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true,
          "type": "array"
        },
        "projectInvoiceDetails": {
          "description": "ProjectInvoiceDetails contains additional information about the invoice, in particular invoices for projects. It contains information about the charged project, the fee amount, extra percent and amount, extra costs, travel expenses, invoice and project comments, akonto amount and values determining if extra costs, akonto and hours should be included. ProjectInvoiceDetails is an object which represents the relation between an invoice and a Project, Orderline and OrderOut object.",
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          },
          "readOnly": true,
          "type": "array"
        },
        "reminders": {
          "description": "Invoice debt collection and reminders.",
          "items": {
            "$ref": "#/definitions/Reminder"
          },
          "readOnly": true,
          "type": "array"
        },
        "sumRemits": {
          "description": "The sum of all open remittances of the invoice. Remittances are reimbursement payments back to the customer and are therefore relevant to the bookkeeping of the invoice in the accounts.",
          "readOnly": true,
          "type": "number"
        },
        "travelReports": {
          "description": "Travel reports connected to the invoice.",
          "items": {
            "$ref": "#/definitions/TravelExpense"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "description": "The invoice voucher.",
          "readOnly": true
        }
      },
      "required": [
        "invoiceDate",
        "invoiceDueDate",
        "orders"
      ],
      "type": "object"
    },
    "InvoiceField": {
      "properties": {
        "category": {
          "type": "string"
        },
        "categoryDescription": {
          "type": "string"
        },
        "categoryName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceMessage": {
      "properties": {
        "contentId": {
          "format": "int32",
          "type": "integer"
        },
        "messageContentType": {
          "format": "int32",
          "type": "integer"
        },
        "readTime": {
          "format": "date",
          "type": "string"
        },
        "receiverEmail": {
          "type": "string"
        },
        "sendTime": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InvoiceOrderLineDTO": {
      "properties": {
        "amountCurrency": {
          "$ref": "#/definitions/TlxNumber"
        },
        "amountCurrencyOutstanding": {
          "$ref": "#/definitions/TlxNumber"
        },
        "date": {
          "format": "date-time",
          "type": "string"
        },
        "hasCreditNote": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceNumber": {
          "type": "string"
        },
        "isLastReminder": {
          "type": "boolean"
        },
        "isReminder": {
          "type": "boolean"
        },
        "kid": {
          "type": "string"
        },
        "lastReminderType": {
          "format": "int32",
          "type": "integer"
        },
        "reminderType": {
          "format": "int32",
          "type": "integer"
        },
        "reminderTypeDescription": {
          "type": "string"
        },
        "statusText": {
          "type": "string"
        },
        "termOfPayment": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceRemark": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "postponeRemindersTo": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InvoiceReminder": {
      "properties": {
        "debtCollectorName": {
          "type": "string"
        },
        "interestsCurrency": {
          "format": "double",
          "type": "number"
        },
        "messages": {
          "items": {
            "$ref": "#/definitions/InvoiceMessage"
          },
          "type": "array"
        },
        "reminderDate": {
          "format": "date",
          "type": "string"
        },
        "reminderType": {
          "format": "int32",
          "type": "integer"
        },
        "termOfPayment": {
          "format": "date",
          "type": "string"
        },
        "totalChargeCurrency": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "InvoiceSendTypeDTO": {
      "properties": {
        "canReceiveEFaktura": {
          "type": "boolean"
        },
        "canReceiveEHF": {
          "type": "boolean"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceSettings": {
      "properties": {
        "automaticNoticeOfDebtCollectionDaysAfterDueDate": {
          "description": "Number of days after due date automatic notices of debt collection should be sent out if enabled.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "automaticReminderDaysAfterDueDate": {
          "description": "Number of days after due date automatic reminders should be sent ouf if enabled.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "automaticSoftReminderDaysAfterDueDate": {
          "description": "Number of days after due date automatic soft reminders should be sent out if enabled.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "bankAccountReady": {
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "defaultSendTypeB2B": {
          "enum": [
            "EMAIL",
            "EHF",
            "EFAKTURA",
            "AVTALEGIRO",
            "VIPPS",
            "PAPER",
            "MANUAL",
            "DIRECT",
            "AUTOINVOICE_EHF_OUTBOUND",
            "AUTOINVOICE_EHF_INCOMING",
            "PEPPOL_EHF_INCOMING"
          ],
          "type": "string"
        },
        "defaultSendTypeB2C": {
          "enum": [
            "EMAIL",
            "EHF",
            "EFAKTURA",
            "AVTALEGIRO",
            "VIPPS",
            "PAPER",
            "MANUAL",
            "DIRECT",
            "AUTOINVOICE_EHF_OUTBOUND",
            "AUTOINVOICE_EHF_INCOMING",
            "PEPPOL_EHF_INCOMING"
          ],
          "type": "string"
        },
        "hasFirstInvoiceNumber": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isAutomaticNoticeOfDebtCollectionEnabled": {
          "description": "Has automatic notices of debt collection enabled for this company. This setting need to be enabled both here and on each customer card to take effect.",
          "readOnly": true,
          "type": "boolean"
        },
        "isAutomaticReminderEnabled": {
          "description": "Has automatic reminders enabled for this company. This setting need to be enabled both here and on each customer card to take effect.",
          "readOnly": true,
          "type": "boolean"
        },
        "isAutomaticSoftReminderEnabled": {
          "description": "Has automatic soft reminders enabled for this company. This setting need to be enabled both here and on each customer card to take effect.",
          "readOnly": true,
          "type": "boolean"
        },
        "nextInvoiceNumber": {
          "format": "int32",
          "type": "integer"
        },
        "sendTypes": {
          "items": {
            "enum": [
              "EMAIL",
              "EHF",
              "AVTALEGIRO",
              "EFAKTURA",
              "VIPPS",
              "PAPER",
              "MANUAL"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "setDeliverToAvailableStock": {
          "type": "boolean"
        },
        "showBackorder": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "InvoiceStatus": {
      "properties": {
        "level": {
          "enum": [
            "NONE",
            "SUCCESS",
            "WARNING",
            "CRITICAL"
          ],
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "InvoiceSummaryDTO": {
      "properties": {
        "lessThan30DaysOverdueSum": {
          "$ref": "#/definitions/TlxNumber"
        },
        "moreThan30DaysOverdueSum": {
          "$ref": "#/definitions/TlxNumber"
        },
        "notOverdueSum": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "InvoiceTemplateRenderer": {
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Job": {
      "properties": {
        "group": {
          "readOnly": true,
          "type": "string"
        },
        "interruptable": {
          "readOnly": true,
          "type": "boolean"
        },
        "jobDetail": {
          "$ref": "#/definitions/JobDetailDTO",
          "readOnly": true
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "stateful": {
          "readOnly": true,
          "type": "boolean"
        },
        "triggers": {
          "items": {
            "$ref": "#/definitions/TriggerDTO"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "JobDetailDTO": {
      "properties": {
        "description": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "jobData": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "jobclass": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LeaveOfAbsence": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "importedLeaveOfAbsenceId": {
          "description": "Existing leave of absence ID used by the current accounting system",
          "maxLength": 255,
          "type": "string"
        },
        "isWageDeduction": {
          "type": "boolean"
        },
        "percentage": {
          "type": "number"
        },
        "startDate": {
          "type": "string"
        },
        "type": {
          "description": "Define the leave of absence type.",
          "enum": [
            "LEAVE_OF_ABSENCE",
            "FURLOUGH",
            "PARENTAL_BENEFITS",
            "MILITARY_SERVICE",
            "EDUCATIONAL",
            "COMPASSIONATE",
            "OTHER_NOT_STATUTORILY_REQUIRED",
            "OTHER_STATUTORILY_REQUIRED",
            "EDUCATIONAL_NOT_STATUTORILY_REQUIRED",
            "EDUCATIONAL_STATUTORILY_REQUIRED"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "percentage",
        "startDate"
      ],
      "type": "object"
    },
    "LeaveOfAbsenceType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "leaveOfAbsenceType": {
          "description": "Defines the leave of absence type option.",
          "enum": [
            "LEAVE_OF_ABSENCE",
            "FURLOUGH",
            "PARENTAL_BENEFITS",
            "MILITARY_SERVICE",
            "EDUCATIONAL",
            "COMPASSIONATE",
            "OTHER_NOT_STATUTORILY_REQUIRED",
            "OTHER_STATUTORILY_REQUIRED",
            "EDUCATIONAL_NOT_STATUTORILY_REQUIRED",
            "EDUCATIONAL_STATUTORILY_REQUIRED"
          ],
          "type": "string"
        },
        "nameNO": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "leaveOfAbsenceType"
      ],
      "type": "object"
    },
    "LedgerAccount": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "readOnly": true
        },
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "postings": {
          "description": "Link to postings on this account.",
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true,
          "type": "array"
        },
        "sumAmount": {
          "readOnly": true,
          "type": "number"
        },
        "sumAmountCurrency": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "LegacyAddress": {
      "properties": {
        "addressLine1": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "bnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "city": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "displayNameInklMatrikkel": {
          "readOnly": true,
          "type": "string"
        },
        "fnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "gnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "knr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        },
        "postalCode": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "snr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "unitNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LegacyProfileDTO": {
      "properties": {
        "companyName": {
          "type": "string"
        },
        "employeeName": {
          "type": "string"
        },
        "loginCompanies": {
          "items": {
            "$ref": "#/definitions/ProfileLoginCompany"
          },
          "type": "array"
        },
        "menuItems": {
          "items": {
            "$ref": "#/definitions/MenuItem"
          },
          "type": "array"
        },
        "profileImageUrl": {
          "type": "string"
        },
        "site": {
          "type": "string"
        },
        "userLocale": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "License": {
      "properties": {
        "date": {
          "description": "Returns license creation date.",
          "readOnly": true,
          "type": "string"
        },
        "displayTextKey": {
          "description": "Returns license display text",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "description": "Returns the license id.",
          "readOnly": true,
          "type": "number"
        },
        "name": {
          "description": "Returns license name.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Link": {
      "properties": {
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "type": {
          "enum": [
            "POST",
            "PUT",
            "GET",
            "DELETE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "LinkMobilityReportDTO": {
      "properties": {
        "operator": {
          "type": "string"
        },
        "refId": {
          "type": "string"
        },
        "resultCode": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ListResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "type": "object"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAccommodationAllowance": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAccount": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Account"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAccountingPeriod": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/AccountingPeriod"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseActivity": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Activity"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAddon": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Addon"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAnnualAccount": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/AnnualAccount"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseApiConsumer": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ApiConsumer"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseArchiveTargetPath": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ArchiveTargetPath"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAsset": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAssetAccountRow": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/AssetAccountRow"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseAutopayBankAgreement": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/AutopayBankAgreement"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBalanceSheetAccount": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BalanceSheetAccount"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBank": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Bank"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankAgreementDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankAgreementDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankBalanceEstimation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankBalanceEstimation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankDashboardAdvice": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankDashboardAdvice"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankReconciliation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankReconciliation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankReconciliationAdjustment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankReconciliationAdjustment"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankReconciliationMatch": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankReconciliationMatch"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankReconciliationPaymentType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankReconciliationPaymentType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankStatement": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankStatement"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBankTransaction": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BankTransaction"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBanner": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Banner"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseBrregCompanyLookupDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/BrregCompanyLookupDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCalloutDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CalloutDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseChecklist": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Checklist"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseChecklistProperty": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ChecklistProperty"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseClient": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Client"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseClientAccessTemplate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ClientAccessTemplate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCloseGroup": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CloseGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseComment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Comment"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCompany": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Company"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCompanyAutoCompleteDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CompanyAutoCompleteDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCompanyHoliday": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CompanyHoliday"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCompanyHolidays": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CompanyHolidays"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCompanyStandardTime": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CompanyStandardTime"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseContact": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Contact"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCost": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Cost"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCountry": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Country"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCurrency": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Currency"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCurrencyWithRates": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CurrencyWithRates"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCustomer": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Customer"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCustomerCategory": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CustomerCategory"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseCustomizedChecklistProperty": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/CustomizedChecklistProperty"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDeliveryAddress": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/DeliveryAddress"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDepartment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Department"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDepreciationRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/DepreciationRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDeviation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Deviation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDiscountGroup": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/DiscountGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDistributionKey": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/DistributionKey"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDivision": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Division"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDocument": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Document"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseDocumentArchive": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/DocumentArchive"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmployee": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Employee"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmployeeCategory": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EmployeeCategory"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmployeeCompanyDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EmployeeCompanyDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmployeePreferences": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EmployeePreferences"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmployment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Employment"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmploymentDetails": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEmploymentType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EmploymentType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEnhetsregisteretDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EnhetsregisteretDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEntitlement": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Entitlement"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseEnumType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/EnumType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseExternalProduct": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ExternalProduct"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseGenericDataRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/GenericDataRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseGoodsReceipt": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/GoodsReceipt"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseGoodsReceiptLine": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/GoodsReceiptLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseHistoricalVoucher": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/HistoricalVoucher"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseHourlyCostAndRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/HourlyCostAndRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseInventories": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Inventories"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseInventory": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Inventory"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseInventoryLocation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/InventoryLocation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseInvoice": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Invoice"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseInvoiceSendTypeDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/InvoiceSendTypeDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseInvoiceSummaryDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/InvoiceSummaryDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseLeaveOfAbsence": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/LeaveOfAbsence"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseLeaveOfAbsenceType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/LeaveOfAbsenceType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseLedgerAccount": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/LedgerAccount"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseLegacyAddress": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/LegacyAddress"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseMapping": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Mapping"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseMileageAllowance": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseMonthlyStatus": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/MonthlyStatus"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseMunicipality": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Municipality"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseNews": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/News"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseNextOfKin": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/NextOfKin"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseNotification": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Notification"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseOccupationCode": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/OccupationCode"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseOrder": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Order"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseOrderGroup": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/OrderGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseOrderLine": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/OrderLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseOrderOffer": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/OrderOffer"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseOutgoingStock": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/OutgoingStock"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePassenger": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Passenger"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePaymentDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PaymentDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePaymentType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PaymentType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePaymentTypeOut": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PaymentTypeOut"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePayslip": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Payslip"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePensionScheme": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PensionScheme"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePerDiemCompensation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePerDiemCompensationTransientDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PerDiemCompensationTransientDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePerson1881EntityDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Person1881EntityDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePersonAutoCompleteDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PersonAutoCompleteDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePhonePrefixCountryInternal": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PhonePrefixCountryInternal"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePickupPoint": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PickupPoint"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePosting": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProduct": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Product"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductGroup": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductGroupRelation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductGroupRelation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductImportHeader": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductImportHeader"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductImportHeaderFieldsRelation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductImportHeaderFieldsRelation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductInventoryLocation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductInventoryLocation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductLine": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductPrice": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductPrice"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductUnit": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductUnit"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProductUnitMaster": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProductUnitMaster"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProject": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Project"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectCategory": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectCategory"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectControlForm": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectControlForm"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectControlFormType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectControlFormType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectHourlyRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectHourlyRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectInvoiceDetails": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectOrderLine": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectOverviewAggregate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectOverviewAggregate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectParticipant": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectPeriodMonthlyStatus": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectPeriodMonthlyStatus"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProjectSpecificRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseProspect": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Prospect"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePurchaseOrder": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PurchaseOrder"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePurchaseOrderAddress": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PurchaseOrderAddress"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePurchaseOrderIncomingInvoiceRelation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponsePurchaseOrderline": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/PurchaseOrderline"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRP2EmployeeAvailableTime": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RP2EmployeeAvailableTime"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRP2EmployeeBookedTime": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RP2EmployeeBookedTime"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRP2EmployeeJob": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RP2EmployeeJob"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRP2ProjectBookedTime": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RP2ProjectBookedTime"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRP2ProjectJob": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RP2ProjectJob"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRP2TotalTime": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RP2TotalTime"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRPJob": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RPJob"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReelDomainDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ReelDomainDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReelFunctionDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ReelFunctionDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReminder": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Reminder"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRemunerationType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RemunerationType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReport": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Report"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReportAccess": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ReportAccess"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReportAuthorization": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ReportAuthorization"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReportClientAccess": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ReportClientAccess"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseReportingCompanyInternal": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ReportingCompanyInternal"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseResultBudget": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ResultBudget"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseRiskFreeInterestRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/RiskFreeInterestRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalarySpecification": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalaryTransaction": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalaryTransaction"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalaryType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalaryType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalaryV2Type": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalaryV2Type"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalesForceAccountInfo": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalesForceAccountInfo"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalesForceAccountantConnection": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalesForceAccountantConnection"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalesForceEmployee": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalesForceEmployee"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSalesModuleDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSearchCompletionDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SearchCompletionDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSignatureCombinationDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SignatureCombinationDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseStandardTime": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/StandardTime"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseStocktaking": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Stocktaking"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSubscription": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Subscription"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSupplier": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Supplier"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSupplierAutomation": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SupplierAutomation"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSupplierBalance": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SupplierBalance"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSupplierInvoice": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SupplierInvoice"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSupplierProduct": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SupplierProduct"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseSystemReportCategoryDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/SystemReportCategoryDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTask": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Task"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTaxcardContactInternal": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TaxcardContactInternal"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTaxcardEmployeeInternal": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TaxcardEmployeeInternal"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTemplate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Template"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTimeClock": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TimeClock"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTimesheetAllocated": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TimesheetAllocated"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTimesheetEntry": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTimesheetProjectSalaryTypeSpecification": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TimesheetProjectSalaryTypeSpecification"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTimesheetSalaryTypeSpecification": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTodoListComment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TodoListComment"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTransportType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TransportType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelCostCategory": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelCostCategory"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelExpense": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelExpense"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelExpenseRate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelExpenseRate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelExpenseRateCategory": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategory"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelExpenseRateCategoryGroup": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelExpenseZone": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelExpenseZone"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTravelPaymentType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TravelPaymentType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseTripletexCompanyModules": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TripletexCompanyModules"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseUpsaleMetric": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/UpsaleMetric"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseUserTemplate": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/UserTemplate"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVFFactoringInvoiceOffer": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VFFactoringInvoiceOffer"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVatReturnsComment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VatReturnsComment"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVatReturnsVatCodeComment": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VatReturnsVatCodeComment"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVatTermPeriod": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VatTermPeriod"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVatType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VatType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVoucher": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Voucher"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVoucherInboxItem": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VoucherInboxItem"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVoucherInternal": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VoucherInternal"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVoucherMessage": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VoucherMessage"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVoucherStatus": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VoucherStatus"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseVoucherType": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/VoucherType"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseWeek": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Week"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseWorkingHoursScheme": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/WorkingHoursScheme"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseZendeskSearchResultDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ZendeskSearchResultDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseZtlAccount": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ZtlAccount"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseZtlConsent": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ZtlConsent"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListResponseZtlOnboarding": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/ZtlOnboarding"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "LoggedInUserInfoDTO": {
      "properties": {
        "company": {
          "$ref": "#/definitions/Company"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "language": {
          "type": "string"
        },
        "loggedInWithConnect": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "LogisticsSettings": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "hasWarehouseLocation": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "moduleSuggestedProductNumber": {
          "type": "boolean"
        },
        "purchaseOrderDefaultComment": {
          "type": "string"
        },
        "showOnboardingWizard": {
          "type": "boolean"
        },
        "suggestedProductNumber": {
          "maxLength": 50,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Mapping": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "excludeFromTaxReturn": {
          "readOnly": true,
          "type": "boolean"
        },
        "excludeFromTaxReturnPreviousYear": {
          "type": "boolean"
        },
        "groupNumber": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "groupingAns": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "groupingAnsPreviousYear": {
          "type": "string"
        },
        "groupingAs": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "groupingAsPreviousYear": {
          "type": "string"
        },
        "groupingEnk": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "groupingEnkPreviousYear": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "negate": {
          "readOnly": true,
          "type": "boolean"
        },
        "negatePreviousYear": {
          "type": "boolean"
        },
        "post": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "subPost": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MaritimeEmployment": {
      "properties": {
        "shipRegister": {
          "description": "Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register. ",
          "enum": [
            "NIS",
            "NOR",
            "FOREIGN"
          ],
          "type": "string"
        },
        "shipType": {
          "description": "Define the ship type.",
          "enum": [
            "OTHER",
            "DRILLING_PLATFORM",
            "TOURIST"
          ],
          "type": "string"
        },
        "tradeArea": {
          "description": "Define the trade area.",
          "enum": [
            "DOMESTIC",
            "FOREIGN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "MaventaEventDataDTO": {
      "properties": {
        "destination": {
          "type": "string"
        },
        "error_message": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "invoice_id": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "profiles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "recipient_bid": {
          "type": "string"
        },
        "recipient_eia": {
          "type": "string"
        },
        "recipient_name": {
          "type": "string"
        }
      },
      "required": [
        "destination",
        "id",
        "invoice_id",
        "invoice_number",
        "network",
        "profiles",
        "recipient_bid",
        "recipient_name"
      ],
      "type": "object"
    },
    "MaventaStatusDTO": {
      "properties": {
        "company_id": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "event_data": {
          "$ref": "#/definitions/MaventaEventDataDTO"
        },
        "event_timestamp": {
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "company_id",
        "event",
        "event_data",
        "event_timestamp"
      ],
      "type": "object"
    },
    "MediaType": {
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "subtype": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "wildcardSubtype": {
          "type": "boolean"
        },
        "wildcardType": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Menu": {
      "properties": {
        "defaultContentUrl": {
          "type": "string"
        },
        "menuItems": {
          "items": {
            "$ref": "#/definitions/MenuItem"
          },
          "type": "array"
        },
        "menuStyle": {
          "enum": [
            "NORMAL",
            "AGRO",
            "AGRO_ON_PREMISE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "MenuItem": {
      "properties": {
        "icon": {
          "type": "string"
        },
        "subMenuItems": {
          "items": {
            "$ref": "#/definitions/MenuItem"
          },
          "type": "array"
        },
        "testId": {
          "type": "string"
        },
        "theme": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MessageBodyWorkers": {
      "type": "object"
    },
    "MileageAllowance": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "departureLocation": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "drivingStops": {
          "description": "Link to individual mileage stops.",
          "items": {
            "$ref": "#/definitions/DrivingStop"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isCompanyCar": {
          "type": "boolean"
        },
        "km": {
          "type": "number"
        },
        "passengerSupplement": {
          "$ref": "#/definitions/MileageAllowance",
          "description": "Passenger mileage allowance associated with this mileage allowance."
        },
        "passengers": {
          "description": "Link to individual passengers.",
          "items": {
            "$ref": "#/definitions/Passenger"
          },
          "readOnly": true,
          "type": "array"
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "tollCost": {
          "$ref": "#/definitions/Cost",
          "description": "Toll cost associated with this mileage allowance."
        },
        "trailerSupplement": {
          "$ref": "#/definitions/MileageAllowance",
          "description": "Trailer mileage allowance supplement associated with this mileage allowance."
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vehicleType": {
          "description": "The corresponded number for the vehicleType. Default value = 0.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "departureLocation",
        "destination"
      ],
      "type": "object"
    },
    "MobileAppLogin": {
      "properties": {
        "appSecret": {
          "description": "App secret",
          "type": "string"
        },
        "employeeId": {
          "description": "Optional employee ID. Default employee is used when null",
          "format": "int32",
          "type": "integer"
        },
        "expirationDate": {
          "description": "Expiration date for the combined token",
          "type": "string"
        },
        "mfaCode": {
          "description": "Optional mfa auth code",
          "format": "int32",
          "type": "integer"
        },
        "password": {
          "description": "Users password",
          "type": "string"
        },
        "username": {
          "description": "Users username (email)",
          "type": "string"
        }
      },
      "required": [
        "appSecret",
        "expirationDate",
        "password",
        "username"
      ],
      "type": "object"
    },
    "MobileAppSpecificRightsInfo": {
      "properties": {
        "approveTravelExpenseEnabled": {
          "type": "boolean"
        },
        "archiveReceptionEnabled": {
          "type": "boolean"
        },
        "customerEnabled": {
          "type": "boolean"
        },
        "departmentEnabled": {
          "type": "boolean"
        },
        "documentArchiveEnabled": {
          "type": "boolean"
        },
        "electronicVouchersEnabled": {
          "type": "boolean"
        },
        "employeeEnabled": {
          "type": "boolean"
        },
        "hourBalanceEnabledForEmployee": {
          "type": "boolean"
        },
        "hourRegistrationEnabled": {
          "type": "boolean"
        },
        "payrollAccountingEnabled": {
          "type": "boolean"
        },
        "projectEnabled": {
          "type": "boolean"
        },
        "taxFreeDietRatesEnabled": {
          "type": "boolean"
        },
        "taxFreeMileageRatesEnabled": {
          "type": "boolean"
        },
        "travelDietIgnorePostingEnabled": {
          "type": "boolean"
        },
        "travelExpenseEnabled": {
          "type": "boolean"
        },
        "travelExpenseRatesEnabled": {
          "type": "boolean"
        },
        "userIsAllowedToRegisterHours": {
          "type": "boolean"
        },
        "userIsAuthCompanyAccountingReports": {
          "type": "boolean"
        },
        "userIsAuthCreateCustomer": {
          "type": "boolean"
        },
        "userIsAuthCreateOrder": {
          "type": "boolean"
        },
        "userIsAuthEmployeeInfo": {
          "type": "boolean"
        },
        "userIsAuthInvoicing": {
          "type": "boolean"
        },
        "userIsAuthMySalary": {
          "type": "boolean"
        },
        "userIsAuthProjectInfo": {
          "type": "boolean"
        },
        "userIsAuthProjectMenu": {
          "type": "boolean"
        },
        "userIsAuthRemitApprove": {
          "type": "boolean"
        },
        "userIsAuthTravelAndExpenseApprove": {
          "type": "boolean"
        },
        "userIsAuthVoucherApprove": {
          "type": "boolean"
        },
        "userIsAuthWageMenu": {
          "type": "boolean"
        },
        "userIsPayslipOnly": {
          "type": "boolean"
        },
        "vacationBalanceEnabledForEmployee": {
          "type": "boolean"
        },
        "vatOnForCompany": {
          "type": "boolean"
        },
        "vvselectroEnabled": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Modules": {
      "properties": {
        "accounting": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        },
        "agro": {
          "type": "boolean"
        },
        "approveVoucher": {
          "description": "Only readable for now",
          "readOnly": true,
          "type": "boolean"
        },
        "autoPayOcr": {
          "type": "boolean"
        },
        "completeMonthlyHourLists": {
          "type": "boolean"
        },
        "electro": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        },
        "electronicVouchers": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        },
        "invoice": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        },
        "mamut": {
          "type": "boolean"
        },
        "moduleContact": {
          "type": "boolean"
        },
        "moduleCurrency": {
          "type": "boolean"
        },
        "moduleDepartmentAccounting": {
          "type": "boolean"
        },
        "moduleFactoringVismaFinance": {
          "enum": [
            "OFF",
            "STARTED",
            "SIGNING_STARTED",
            "ON",
            "IN_REVIEW",
            "DEACTIVATED_FROM_ON",
            "DEACTIVATED_FROM_OFF",
            "FAILED",
            "OPTED_OUT"
          ],
          "type": "string"
        },
        "moduleProductAccounting": {
          "description": "read only",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProjectAccounting": {
          "description": "read only",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProjectBudget": {
          "type": "boolean"
        },
        "moduleWageProjectAccounting": {
          "type": "boolean"
        },
        "modulecustomer": {
          "type": "boolean"
        },
        "moduledepartment": {
          "type": "boolean"
        },
        "moduleemployee": {
          "type": "boolean"
        },
        "moduleinvoice": {
          "type": "boolean"
        },
        "moduleprojectcategory": {
          "type": "boolean"
        },
        "moduleprojecteconomy": {
          "type": "boolean"
        },
        "ocr": {
          "type": "boolean"
        },
        "project": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        },
        "remit": {
          "type": "boolean"
        },
        "salary": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        },
        "salaryStartDate": {
          "type": "string"
        },
        "vvs": {
          "description": "Not readable. Only for input.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MoneyAmount": {
      "properties": {
        "amount": {
          "description": "Amount of money",
          "type": "number"
        },
        "currency": {
          "description": "Currency",
          "type": "string"
        },
        "percentageChange": {
          "description": "Percentage change compared to previous 30 days",
          "type": "number"
        }
      },
      "type": "object"
    },
    "MonthlyStatus": {
      "properties": {
        "approved": {
          "readOnly": true,
          "type": "boolean"
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "approvedDate": {
          "readOnly": true,
          "type": "string"
        },
        "approvedUntilDate": {
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "completed": {
          "readOnly": true,
          "type": "boolean"
        },
        "employee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "flexSummary": {
          "$ref": "#/definitions/FlexSummary",
          "readOnly": true
        },
        "hourSummary": {
          "$ref": "#/definitions/HourSummary",
          "readOnly": true
        },
        "hoursPayout": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "monthYear": {
          "readOnly": true,
          "type": "string"
        },
        "timesheetEntries": {
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vacationPayout": {
          "type": "number"
        },
        "vacationSummary": {
          "$ref": "#/definitions/VacationSummary",
          "readOnly": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MultiPart": {
      "properties": {
        "bodyParts": {
          "items": {
            "$ref": "#/definitions/BodyPart"
          },
          "type": "array"
        },
        "contentDisposition": {
          "$ref": "#/definitions/ContentDisposition"
        },
        "entity": {
          "type": "object"
        },
        "headers": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "mediaType": {
          "$ref": "#/definitions/MediaType"
        },
        "messageBodyWorkers": {
          "$ref": "#/definitions/MessageBodyWorkers"
        },
        "parameterizedHeaders": {
          "additionalProperties": {
            "items": {
              "$ref": "#/definitions/ParameterizedHeader"
            },
            "type": "array"
          },
          "type": "object"
        },
        "parent": {
          "$ref": "#/definitions/MultiPart"
        },
        "providers": {
          "$ref": "#/definitions/Providers"
        }
      },
      "type": "object"
    },
    "Municipality": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "county": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "number": {
          "maxLength": 4,
          "readOnly": true,
          "type": "string"
        },
        "payrollTaxZone": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MySubscriptionAccountInfoDTO": {
      "properties": {
        "canReopen": {
          "type": "boolean"
        },
        "readOnlyPackagePrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "reopenLimitDate": {
          "format": "date",
          "type": "string"
        },
        "reopenNumberOfDays": {
          "format": "int32",
          "type": "integer"
        },
        "suspended": {
          "type": "boolean"
        },
        "voucherModule": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MySubscriptionModuleDTO": {
      "properties": {
        "active": {
          "type": "boolean"
        },
        "agreementText": {
          "type": "string"
        },
        "agreementTitle": {
          "type": "string"
        },
        "available": {
          "type": "boolean"
        },
        "canDeactivate": {
          "type": "boolean"
        },
        "category": {
          "type": "string"
        },
        "deactivationError": {
          "type": "string"
        },
        "descriptionPart1": {
          "type": "string"
        },
        "descriptionPart2": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "infoText": {
          "type": "string"
        },
        "licenseText": {
          "type": "string"
        },
        "licenseUrl": {
          "type": "string"
        },
        "monthlyPrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "perUsePrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "perUserOverLimitPrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "perUserPrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "price1": {
          "$ref": "#/definitions/TlxNumber"
        },
        "price2": {
          "$ref": "#/definitions/TlxNumber"
        },
        "price3": {
          "$ref": "#/definitions/TlxNumber"
        },
        "priceDescription": {
          "type": "string"
        },
        "priceLine1Text": {
          "type": "string"
        },
        "priceLine2Text": {
          "type": "string"
        },
        "priceLine3Text": {
          "type": "string"
        },
        "processing": {
          "type": "boolean"
        },
        "redirectUrl": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "startUpPrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "title": {
          "type": "string"
        },
        "unavailableText": {
          "type": "string"
        },
        "yearlyPrice": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "News": {
      "properties": {
        "excerpt": {
          "type": "string"
        },
        "permalink": {
          "type": "string"
        },
        "publish_date": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "NextOfKin": {
      "properties": {
        "address": {
          "maxLength": 255,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 20,
          "type": "string"
        },
        "typeOfRelationship": {
          "description": "Define the employee's next of kin relationtype.<br>SPOUSE<br>PARTNER<br>PARENT<br>CHILD<br>SIBLING",
          "enum": [
            "SPOUSE",
            "PARTNER",
            "PARENT",
            "CHILD",
            "SIBLING"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "phoneNumber"
      ],
      "type": "object"
    },
    "NoteContainer": {
      "properties": {
        "acquisitionCostIntangibleAssets": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "acquisitionCostTangibleFixedAssets": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "assetPosts": {
          "items": {
            "$ref": "#/definitions/FinacialInstrumentAsset"
          },
          "type": "array"
        },
        "capitalisedValueIntangibleAssets": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "capitalisedValueTangibleFixedAssets": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "closingSumSalary": {
          "readOnly": true,
          "type": "number"
        },
        "extraordinaryCostPosts": {
          "items": {
            "$ref": "#/definitions/ExtraordinaryIncomeAndCost"
          },
          "type": "array"
        },
        "extraordinaryIncomePosts": {
          "items": {
            "$ref": "#/definitions/ExtraordinaryIncomeAndCost"
          },
          "type": "array"
        },
        "investmentsPosts": {
          "items": {
            "$ref": "#/definitions/GroupInvestment"
          },
          "type": "array"
        },
        "note": {
          "$ref": "#/definitions/YearEndReportNote",
          "readOnly": true
        },
        "noteNumber": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "noteTextLibrary": {
          "items": {
            "$ref": "#/definitions/NoteTextLibrary"
          },
          "type": "array"
        },
        "openingSumSalary": {
          "readOnly": true,
          "type": "number"
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/YearEndReportNoteData"
          },
          "type": "array"
        },
        "sumExtraordinaryCost": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "sumExtraordinaryIncome": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "sumRealValue": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "sumValueAdjustment": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "NoteOverview": {
      "properties": {
        "noteContainers": {
          "items": {
            "$ref": "#/definitions/NoteContainer"
          },
          "type": "array"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "NoteTextLibrary": {
      "properties": {
        "note": {
          "$ref": "#/definitions/YearEndReportNote",
          "readOnly": true
        },
        "notePostName": {
          "readOnly": true,
          "type": "string"
        },
        "notePostType": {
          "enum": [
            "ID_FOR_NOTE",
            "IS_CHECKED",
            "UPDATED_BY",
            "UPDATED_DATE",
            "ACCOUNTS",
            "ACCOUNTING_PRINCIPLES_FREE_TEXT",
            "ACCOUNTING_PRINCIPLES_USE_DEFAULT_TEXT",
            "STILL_IN_BUSINESS",
            "STILL_IN_BUSINESS_INFO",
            "NUMBER_OF_MAN_YEARS",
            "OPENING_BALANCE_SALARY",
            "CLOSING_BALANCE_SALARY",
            "OPENING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "CLOSING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "OPENING_BALANCE_PENSION_COST",
            "CLOSING_BALANCE_PENSION_COST",
            "OPENING_BALANCE_OTHER_BENEFITS",
            "CLOSING_BALANCE_OTHER_BENEFITS",
            "ABOUT_MAN_YEARS_AND_SALARY",
            "EXTRAORDINARY_INCOME_AND_COST",
            "EXTRAORDINARY_INCOME_AND_COST_DESCRIPTION",
            "EXTRAORDINARY_INCOME_AND_COST_AMOUNT",
            "EXTRAORDINARY_INCOME_AND_COST_ADDITIONAL_INFORMATION",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_ACQUISITION_COST",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_CAPITALISED_VALUE",
            "FIXED_ASSETS_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ECONOMIC_LIFE",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ACQUISITION_COST",
            "FIXED_ASSETS_GOODWILL",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE",
            "FIXED_ASSETS_ADDITIONAL_INFORMATION",
            "GROUP",
            "GROUP_INVESTMENTS",
            "GROUP_OPENING_BALANCE",
            "GROUP_REVENUE_RECOGNIZED_AS_INCOME",
            "GROUP_OTHER_CHANGES",
            "GROUP_CLOSING_BALANCE",
            "GROUP_ADDED_VALUE",
            "GROUP_DEPRECIATION_OF_ADDED_VALUES",
            "GROUP_GOODWILL",
            "GROUP_DEPRECIATION_OF_GOODWILL",
            "GROUP_TOTAL_ACQUISITION_COST",
            "GROUP_TOTAL_CAPITALIZED_EQUITY",
            "GROUP_IS_SUBSIDIARY",
            "GROUP_NAME_OF_PARENT_COMPANY",
            "GROUP_BUSINESS_OFFICE_PARENT_COMPANY",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION_JUSTIFICATION",
            "GROUP_TRANSACTIONS_WITH_SUBSIDIARIES",
            "GROUP_INTERNAL_GAIN_TRANSACTIONS",
            "GROUP_RECEIVABLES_AND_LIABILITIES",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_MORTGAGED_ASSETS",
            "OPENING_BALANCE_OTHER_COLLATERAL",
            "OPENING_BALANCE_GUANRANTEES",
            "GROUP_RECEIVABLES_AND_LIABILITIES_ADDITIONAL_INFO",
            "RECEIVABLES_FALL_DUE_LATER_THAN_ONE_YEAR",
            "RECEIVABLES_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ASSET",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_REAL_VALUE",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_VALUE_ADJUSTMENT",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_DESCRIPTION",
            "HOLDING_OWN_SHARES",
            "HOLDING_OWN_SHARES_NUMBER_OF_SHARES",
            "HOLDING_OWN_SHARES_NOMINAL_VALUE_OF_SHARES",
            "HOLDING_OWN_SHARES_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_ACQUISITIONS_REMUNERATION",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_REMUNERATION",
            "OWN_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "OWN_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_DISPOSAL_REMUNERATION",
            "PARENT_COMPANY_SHARES_DISPOSAL_REMUNERATION",
            "OWN_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "HOLDING_OWN_SHARES_THIS_YEARS_PAYOUT",
            "HOLDING_OWN_SHARES_PROVISION_FOR_THE_YEAR",
            "HOLDING_OWN_SHARES_PROVISIONS",
            "HOLDING_OWN_SHARES_ADDITIONAL_INFORMATION",
            "DEBT_DUE_FOR_PAYMENT",
            "DEBT_SECURED_BY_MORTGAGE",
            "DEBT_CAPITALISED_VALUE",
            "DEBT_TOTAL_NON_RECOGNIZED_WARRANTY_OBLIGATIONS",
            "DEBT_WARRANTY_OBLIGATIONS",
            "DEBT_ADDITIONAL_INFORMATION",
            "LOAN_AND_PROVISION_OF_SECURITY_IS_GRANTED",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_ADDITIONAL_INFORMATION",
            "FREE_NOTE_FREE_TEXT"
          ],
          "readOnly": true,
          "type": "string"
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/YearEndReportNoteData"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Notification": {
      "properties": {
        "category": {
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "link": {
          "maxLength": 255,
          "type": "string"
        },
        "message": {
          "maxLength": 255,
          "type": "string"
        },
        "title": {
          "maxLength": 100,
          "type": "string"
        },
        "type": {
          "maxLength": 50,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "message",
        "title",
        "type"
      ],
      "type": "object"
    },
    "OccupationCode": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 7,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "nameNO": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OnboardAccountDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "enterprises": {
          "items": {
            "$ref": "#/definitions/EnterpriseDTO"
          },
          "type": "array"
        },
        "logisticsModule": {
          "type": "boolean"
        },
        "municipality": {
          "type": "string"
        },
        "orgNumber": {
          "type": "string"
        },
        "packageId": {
          "format": "int32",
          "type": "integer"
        },
        "postalCode": {
          "type": "string"
        },
        "registrationDate": {
          "format": "date",
          "type": "string"
        },
        "salaryModule": {
          "type": "boolean"
        },
        "startDateMunicipality": {
          "format": "date",
          "type": "string"
        },
        "vatRegistered": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "OpeningBalance": {
      "properties": {
        "balancePostings": {
          "description": "Balance postings",
          "items": {
            "$ref": "#/definitions/OpeningBalanceBalancePosting"
          },
          "type": "array"
        },
        "customerPostings": {
          "description": "Postings in the customer sub ledger",
          "items": {
            "$ref": "#/definitions/OpeningBalanceCustomerPosting"
          },
          "type": "array"
        },
        "employeePostings": {
          "description": "Postings in the employee sub ledger",
          "items": {
            "$ref": "#/definitions/OpeningBalanceEmployeePosting"
          },
          "type": "array"
        },
        "supplierPostings": {
          "description": "Postings in the supplier sub ledger",
          "items": {
            "$ref": "#/definitions/OpeningBalanceSupplierPosting"
          },
          "type": "array"
        },
        "voucherDate": {
          "description": "The date for the opening balance",
          "type": "string"
        }
      },
      "required": [
        "voucherDate"
      ],
      "type": "object"
    },
    "OpeningBalanceBalancePosting": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "description": "Only relevant for accounts in a different currency than the company currency, e.g an EUR account in a Norwegian company.  If provided on other accounts, it must always equal 'amount'",
          "type": "number"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        }
      },
      "required": [
        "account",
        "amount"
      ],
      "type": "object"
    },
    "OpeningBalanceCustomerPosting": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "amount",
        "customer"
      ],
      "type": "object"
    },
    "OpeningBalanceEmployeePosting": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        }
      },
      "required": [
        "amount",
        "employee"
      ],
      "type": "object"
    },
    "OpeningBalanceSupplierPosting": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        }
      },
      "required": [
        "amount",
        "supplier"
      ],
      "type": "object"
    },
    "Order": {
      "properties": {
        "attachment": {
          "description": "[BETA] Attachments belonging to this order",
          "items": {
            "$ref": "#/definitions/Document"
          },
          "readOnly": true,
          "type": "array"
        },
        "attn": {
          "$ref": "#/definitions/Contact"
        },
        "canCreateBackorder": {
          "readOnly": true,
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress",
          "description": "Delivery address of this order. This can be a new or existing address\n(useful to know, especially if the delivery is to a private person: if 'deliveryAddress.name' is set, we ignore the state of 'customer.id')"
        },
        "deliveryComment": {
          "type": "string"
        },
        "deliveryDate": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceComment": {
          "description": "Comment to be displayed in the invoice based on this order. Can be also found in Invoice.invoiceComment on Invoice objects.",
          "type": "string"
        },
        "invoiceOnAccountVatHigh": {
          "description": "Is the on account(a konto) amounts including vat ",
          "type": "boolean"
        },
        "invoiceSMSNotificationNumber": {
          "description": "The phone number of the receiver of sms notifications",
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "invoiceSendSMSNotification": {
          "description": "Is sms-notification on/off",
          "readOnly": true,
          "type": "boolean"
        },
        "invoicesDueIn": {
          "description": "Number of days/months in which invoices created from this order is due",
          "format": "int32",
          "maximum": 10000,
          "minimum": 0,
          "type": "integer"
        },
        "invoicesDueInType": {
          "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
          "enum": [
            "DAYS",
            "MONTHS",
            "RECURRING_DAY_OF_MONTH"
          ],
          "type": "string"
        },
        "isClosed": {
          "description": "Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again.",
          "type": "boolean"
        },
        "isPrioritizeAmountsIncludingVat": {
          "type": "boolean"
        },
        "isShowOpenPostsOnInvoices": {
          "description": "Show account statement - open posts on invoices created from this order",
          "type": "boolean"
        },
        "isSubscription": {
          "description": "If true, the order is a subscription, which enables periodical invoicing of order lines. First, create an order with isSubscription=true, then approve it for subscription invoicing with the :approveSubscriptionInvoice method.",
          "type": "boolean"
        },
        "isSubscriptionAutoInvoicing": {
          "description": "Automatic invoicing. Starts when the subscription is approved",
          "type": "boolean"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "orderDate": {
          "type": "string"
        },
        "orderLineSorting": {
          "enum": [
            "ID",
            "PRODUCT",
            "CUSTOM"
          ],
          "type": "string"
        },
        "orderLines": {
          "description": "Order lines tied to the order. New OrderLines may be embedded here, in some endpoints.",
          "items": {
            "$ref": "#/definitions/OrderLine"
          },
          "type": "array"
        },
        "ourContact": {
          "$ref": "#/definitions/Contact",
          "description": "If the contact is not an employee"
        },
        "ourContactEmployee": {
          "$ref": "#/definitions/Employee",
          "description": "If the contact is an employee"
        },
        "overdueNoticeEmail": {
          "format": "email",
          "maxLength": 254,
          "type": "string"
        },
        "preliminaryInvoice": {
          "$ref": "#/definitions/Invoice",
          "description": "[BETA] Preliminary invoice if order is not charged",
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "receiverEmail": {
          "maxLength": 254,
          "type": "string"
        },
        "reference": {
          "maxLength": 255,
          "type": "string"
        },
        "sendMethodDescription": {
          "description": "Description of how this invoice will be sent",
          "type": "string"
        },
        "subscriptionDuration": {
          "description": "Number of months/years the subscription shall run",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "subscriptionDurationType": {
          "description": "The time unit of subscriptionDuration",
          "enum": [
            "MONTHS",
            "YEAR"
          ],
          "type": "string"
        },
        "subscriptionInvoicingTime": {
          "description": "Number of days/months invoicing in advance/in arrears",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "subscriptionInvoicingTimeInAdvanceOrArrears": {
          "description": "Invoicing in advance/in arrears",
          "enum": [
            "ADVANCE",
            "ARREARS"
          ],
          "type": "string"
        },
        "subscriptionInvoicingTimeType": {
          "description": "The time unit of subscriptionInvoicingTime",
          "enum": [
            "DAYS",
            "MONTHS"
          ],
          "type": "string"
        },
        "subscriptionPeriodsOnInvoice": {
          "description": "Number of periods on each invoice",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "subscriptionPeriodsOnInvoiceType": {
          "description": "The time unit of subscriptionPeriodsOnInvoice",
          "enum": [
            "MONTHS"
          ],
          "readOnly": true,
          "type": "string"
        },
        "totalInvoicedOnAccountAmountAbsoluteCurrency": {
          "description": "Amount paid on account(a konto)",
          "readOnly": true,
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "customer",
        "deliveryDate",
        "orderDate"
      ],
      "type": "object"
    },
    "OrderGroup": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "sortIndex": {
          "description": "Minimum 1. Defines the presentation order of the orderGroups. Does not need to be, and is often not continuous.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "title": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "order"
      ],
      "type": "object"
    },
    "OrderLine": {
      "properties": {
        "amountExcludingVatCurrency": {
          "description": "Total amount on order line excluding VAT in the order's currency",
          "readOnly": true,
          "type": "number"
        },
        "amountIncludingVatCurrency": {
          "description": "Total amount on order line including VAT in the order's currency",
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "The order line's currency. Determined by the order's currency.",
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "description": "Discount given as a percentage (%)",
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "$ref": "#/definitions/InventoryLocation",
          "description": "Inventory location field -- beta program"
        },
        "isSubscription": {
          "type": "boolean"
        },
        "markup": {
          "description": "Markup given as a percentage (%)",
          "type": "number"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "description": "The related Order for this OrderLine. This field is required when creating a new OrderLine in the API."
        },
        "orderGroup": {
          "$ref": "#/definitions/OrderGroup"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "subscriptionPeriodEnd": {
          "type": "string"
        },
        "subscriptionPeriodStart": {
          "type": "string"
        },
        "unitCostCurrency": {
          "description": "Unit price purchase (cost) excluding VAT in the order's currency",
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "description": "Unit price of purchase excluding VAT in the order's currency",
          "type": "number"
        },
        "unitPriceIncludingVatCurrency": {
          "description": "Unit price of purchase including VAT in the order's currency",
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OrderLinePostingDTO": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "orderLine": {
          "$ref": "#/definitions/OrderLine"
        },
        "posting": {
          "$ref": "#/definitions/Posting"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "posting"
      ],
      "type": "object"
    },
    "OrderOffer": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The offer's customer"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "offerDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "OutgoingStock": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "order": {
          "$ref": "#/definitions/Order",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PGCallbackDTO": {
      "properties": {
        "ODPCompanyID": {
          "format": "int32",
          "type": "integer"
        },
        "ODPCustomerID": {
          "format": "int32",
          "type": "integer"
        },
        "autoPayKey": {
          "type": "string"
        },
        "autoPayKeyLastGeneratedDate": {
          "format": "date",
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        },
        "odpcompanyID": {
          "format": "int32",
          "type": "integer"
        },
        "odpcustomerID": {
          "format": "int32",
          "type": "integer"
        },
        "pgRequestId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "tenantId": {
          "type": "string"
        }
      },
      "required": [
        "ODPCompanyID",
        "ODPCustomerID",
        "autoPayKey",
        "autoPayKeyLastGeneratedDate",
        "pgRequestId",
        "tenantId"
      ],
      "type": "object"
    },
    "PageOptions": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "data": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "The actual options as a JSON blob",
          "type": "object"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "key": {
          "description": "The lookup key for this PageOptions entry",
          "maxLength": 255,
          "type": "string"
        },
        "level": {
          "description": "The level that `data` is stored at",
          "enum": [
            "Employee",
            "Company"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type that `data` is",
          "enum": [
            "IncomingInvoiceViewOptions",
            "PurchaseOrderOverviewOptions",
            "BankBalanceEstimationViewOptions",
            "OrderFormViewOptions",
            "BankAccountsOverviewViewOptions"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "data"
      ],
      "type": "object"
    },
    "ParameterizedHeader": {
      "properties": {
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Passenger": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mileageAllowance": {
          "$ref": "#/definitions/MileageAllowance"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "PaymentDTO": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "description": "The payment account.",
          "readOnly": true
        },
        "amountCurrency": {
          "description": "In the specified currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountInAccountCurrency": {
          "description": "Amount specified in the currency of the bank agreements account.",
          "readOnly": true,
          "type": "number"
        },
        "bookingDate": {
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "creditorBankAddress": {
          "readOnly": true,
          "type": "string"
        },
        "creditorBankName": {
          "readOnly": true,
          "type": "string"
        },
        "creditorBankPostalCity": {
          "readOnly": true,
          "type": "string"
        },
        "creditorBankPostalCode": {
          "readOnly": true,
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "description": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isFinalStatus": {
          "readOnly": true,
          "type": "boolean"
        },
        "isForeignPayment": {
          "readOnly": true,
          "type": "boolean"
        },
        "isSalary": {
          "readOnly": true,
          "type": "boolean"
        },
        "kid": {
          "description": "KID - Kundeidentifikasjonsnummer.",
          "readOnly": true,
          "type": "string"
        },
        "paymentDate": {
          "readOnly": true,
          "type": "string"
        },
        "postings": {
          "$ref": "#/definitions/Posting",
          "description": "The payment posting.",
          "readOnly": true
        },
        "receiverReference": {
          "readOnly": true,
          "type": "string"
        },
        "sourceVoucher": {
          "$ref": "#/definitions/Voucher",
          "description": "Vouchere that was paid.",
          "readOnly": true
        },
        "status": {
          "description": "The payment status.NOT_APPROVED: Payment not approved yet.<br>APPROVED: Payment approved, but not yet sent to bank.<br>SENT_TO_AUTOPAY: Payment sent to bank.<br>RECEIVED_BY_BANK: Payment received by the bank.<br>ACCEPTED_BY_BANK: Payment that was accepted by the bank.<br>FAILED: Payment that failed.<br>CANCELLED: Cancelled payment.<br>SUCCESS: Payment that ended successfully.<br>",
          "enum": [
            "NOT_APPROVED",
            "APPROVED",
            "SENT_TO_AUTOPAY",
            "RECEIVED_BY_BANK",
            "ACCEPTED_BY_BANK",
            "FAILED",
            "CANCELLED",
            "SUCCESS"
          ],
          "readOnly": true,
          "type": "string"
        },
        "statusId": {
          "description": "The payment status Id. Usually all the payments in one batch have the same status ID, at least to the point of being received by bank.NEW: Payment is new.<br>PENDING_SIGNING: Payment is sent to AutoPay but not signed yet, requires re-approving.<br>CANCELLED: Payment was cancelled by ERP.<br>ERROR: Payment that failed.<br>RECEIVED_BY_BANK: Payment was received by the bank.<br>ACCEPTED_BY_BANK: Payment was accepted by bank.<br>CANCELLED_IN_BANK: Payment was cancelled in bank.<br>REJECTED_BY_BANK: Payment was rejected by bank.<br>PAID: Payment is paid.<br>OTHER: In case status in unknown. Will never be a final status.<br>",
          "enum": [
            "NEW",
            "PENDING_SIGNING",
            "CANCELLED",
            "ERROR",
            "RECEIVED_BY_BANK",
            "ACCEPTED_BY_BANK",
            "CANCELLED_IN_BANK",
            "REJECTED_BY_BANK",
            "PAID",
            "OTHER"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "valueDate": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PaymentType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "readOnly": true
        },
        "debitAccount": {
          "$ref": "#/definitions/Account"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "description",
        "displayName"
      ],
      "type": "object"
    },
    "PaymentTypeOut": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isBruttoWageDeduction": {
          "description": "true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting",
          "type": "boolean"
        },
        "isInactive": {
          "description": "true if the payment type should be hidden from available payment types",
          "type": "boolean"
        },
        "requiresSeparateVoucher": {
          "description": "true if a separate voucher is required",
          "type": "boolean"
        },
        "sequence": {
          "description": "determines in which order the types should be listed. No 1 is listed first",
          "format": "int32",
          "type": "integer"
        },
        "showIncomingInvoice": {
          "description": "true if the payment type should be available in supplier invoices",
          "type": "boolean"
        },
        "showVatReturns": {
          "description": "true if the payment type should be available in vat returns",
          "type": "boolean"
        },
        "showWagePayment": {
          "description": "true if the payment type should be available in wage payments. The wage module is required to both view and change this setting",
          "type": "boolean"
        },
        "showWagePeriodTransaction": {
          "description": "true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting",
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "creditAccount",
        "description"
      ],
      "type": "object"
    },
    "PaymentWidgetPaymentType": {
      "properties": {
        "currencyCode": {
          "description": "Payment type's currency code",
          "type": "string"
        },
        "currencyId": {
          "description": "Payment type's currency id",
          "format": "int32",
          "type": "integer"
        },
        "isDefault": {
          "description": "Is the default payment type ",
          "type": "boolean"
        },
        "paymentIntegration": {
          "description": "The Payment Type (NETS, AUTOPAY, POSTING_RULE)",
          "enum": [
            "NOT_PAID",
            "NETS",
            "AUTOPAY",
            "POSTING_RULE",
            "ZTL"
          ],
          "type": "string"
        },
        "paymentTypeId": {
          "description": "Id corresponding to a Dropdown Type used in the Payment Widget's dropdown elements",
          "format": "int32",
          "type": "integer"
        },
        "paymentTypeValue": {
          "description": "Value of a Dropdown Type used in the Payment Widget's dropdown elements",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Payslip": {
      "properties": {
        "amount": {
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "description": "Voucher date.",
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "grossAmount": {
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "specifications": {
          "description": "Link to salary specifications.",
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          },
          "type": "array"
        },
        "transaction": {
          "$ref": "#/definitions/SalaryTransaction"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vacationAllowanceAmount": {
          "readOnly": true,
          "type": "number"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "employee"
      ],
      "type": "object"
    },
    "PensionScheme": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "number",
        "startDate"
      ],
      "type": "object"
    },
    "PerDiemCompensation": {
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "countryCode": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isDeductionForBreakfast": {
          "type": "boolean"
        },
        "isDeductionForDinner": {
          "type": "boolean"
        },
        "isDeductionForLunch": {
          "type": "boolean"
        },
        "location": {
          "maxLength": 255,
          "type": "string"
        },
        "overnightAccommodation": {
          "description": "Set what sort of accommodation was had overnight.",
          "enum": [
            "NONE",
            "HOTEL",
            "BOARDING_HOUSE_WITHOUT_COOKING",
            "BOARDING_HOUSE_WITH_COOKING"
          ],
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "travelExpenseZoneId": {
          "description": "Optional travel expense zone id. If not specified, the value from field zone will be used.",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "location"
      ],
      "type": "object"
    },
    "PerDiemCompensationTransientDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "countryCode": {
          "type": "string"
        },
        "isDeductionForBreakfast": {
          "type": "boolean"
        },
        "isDeductionForDinner": {
          "type": "boolean"
        },
        "isDeductionForLunch": {
          "type": "boolean"
        },
        "location": {
          "type": "string"
        },
        "overnightAccommodation": {
          "enum": [
            "NONE",
            "HOTEL",
            "BOARDING_HOUSE_WITHOUT_COOKING",
            "BOARDING_HOUSE_WITH_COOKING"
          ],
          "type": "string"
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "travelExpenseZoneId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PermanentDifferences": {
      "properties": {
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "negate": {
          "readOnly": true,
          "type": "boolean"
        },
        "postType": {
          "enum": [
            "REGISTRATION_NUMBER",
            "DESCRIPTION",
            "VEHICLE_TYPE",
            "YEAR_OF_INITIAL_REGISTRATION",
            "LIST_PRICE",
            "DATE_FROM",
            "DATE_TO",
            "LICENCE",
            "LICENCE_NUMBER",
            "IS_ELECTRONIC_VEHICLE_LOGBOOK_LOGGED",
            "NO_OF_KILOMETRES_TOTAL",
            "OPERATING_EXPENSES",
            "LEASING_RENT",
            "IS_COMPANY_VEHICLE_USED_PRIVATE",
            "NO_OF_KILOMETRES_PRIVATE",
            "DEPRECIATION_PRIVATE_USE",
            "REVERSED_VEHICLE_EXPENSES",
            "FUEL_COST",
            "MAINTENANCE_COST",
            "COST_OF_INSURANCE_AND_TAX",
            "NO_OF_LITER_FUEL",
            "TAXIMETER_TYPE",
            "INCOME_PERSONAL_TRANSPORT",
            "INCOME_GOODS_TRANSPORT",
            "DRIVING_INCOME_PAYED_IN_CASH",
            "DRIVING_INCOME_INVOICED_PUBLIC_AGENCIES",
            "TIP_PAYED_WITH_CARD_OR_INVOICE",
            "TIP_PAYED_IN_CASH",
            "NO_OF_KILOMETRES_SCHOOL_CHILDREN",
            "NO_OF_KILOMETRES_WITH_PASSENGER",
            "FLOP_TRIP_AMOUNT",
            "IS_CONNECTED_TO_CENTRAL",
            "ID_FOR_PROFIT_AND_LOSS_ACCOUNT",
            "DESCRIPTION_PROFIT_AND_LOSS_ACCOUNT",
            "MUNICIPALITY_NUMBER",
            "OPENING_BALANCE",
            "PROFIT_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "LOSS_SALES_WITHDRAWAL_OTHER_REALIZATIONS",
            "PROFIT_REALIZATIONS_LIVESTOCK",
            "VALUE_ACQUIRED_PROFIT_AND_LOSS_ACCOUNT",
            "VALUE_REALIZED_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION_OR_DEDUCTION_BASIS",
            "PERCENTAGE_PROFIT_AND_LOSS_ACCOUNT",
            "ANNUAL_INCOME_RECOGNITION",
            "ANNUAL_DEDUCTION",
            "CLOSING_BALANCE",
            "IS_REGARDING_REALIZATION_SEPARATED_PLOT_AGRICULTURE_OR_FORESTRY",
            "IS_REGARDING_REALIZATION_WHOLE_AGRICULTURE_OR_FORESTRY_BUSINESS",
            "ID_FOR_ACCOMMODATION_AND_RESTAURANT",
            "COVER_CHARGE_SUBJECT_TO_VAT",
            "COVER_CHARGE_NOT_SUBJECT_TO_VAT",
            "COVER_CHARGE",
            "DESCRIPTION_ACCOMMODATION_AND_RESTAURANT",
            "MUST_BE_CONFIRMED_BY_AUDITOR",
            "PRODUCT_TYPE",
            "OPENING_STOCK",
            "CLOSING_STOCK",
            "PURCHASE_OF_GOODS",
            "COST_OF_GOODS_SOLD",
            "SALES_REVENUE_AND_WITHDRAWALS",
            "SALES_REVENUE_IN_CASH",
            "CASH_REGISTER_SYSTEM_YEAR_OF_INITIAL_REGISTRATION",
            "CASH_REGISTER_SYSTEM_TYPE",
            "WITHDRAWAL_OF_PRODUCTS_VALUED_AT_TURNOVER",
            "PRIVATE_WITHDRAWAL_ENTERED_ON_PRIVATE_ACCOUNT",
            "TOTAL_WITHDRAWAL_PRODUCTS_ENTERED_AS_SALES_REVENUE",
            "WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "WITHDRAWAL_VALUE_VALUED_AT_MARKET_VALUE",
            "MARKUP_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "TOTAL_WITHDRAWAL_COST_FOR_ENTERTAINMENT",
            "OPENING_BALANCE_CREDITSALES",
            "CLOSING_BALANCE_CREDITSALES",
            "OPENING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "CLOSING_BALANCE_WRITE_DOWN_NEW_COMPANY",
            "OPENING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "CLOSING_BALANCE_RAW_MATERIAL_AND_SEMIFINISHED_PRODUCTS",
            "OPENING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "CLOSING_BALANCE_PRODUCT_UNDER_MANUFACTURING",
            "OPENING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "CLOSING_BALANCE_INVENTORIES_FINISHED_ITEM",
            "OPENING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "CLOSING_BALANCE_PURCHASED_ITEM_FOR_RESALE",
            "TANGIBLE_FIXED_ASSETS_TYPE",
            "OPENING_BALANCE_TANGIBLE_FIXED_ASSETS",
            "DEPRECIATION_PERCENTAGE",
            "STRAIGHT_LINE_DEPRECIATION",
            "CASH_DEPOSITS",
            "CONTRIBUTIONS_IN_KIND",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_CASH",
            "CAPITAL_REDUCTION_DISTRIBUTED_SHARED_CAPITAL_OTHER_ASSETS",
            "DEBT_WAVING",
            "BUYING_OWN_SHARES",
            "SELLING_OWN_SHARES",
            "DEBT_CONVERSION_TO_EQUITY",
            "POSITIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "NEGATIVE_DIFF_BETWEEN_ALLOCATED_AND_DISTRIBUTED_DIVIDEND",
            "OTHER_POSITIVE_CHANGE_IN_EQUITY",
            "OTHER_NEGATIVE_CHANGE_IN_EQUITY",
            "NONE_DEDUCTIBLE_COST",
            "POSITIVE_TAX_COST",
            "INTEREST_EXPENSE_FIXED_TAX",
            "SHARE_OF_LOSS_FROM_INVESTMENT",
            "REVERSAL_OF_IMPAIRMENT",
            "ACCOUNTING_IMPAIRMENT",
            "ACCOUNTING_LOSS",
            "ACCOUNTING_DEFICIT_NORWEAGIAN_SDF",
            "ACCOUNTING_DEFICIT_FOREIGN_SDF",
            "ACCOUNTING_LOSS_NORWEAGIAN_SDF",
            "ACCOUNTING_LOSS_FOREIGN_SDF",
            "RETURNED_DEBT_INTEREST",
            "TAXABLE_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "TAXABLE_DIVIDEND_ON_SHARES",
            "TAXABLE_PART_OF_DIVIDEND_AND_DISTRIBUTION",
            "SHARE_OF_TAXABLE_PROFIT_NORWEGIAN_SDF",
            "SHARE_OF_TAXABLE_PROFIT_FOREIGN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_NORWEGIAN_SDF",
            "TAXABLE_PROFIT_REALIZATION_OF_FOREIGN_SDF",
            "ADDITION_INTEREST_COST",
            "CORRECTION_PURPOSED_DIVIDEND",
            "TAXABLE_PROFIT_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "INCOME_SUPPLEMENT_FOR_CONVERSION_DIFFERENCE",
            "OTHER_INCOME_SUPPLEMENT",
            "RETURN_OF_INCOME_RELATED_DIVIDENDS",
            "PROFIT_AND_LOSS_GROUP_CONTRIBUTION",
            "ACCOUNTING_PROFIT_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "ACCOUNTING_PROFIT_SHARE_NORWEGIAN_SDF",
            "ACCOUNTING_PROFIT_SHARE_FOREIGN_SDF",
            "ACCOUNTING_GAIN_NORWEGIAN_SDF",
            "ACCOUNTING_GAIN_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIZATION_OF_FINANCIAL_INSTRUMENTS",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_NORWEGIAN_SDF",
            "SHARE_OF_DEDUCTIBLE_DEFICIT_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_NORWEGIAN_SDF",
            "DEDUCTIBLE_LOSS_ON_REALIXATION_FOREIGN_SDF",
            "DEDUCTIBLE_LOSS_ON_WITHDRAWAL_NORWEGIAN_TAX_AREA",
            "ISSUE_AND_ESTABLISHMENT_COST",
            "INCOME_DEDUCTION_FROM_ACCOUNTING_CURRENCY_TO_NOK",
            "OTHER_INCOME_DEDUCTION",
            "TEMPORARY_DIFFERENCES_TYPE",
            "OPENING_BALANCE_ACCOUNTABLE_VALUE",
            "CLOSING_BALANCE_ACCOUNTABLE_VALUE",
            "OPENING_BALANCE_TAX_VALUE",
            "CLOSING_BALANCE_TAX_VALUE",
            "OPENING_BALANCE_DIFFERENCES",
            "CLOSING_BALANCE_DIFFERENCES",
            "SHOW_PROFIT_AND_LOSS",
            "SHOW_ACCOMMODATION_AND_RESTAURANT",
            "IS_ACCOUNTABLE",
            "USE_ACCOUNTING_VALUES_IN_INVENTORIES",
            "USE_ACCOUNTING_VALUES_IN_CUSTOMER_RECEIVABLES",
            "SHOW_TANGIBLE_FIXED_ASSET",
            "SHOW_CAR",
            "SHOW_INVENTORIES",
            "SHOW_CUSTOMER_RECEIVABLES",
            "SHOW_CONCERN_RELATION",
            "OWN_BUSINESS_PROPERTIES",
            "OWN_ASSET_PAPIR",
            "TRANSFERED_BY",
            "TRANSFERED_DATE",
            "SET_ACCOUNTANT_REVISED",
            "IS_TAXABLE",
            "REQUIRE_AUDITORS_SIGNATURE",
            "VALIDATION_ONLY_ON_SUBMIT",
            "DATE_OF_DETERMINATION",
            "CONFIRMING_COMPANY_REPRESENTATIVE",
            "CONTACT_PERSON",
            "PARENT_COMPANY",
            "SMALL_ENTERPRICES",
            "PREPARED_BY_AUTHORIZED_ACCOUNTANT",
            "SERVICE_ASSISTANCE_USED",
            "YEAR_END_BRREG_DOC_ID",
            "YEAR_END_BRREG_DOC_FETCHER_NAME",
            "YEAR_END_DOCUMENTATION_ACCOMMODATION_AND_RESTAURANT",
            "YEAR_END_DOCUMENTATION_PROFIT_AND_LOSS_ACCOUNT",
            "YEAR_END_DOCUMENTATION_COMMERCIAL_VEHICLE",
            "YEAR_END_DOCUMENTATION_TANGIBLE_FIXED_ASSETS",
            "YEAR_END_DOCUMENTATION_INVENTORIES",
            "YEAR_END_DOCUMENTATION_ACCOUNTS_RECEIVABLE_FROM_CUSTOMERS",
            "YEAR_END_DOCUMENTATION_PROFIT_LOSS",
            "YEAR_END_DOCUMENTATION_BALANCE",
            "YEAR_END_DOCUMENTATION_PERSONAL_INCOME",
            "YEAR_END_DOCUMENTATION_PERMANENT_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TEMPORARY_DIFFERENCES",
            "YEAR_END_DOCUMENTATION_TAX_RELATED_RESULT",
            "YEAR_END_DOCUMENTATION_GROUP_CONTRIBUTIONS",
            "YEAR_END_DOCUMENTATION_EQUITY_RECONCILIATION",
            "YEAR_END_DOCUMENTATION_TAX_RETURN",
            "YEAR_END_DOCUMENTATION_DIVIDEND",
            "YEAR_END_DOCUMENTATION_DISPOSITIONS",
            "YEAR_END_DOCUMENTATION_PROPERTIES",
            "YEAR_END_DOCUMENTATION_SECURITIES",
            "YEAR_END_DOCUMENTATION_TAX_CALCULATION",
            "RECEIVER_ORG_NR",
            "RECEIVER_NAME",
            "CONCERN_CONNECTION",
            "VOTING_LIMIT",
            "DATE_OF_ACQUISITION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "RECEIVED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITH_TAX_AFFECTION",
            "SUBMITTED_GROUP_CONTRIBUTIONS_WITHOUT_TAX_AFFECTION",
            "APPLICATION_OF_LOSS_CARRY_FORWARDS",
            "ACCUMULATED_LOSS_FROM_PREVIOUS_YEARS",
            "CORRECTIONS_AND_OTHER_CAPITAL",
            "CORRECTIONS_AND_OTHER_DEBT",
            "IS_PART_OF_GROUP_COMPANY",
            "IS_LISTED_ON_THE_STOCK_EXCHANGE",
            "IS_REORGANIZED_ACROSS_BORDERS",
            "HAS_RECEIVED_OR_TRANSFERED_ASSETS",
            "HEAD_OF_GROUP_NAME",
            "HEAD_OF_GROUP_COUNTRY_CODE",
            "HEAD_OF_GROUP_LAST_YEAR_NAME",
            "HEAD_OF_GROUP_LAST_YEAR_COUNTRY_CODE",
            "FOREIGN_OWNERSHIP_COMPANY_NAME",
            "FOREIGN_OWNERSHIP_COMPANY_COUNTRY_CODE",
            "OWNS_MIN_50_PERCENT_OF_FOREIGN_COMPANY",
            "HAS_PERMANENT_ESTABLISHMENT_ABROAD",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_NAME",
            "COUNTRY_FOR_COUNTRY_REPORTABLE_ENTERPRISE_COUNTRY_CODE",
            "HAS_PERFORMANCE_BETWEEN_SHAREHOLDERS_AND_OTHER",
            "HAS_OUTSTANDING_PAYMENT_CLAIMS_RELATED_TO_ILLEGAL_STATE_AID",
            "IS_SMALL_OR_MEDIUM_SIZED_BUSINESS",
            "HAD_FINANCIAL_DIFFICULTIES_LAST_YEAR",
            "IS_GROUP_COMPANY",
            "HAS_RECEIVED_OTHER_PUBLIC_SUPPORT",
            "AID_SCHEME_TONNAGE_TAX_REGIME",
            "AID_SCHEME_RULES_FOR_ELECTRIC_DELIVERY_TRUCKS",
            "AID_SCHEME_FOR_LONGTERM_INVESTMENTS",
            "AID_SCHEME_EMPLOYMENT_RELATED_OPTIONS_START_UP",
            "AID_SCHEME_TAX_FUN",
            "AID_SCHEME_FAVOURABLE_DEPRECIATION_RULES",
            "AID_SCHEME_REGIONALLY_DIFFERENTIATED_INSURANCE_CONTRIBUTIONS",
            "AID_SCHEME_FAVOURABLE_DETERMINED_LIST_PRICES_ELECTRIC_VEHICLES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_LEASING_ELECTRIC_CARS",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_BATTERIES",
            "AID_SCHEME_VAT_EXEMPTION_TURNOVER_ELECTRIC_NEWS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_INDUSTRIAL_SECTOR",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DISTRICT_HEATING",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_TARGET_ZONE",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_DATA_CENTRES",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_COMMERCIAL_VESSELS",
            "AID_SCHEME_REDUCED_ELECTRICITY_TAX_ENERGY_PRODUCTS",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_WOOD_INDUSTRY",
            "AID_SCHEME_REDUCED_BASIC_TAX_MINERAL_OIL_PIGMENT_INDUSTRY",
            "AID_SCHEME_EXEMPTION_CO2_TAX_MINERAL_OIL",
            "AID_SCHEME_EXEMPTION_CO2_TAX_GAS",
            "AID_SCHEME_EXEMPTION_NOX_DUTY",
            "AID_SCHEME_EXEMPTION_TRANSFER_FEE",
            "AID_SCHEME_REDUCED_ROAD_TRAFFIC_INSURANCE_TAX",
            "OTHER_CORRECTIONS",
            "YEARLY_DIVIDEND"
          ],
          "readOnly": true,
          "type": "string"
        },
        "postValue": {
          "readOnly": true,
          "type": "number"
        },
        "readOnly": {
          "readOnly": true,
          "type": "boolean"
        },
        "source": {
          "readOnly": true,
          "type": "string"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Person1881EntityDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PersonAutoCompleteDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "countryId": {
          "format": "int32",
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberMobile": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "reserved": {
          "type": "boolean"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "items": {
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PersonalIncome": {
      "properties": {
        "businessActivityType": {
          "enum": [
            "OTHER_COMMERCIAL_ACTIVITIES",
            "AGRICULTURE_HORTICULTURE_FUR_FARMING",
            "FISHING_AND_HUNTING_AT_SEA",
            "REINDEER_HUSBANDRY",
            "FAMILY_DAY_CARE_CENTRE_IN_OWN_HOME",
            "SLATE_QUARRYING",
            "FORESTRY"
          ],
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "incomeGroupId": {
          "format": "int32",
          "type": "integer"
        },
        "postType": {
          "enum": [
            "INTEREST_ON_ENTERPRISE_DEBT",
            "CAPITAL_INCOME",
            "CAPITAL_EXPENSES",
            "REDUCTION_AMOUNT_FOR_RENTED_PROPERTY",
            "GAINS_FROM_REALISATION_AGRICULTURE_OR_FORESTRY",
            "NUMBER_OF_MONTHS_WITH_OPERATIONS",
            "RISK_FREE_INTEREST_RATE",
            "ENTERPRISE_DEBT_OB",
            "ENTERPRISE_DEBT_CB",
            "PROFIT_SHARE_SPOUSE",
            "NEGATIVE_PERSONAL_INCOME_PREVIOUS_YEAR",
            "COORDINATION_ENK",
            "COORDINATION_ANS_DA",
            "COORDINATION_LOTT",
            "NEGATIVE_PERSONAL_INCOME_CARRIED_FORWARD_NEXT_YEAR",
            "BUSINESS_TYPE_DESCRIPTION",
            "DISTRIBUTE_INCOME",
            "NEGATIVE_PERSONAL_INCOME_PREVIOUS_YEAR_SPOUSE",
            "COORDINATION_ENK_SPOUSE",
            "COORDINATION_ANS_DA_SPOUSE",
            "COORDINATION_LOTT_SPOUSE",
            "NEGATIVE_PERSONAL_INCOME_CARRIED_FORWARD_NEXT_YEAR_SPOUSE"
          ],
          "type": "string"
        },
        "postValue": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "required": [
        "incomeGroupId",
        "postType",
        "postValue"
      ],
      "type": "object"
    },
    "PersonalIncomeOverview": {
      "properties": {
        "afterCoordination": {
          "readOnly": true,
          "type": "number"
        },
        "afterSharedWithSpouse": {
          "readOnly": true,
          "type": "number"
        },
        "balanceGroups": {
          "items": {
            "$ref": "#/definitions/BalanceGroup"
          },
          "type": "array"
        },
        "basisEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "basisForRiskFreeReturnExEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "basisForRiskFreeReturnIncEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "businessActivityDescription": {
          "readOnly": true,
          "type": "string"
        },
        "businessActivityType": {
          "enum": [
            "OTHER_COMMERCIAL_ACTIVITIES",
            "AGRICULTURE_HORTICULTURE_FUR_FARMING",
            "FISHING_AND_HUNTING_AT_SEA",
            "REINDEER_HUSBANDRY",
            "FAMILY_DAY_CARE_CENTRE_IN_OWN_HOME",
            "SLATE_QUARRYING",
            "FORESTRY"
          ],
          "type": "string"
        },
        "businessIncome": {
          "readOnly": true,
          "type": "number"
        },
        "businessIncomeAfterSharedWithSpouse": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedBusinessIncomeSpouse": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedPersonalIncomeSpouse": {
          "readOnly": true,
          "type": "number"
        },
        "correctedBusinessIncome": {
          "readOnly": true,
          "type": "number"
        },
        "deductionsForRiskFreeReturn": {
          "readOnly": true,
          "type": "number"
        },
        "incomeGroupId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "personalIncomeForTheYear": {
          "readOnly": true,
          "type": "number"
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/PersonalIncome"
          },
          "type": "array"
        },
        "riskFreeReturn": {
          "readOnly": true,
          "type": "number"
        },
        "sumClosingBalanceAfterEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "sumClosingBalanceBeforeEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "sumOpeningBalanceAfterEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "sumOpeningBalanceBeforeEnterpriseDebt": {
          "readOnly": true,
          "type": "number"
        },
        "validBasisForRiskFreeReturn": {
          "readOnly": true,
          "type": "boolean"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "PhonePrefixCountryInternal": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PickupPoint": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "transportType": {
          "$ref": "#/definitions/TransportType",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Posting": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "amortizationAccount": {
          "$ref": "#/definitions/Account",
          "description": "The Amortization account. AmortizationAccountId, amortizationStartDate and amortizationEndDate should be provided. If amortizationStartDate and amortizationEndDate are provided, while amortizationAccountId is NULL, then the default amortization account will be used."
        },
        "amortizationEndDate": {
          "type": "string"
        },
        "amortizationStartDate": {
          "description": "Amortization start date. AmortizationAccountId, amortizationStartDate and amortizationEndDate should be provided.",
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "amountGross": {
          "type": "number"
        },
        "amountGrossCurrency": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "closeGroup": {
          "$ref": "#/definitions/CloseGroup"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "date": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "externalRef": {
          "description": "External reference for identifying payment basis of the posting, e.g., KID, customer identification or credit note number.",
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "matched": {
          "readOnly": true,
          "type": "boolean"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "row": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "systemGenerated": {
          "readOnly": true,
          "type": "boolean"
        },
        "taxTransactionType": {
          "readOnly": true,
          "type": "string"
        },
        "taxTransactionTypeId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "termOfPayment": {
          "type": "string"
        },
        "type": {
          "enum": [
            "INCOMING_PAYMENT",
            "INCOMING_PAYMENT_OPPOSITE",
            "INVOICE_EXPENSE",
            "OUTGOING_INVOICE_CUSTOMER_POSTING",
            "WAGE"
          ],
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "Prediction": {
      "properties": {
        "confidence": {
          "type": "string"
        },
        "predictedValue": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrepareTaxcardsArgsInternal": {
      "properties": {
        "contactEmail": {
          "type": "string"
        },
        "contactEmployeeId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeIds": {
          "type": "string"
        },
        "mobilePhone": {
          "type": "string"
        },
        "mobilePhoneCountryId": {
          "format": "int32",
          "type": "integer"
        },
        "notificationType": {
          "type": "string"
        },
        "taxcardYear": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Price": {
      "properties": {
        "price": {
          "$ref": "#/definitions/TlxNumber"
        },
        "rushHoursToll": {
          "$ref": "#/definitions/RushHoursToll"
        },
        "vehicle": {
          "enum": [
            "NotSet",
            "CarDiesel",
            "CarGasolineOrHybrid",
            "CarZeroEmission",
            "TruckEuroV",
            "TruckEuroVI",
            "CarGeneral",
            "TruckGeneral"
          ],
          "type": "string"
        },
        "vehicleDescription": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Product": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "costExcludingVatCurrency": {
          "description": "Price purchase (cost) excluding VAT in the product's currency",
          "type": "number"
        },
        "costPrice": {
          "description": "Cost price of purchase",
          "readOnly": true,
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "discountGroup": {
          "$ref": "#/definitions/DiscountGroup"
        },
        "discountPrice": {
          "readOnly": true,
          "type": "number"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "displayNumber": {
          "readOnly": true,
          "type": "string"
        },
        "ean": {
          "maxLength": 14,
          "type": "string"
        },
        "elNumber": {
          "maxLength": 14,
          "readOnly": true,
          "type": "string"
        },
        "expenses": {
          "type": "number"
        },
        "expensesInPercent": {
          "readOnly": true,
          "type": "number"
        },
        "hasSupplierProductConnected": {
          "type": "boolean"
        },
        "hsnCode": {
          "maxLength": 20,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "image": {
          "$ref": "#/definitions/Document",
          "readOnly": true
        },
        "isDeletable": {
          "description": "For performance reasons, field is deprecated and it will always return false.",
          "type": "boolean"
        },
        "isInactive": {
          "type": "boolean"
        },
        "isStockItem": {
          "type": "boolean"
        },
        "mainSupplierProduct": {
          "$ref": "#/definitions/SupplierProduct",
          "description": "This feature is available only in pilot"
        },
        "markupListPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "markupNetPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "nrfNumber": {
          "maxLength": 14,
          "readOnly": true,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "priceExcludingVatCurrency": {
          "description": "Price of purchase excluding VAT in the product's currency",
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "description": "Price of purchase including VAT in the product's currency",
          "type": "number"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "profit": {
          "readOnly": true,
          "type": "number"
        },
        "profitInPercent": {
          "readOnly": true,
          "type": "number"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        },
        "stockOfGoods": {
          "description": "From January 23rd 2023 this field will be available only on demand",
          "readOnly": true,
          "type": "number"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "volume": {
          "type": "number"
        },
        "volumeUnit": {
          "enum": [
            "cm3",
            "dm3",
            "m3"
          ],
          "type": "string"
        },
        "weight": {
          "type": "number"
        },
        "weightUnit": {
          "enum": [
            "kg",
            "g",
            "hg"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductGroup": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "description": "Product group displayName",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isDeletable": {
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "description": "Product group name",
          "maxLength": 255,
          "type": "string"
        },
        "parentGroup": {
          "$ref": "#/definitions/ProductGroup",
          "description": "Product group parent"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ProductGroupRelation": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "productGroup": {
          "$ref": "#/definitions/ProductGroup"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "product",
        "productGroup"
      ],
      "type": "object"
    },
    "ProductImport": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "importFile": {
          "$ref": "#/definitions/Document",
          "readOnly": true
        },
        "productImportHeaders": {
          "items": {
            "$ref": "#/definitions/ProductImportHeader"
          },
          "readOnly": true,
          "type": "array"
        },
        "separator": {
          "enum": [
            "NONE",
            "COMMA",
            "SEMICOLON"
          ],
          "type": "string"
        },
        "status": {
          "enum": [
            "FILE_UPLOADED",
            "FIELDS_MAPPED",
            "IMPORT_COMPLETED",
            "IMPORT_ABORTED"
          ],
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductImportFieldDTO": {
      "properties": {
        "format": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mandatory": {
          "type": "boolean"
        },
        "sequence": {
          "format": "int32",
          "type": "integer"
        },
        "textKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProductImportHeader": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 250,
          "type": "string"
        },
        "orderOfColumn": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "productImport": {
          "$ref": "#/definitions/ProductImport",
          "readOnly": true
        },
        "sampleValue": {
          "maxLength": 250,
          "type": "string"
        },
        "suggestedColumnField": {
          "$ref": "#/definitions/ProductImportFieldDTO",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductImportHeaderFieldsRelation": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "field": {
          "$ref": "#/definitions/ProductImportFieldDTO"
        },
        "header": {
          "$ref": "#/definitions/ProductImportHeader"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "productImport": {
          "$ref": "#/definitions/ProductImport"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "field",
        "header",
        "productImport"
      ],
      "type": "object"
    },
    "ProductInventoryLocation": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "$ref": "#/definitions/InventoryLocation"
        },
        "isMainLocation": {
          "type": "boolean"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "stockOfGoods": {
          "readOnly": true,
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "inventory",
        "product"
      ],
      "type": "object"
    },
    "ProductLine": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "costCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "count": {
          "type": "number"
        },
        "counted": {
          "description": "If a line is counted or not - only for internal use; will return true/false based on whether the stocktaking is completed otherwise.",
          "readOnly": true,
          "type": "boolean"
        },
        "counter": {
          "$ref": "#/definitions/Employee",
          "description": "Who counted the line - only for internal use",
          "readOnly": true
        },
        "dateCounted": {
          "description": "When the line was counted - only for internal use",
          "format": "date-time",
          "readOnly": true,
          "type": "string"
        },
        "expectedStock": {
          "description": "For internal use only",
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "location": {
          "$ref": "#/definitions/InventoryLocation",
          "description": "Warehouse location",
          "readOnly": true
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "stocktaking": {
          "$ref": "#/definitions/Stocktaking"
        },
        "unitCostCurrency": {
          "description": "Unit price purchase (cost) excluding VAT in the order's currency",
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "product",
        "stocktaking"
      ],
      "type": "object"
    },
    "ProductPrice": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "costPrice": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Cost Price"
        },
        "fromDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "purchasePrice": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Purchase Price excluding VAT"
        },
        "purchasePriceCurrency": {
          "description": "Purchase Price (cost) excluding VAT in the product's currency",
          "type": "number"
        },
        "salesPriceExcludingVat": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Sales Price excluding VAT"
        },
        "salesPriceIncludingVat": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Sales Price including VAT"
        },
        "toDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProductSettings": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "productPurchase": {
          "type": "boolean"
        },
        "purchaseOrder": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "warehouse": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProductUnit": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "commonCode": {
          "maxLength": 50,
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "displayNameShort": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isDeletable": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        },
        "nameEN": {
          "maxLength": 255,
          "type": "string"
        },
        "nameShort": {
          "maxLength": 50,
          "type": "string"
        },
        "nameShortEN": {
          "maxLength": 50,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "commonCode",
        "name",
        "nameEN"
      ],
      "type": "object"
    },
    "ProductUnitMaster": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "commonCode": {
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isInactive": {
          "readOnly": true,
          "type": "boolean"
        },
        "name": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "nameShort": {
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "peppolName": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "peppolSymbol": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProfileDTO": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "menuItems": {
          "items": {
            "$ref": "#/definitions/MenuItem"
          },
          "type": "array"
        },
        "profileImageUrl": {
          "type": "string"
        },
        "site": {
          "type": "string"
        },
        "userLocale": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProfileLoginCompany": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isClientCompany": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProfitAndLoss": {
      "properties": {
        "amountToBePostedOnDeductionAccount": {
          "readOnly": true,
          "type": "number"
        },
        "amountToBePostedOnIncomeRecognitionAccount": {
          "readOnly": true,
          "type": "number"
        },
        "annualDeduction": {
          "readOnly": true,
          "type": "number"
        },
        "annualIncomeRecognition": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceLoss": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceProfit": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataOverviews": {
          "items": {
            "$ref": "#/definitions/GenericDataOverview"
          },
          "type": "array"
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceLoss": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceProfit": {
          "readOnly": true,
          "type": "number"
        },
        "postedClosingBalanceLoss": {
          "readOnly": true,
          "type": "number"
        },
        "postedClosingBalanceProfit": {
          "readOnly": true,
          "type": "number"
        },
        "postedOpeningBalanceLoss": {
          "readOnly": true,
          "type": "number"
        },
        "postedOpeningBalanceProfit": {
          "readOnly": true,
          "type": "number"
        },
        "sumLoss": {
          "readOnly": true,
          "type": "number"
        },
        "sumProfit": {
          "readOnly": true,
          "type": "number"
        },
        "sumProfitAndLoss": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "Project": {
      "properties": {
        "accessType": {
          "description": "READ/WRITE access on project",
          "enum": [
            "NONE",
            "READ",
            "WRITE"
          ],
          "type": "string"
        },
        "attention": {
          "$ref": "#/definitions/Contact",
          "description": "Customer in attention of person"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "contact": {
          "$ref": "#/definitions/Contact",
          "description": "Customer contact person."
        },
        "contributionMarginPercent": {
          "readOnly": true,
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The project's customer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "discountPercentage": {
          "description": "Project discount percentage.",
          "readOnly": true,
          "type": "number"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "displayNameFormat": {
          "description": "Defines project name presentation in overviews.",
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ],
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "externalAccountsNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "fixedprice": {
          "description": "Fixed price amount, in the project's currency.",
          "type": "number"
        },
        "forParticipantsOnly": {
          "description": "Set to true if only project participants can register information on the project",
          "type": "boolean"
        },
        "generalProjectActivitiesPerProjectOnly": {
          "description": "Set to true if a general project activity must be linked to project to allow time tracking.",
          "type": "boolean"
        },
        "hierarchyNameAndNumber": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "ignoreCompanyProductDiscountAgreement": {
          "type": "boolean"
        },
        "invoiceComment": {
          "description": "Comment for project invoices",
          "type": "string"
        },
        "invoiceDueDate": {
          "description": "invoice due date",
          "format": "int32",
          "type": "integer"
        },
        "invoiceReceiverEmail": {
          "description": "receiver email",
          "maxLength": 254,
          "type": "string"
        },
        "invoicingPlan": {
          "description": "Invoicing plans tied to the project",
          "items": {
            "$ref": "#/definitions/Invoice"
          },
          "readOnly": true,
          "type": "array"
        },
        "isClosed": {
          "type": "boolean"
        },
        "isFixedPrice": {
          "description": "Project is fixed price if set to true, hourly rate if set to false.",
          "type": "boolean"
        },
        "isInternal": {
          "type": "boolean"
        },
        "isOffer": {
          "readOnly": true,
          "type": "boolean"
        },
        "isPriceCeiling": {
          "description": "Set to true if an hourly rate project has a price ceiling.",
          "type": "boolean"
        },
        "isReadyForInvoicing": {
          "type": "boolean"
        },
        "mainProject": {
          "$ref": "#/definitions/Project"
        },
        "markUpFeesEarned": {
          "description": "Set mark-up (%) for fees earned.",
          "type": "number"
        },
        "markUpOrderLines": {
          "description": "Set mark-up (%) for order lines.",
          "type": "number"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "numberOfProjectParticipants": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfSubProjects": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "orderLines": {
          "description": "Order lines tied to the order",
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "participants": {
          "description": "Link to individual project participants.",
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          },
          "type": "array"
        },
        "preliminaryInvoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "priceCeilingAmount": {
          "description": "Price ceiling amount, in the project's currency.",
          "type": "number"
        },
        "projectActivities": {
          "description": "Project Activities",
          "items": {
            "$ref": "#/definitions/ProjectActivity"
          },
          "type": "array"
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "projectHourlyRates": {
          "description": "Project Rate Types tied to the project.",
          "items": {
            "$ref": "#/definitions/ProjectHourlyRate"
          },
          "type": "array"
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "reference": {
          "maxLength": 255,
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "useProductNetPrice": {
          "type": "boolean"
        },
        "vatType": {
          "$ref": "#/definitions/VatType",
          "description": "The default vat type for this project."
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "isInternal",
        "name",
        "projectManager",
        "startDate"
      ],
      "type": "object"
    },
    "ProjectAccess": {
      "properties": {
        "accessAttachments": {
          "enum": [
            "NONE",
            "READ",
            "WRITE"
          ],
          "type": "string"
        },
        "accessControlForms": {
          "enum": [
            "NONE",
            "READ",
            "WRITE"
          ],
          "type": "string"
        },
        "accessHours": {
          "enum": [
            "NONE",
            "READ",
            "WRITE"
          ],
          "type": "string"
        },
        "accessOrderLines": {
          "enum": [
            "NONE",
            "READ",
            "WRITE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectActivity": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity",
          "description": "Add existing project activity or create new project specific activity"
        },
        "budgetFeeCurrency": {
          "description": "Set budget fee",
          "type": "number"
        },
        "budgetHourlyRateCurrency": {
          "description": "Set budget hourly rate",
          "type": "number"
        },
        "budgetHours": {
          "description": "Set budget hours",
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isClosed": {
          "type": "boolean"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProjectBudgetStatus": {
      "properties": {
        "budgetTotalIncomeCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "totalTotalIncomeCurrency": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectCategory": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "ProjectControlForm": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "minLength": 1,
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "controlForm": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "signatureRequired": {
          "readOnly": true,
          "type": "boolean"
        },
        "signed": {
          "readOnly": true,
          "type": "boolean"
        },
        "title": {
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "title"
      ],
      "type": "object"
    },
    "ProjectControlFormType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProjectHourlyRate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "fixedRate": {
          "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE.",
          "type": "number"
        },
        "hourlyRateModel": {
          "description": "Defines the model used for the hourly rate.",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "projectSpecificRates": {
          "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
          "items": {
            "$ref": "#/definitions/ProjectSpecificRate"
          },
          "type": "array"
        },
        "showInProjectOrder": {
          "description": "Show on contract confirmation/offers",
          "type": "boolean"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "hourlyRateModel",
        "startDate"
      ],
      "type": "object"
    },
    "ProjectHourlyRateTemplate": {
      "properties": {
        "fixedRate": {
          "description": "Fixed Hourly rates if hourlyRateModel is TYPE_FIXED_HOURLY_RATE.",
          "type": "number"
        },
        "hourlyRateModel": {
          "description": "Defines the model used for the hourly rate.",
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ],
          "type": "string"
        },
        "projectSpecificRates": {
          "description": "Project specific rates if hourlyRateModel is TYPE_PROJECT_SPECIFIC_HOURLY_RATES. ",
          "items": {
            "$ref": "#/definitions/ProjectSpecificRateTemplate"
          },
          "type": "array"
        },
        "showInProjectOrder": {
          "description": "Show on contract confirmation/offers",
          "type": "boolean"
        },
        "startDate": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ProjectInvoiceDetails": {
      "properties": {
        "amountOrderLinesAndReinvoicing": {
          "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice.",
          "readOnly": true,
          "type": "number"
        },
        "amountOrderLinesAndReinvoicingCurrency": {
          "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "amountTravelReportsAndExpenses": {
          "description": "The amount of travel costs and expenses on the project invoice.",
          "readOnly": true,
          "type": "number"
        },
        "amountTravelReportsAndExpensesCurrency": {
          "description": "The amount of travel costs and expenses on the project invoice, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "feeAmount": {
          "description": "Fee amount of the project. For example: 100 NOK.",
          "readOnly": true,
          "type": "number"
        },
        "feeAmountCurrency": {
          "description": "Fee amount of the project in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "feeInvoiceText": {
          "description": "The fee comment on the project invoice.",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "includeHours": {
          "description": "Determines if hours should be included on the project invoice.",
          "readOnly": true,
          "type": "boolean"
        },
        "includeOnAccountBalance": {
          "description": "Determines if akonto should be included on the project invoice.",
          "readOnly": true,
          "type": "boolean"
        },
        "includeOrderLinesAndReinvoicing": {
          "description": "Determines if extra costs should be included on the project invoice.",
          "readOnly": true,
          "type": "boolean"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "invoiceText": {
          "description": "The comment on the project invoice.",
          "readOnly": true,
          "type": "string"
        },
        "markupAmount": {
          "description": "The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.",
          "readOnly": true,
          "type": "number"
        },
        "markupAmountCurrency": {
          "description": "The amount value of mark-up of amountFee on the project invoice, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "markupPercent": {
          "description": "The percentage value of mark-up of amountFee. For example: 10%.",
          "readOnly": true,
          "type": "number"
        },
        "onAccountBalanceAmount": {
          "description": "The akonto amount on the project invoice.",
          "readOnly": true,
          "type": "number"
        },
        "onAccountBalanceAmountCurrency": {
          "description": "The akonto amount on the project invoice in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Project",
          "description": "The Project related to the Invoice and ProjectInvoiceAdditionalInfo.",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType",
          "description": "The VAT type of the project invoice.",
          "readOnly": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProjectOnboardingSummaryDTO": {
      "properties": {
        "choices": {
          "items": {
            "$ref": "#/definitions/Choice"
          },
          "type": "array"
        },
        "observations": {
          "type": "string"
        }
      },
      "required": [
        "choices",
        "observations"
      ],
      "type": "object"
    },
    "ProjectOrderLine": {
      "properties": {
        "amountExcludingVatCurrency": {
          "description": "Total amount on order line excluding VAT in the order's currency",
          "readOnly": true,
          "type": "number"
        },
        "amountIncludingVatCurrency": {
          "description": "Total amount on order line including VAT in the order's currency",
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "The order line's currency. Determined by the order's currency.",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "description": "Discount given as a percentage (%)",
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "inventoryLocation": {
          "$ref": "#/definitions/InventoryLocation",
          "description": "Inventory location field -- beta program"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "isBudget": {
          "readOnly": true,
          "type": "boolean"
        },
        "isChargeable": {
          "type": "boolean"
        },
        "markup": {
          "description": "Markup given as a percentage (%)",
          "type": "number"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "unitCostCurrency": {
          "description": "Unit price purchase (cost) excluding VAT in the order's currency",
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "description": "Unit price of purchase excluding VAT in the order's currency",
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "project"
      ],
      "type": "object"
    },
    "ProjectOverviewAggregate": {
      "properties": {
        "accessType": {
          "description": "READ/WRITE access on project",
          "enum": [
            "NONE",
            "READ",
            "WRITE"
          ],
          "type": "string"
        },
        "completedBudget": {
          "type": "number"
        },
        "customer": {
          "$ref": "#/definitions/Company"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "displayName": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "expensesToApprove": {
          "type": "number"
        },
        "hoursToApprove": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceAkontoReserveAmountCurrency": {
          "type": "number"
        },
        "invoiceExtracostsReserveCurrency": {
          "type": "number"
        },
        "invoiceFeeReserveCurrency": {
          "type": "number"
        },
        "invoiceReserveTotalAmountCurrency": {
          "type": "number"
        },
        "invoicesToApprove": {
          "type": "number"
        },
        "isAuthProjectOverviewContractType": {
          "type": "boolean"
        },
        "isClosed": {
          "type": "boolean"
        },
        "isFixedPrice": {
          "type": "boolean"
        },
        "isInternal": {
          "type": "boolean"
        },
        "isProjectAttestor": {
          "type": "boolean"
        },
        "isReadyForInvoicing": {
          "type": "boolean"
        },
        "mainProject": {
          "$ref": "#/definitions/Project"
        },
        "name": {
          "type": "string"
        },
        "number": {
          "type": "string"
        },
        "plannedBudget": {
          "type": "number"
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "startDate": {
          "type": "string"
        },
        "vouchersToApprove": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectParticipant": {
      "properties": {
        "adminAccess": {
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProjectPeriodHourlyReport": {
      "properties": {
        "approvedButUnchargedHours": {
          "readOnly": true,
          "type": "number"
        },
        "chargeableHours": {
          "readOnly": true,
          "type": "number"
        },
        "nonApprovedHours": {
          "readOnly": true,
          "type": "number"
        },
        "nonChargeableHours": {
          "readOnly": true,
          "type": "number"
        },
        "registeredHours": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectPeriodInvoiced": {
      "properties": {
        "sumAmount": {
          "readOnly": true,
          "type": "number"
        },
        "sumAmountDue": {
          "readOnly": true,
          "type": "number"
        },
        "sumAmountDueOutstanding": {
          "readOnly": true,
          "type": "number"
        },
        "sumAmountOutstanding": {
          "readOnly": true,
          "type": "number"
        },
        "sumAmountPaid": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectPeriodInvoicingReserve": {
      "properties": {
        "invoiceAkontoReserveAmountCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "invoiceExtracostsReserveCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "invoiceFeeReserveCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "invoiceReserveTotalAmountCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "periodOrderLinesIncomeCurrency": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectPeriodMonthlyStatus": {
      "properties": {
        "costs": {
          "readOnly": true,
          "type": "number"
        },
        "dateFrom": {
          "readOnly": true,
          "type": "string"
        },
        "dateTo": {
          "readOnly": true,
          "type": "string"
        },
        "income": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectPeriodOverallStatus": {
      "properties": {
        "costs": {
          "readOnly": true,
          "type": "number"
        },
        "income": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectSettings": {
      "properties": {
        "allowMultipleProjectInvoiceVat": {
          "type": "boolean"
        },
        "approveHourLists": {
          "type": "boolean"
        },
        "approveInvoices": {
          "type": "boolean"
        },
        "autoCloseInvoicedProjects": {
          "type": "boolean"
        },
        "autoConnectIncomingOrderlineToProject": {
          "type": "boolean"
        },
        "autoGenerateProjectNumber": {
          "type": "boolean"
        },
        "autoGenerateStartingNumber": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "budgetOnSubcontracts": {
          "type": "boolean"
        },
        "controlFormsRequiredForHourTracking": {
          "description": "Control forms required for hour tracking",
          "items": {
            "$ref": "#/definitions/ProjectControlFormType"
          },
          "type": "array"
        },
        "controlFormsRequiredForInvoicing": {
          "description": "Control forms required for invoicing",
          "items": {
            "$ref": "#/definitions/ProjectControlFormType"
          },
          "type": "array"
        },
        "defaultProjectContractComment": {
          "type": "string"
        },
        "defaultProjectInvoicingComment": {
          "type": "string"
        },
        "emailOnDocuments": {
          "type": "string"
        },
        "emailOnProjectBudget": {
          "type": "string"
        },
        "emailOnProjectContract": {
          "type": "string"
        },
        "fixedPriceProjectsFeeCalcMethod": {
          "enum": [
            "FIXED_PRICE_PROJECTS_CALC_METHOD_INVOICED_FEE",
            "FIXED_PRICE_PROJECTS_CALC_METHOD_PERCENT_COMPLETED"
          ],
          "type": "string"
        },
        "fixedPriceProjectsInvoiceByProgress": {
          "type": "boolean"
        },
        "historicalInformation": {
          "type": "boolean"
        },
        "holidayPlan": {
          "type": "boolean"
        },
        "hourCostPercentage": {
          "type": "boolean"
        },
        "hourlyRateProjectsWriteUpDown": {
          "type": "boolean"
        },
        "isCurrentMonthDefaultPeriod": {
          "type": "boolean"
        },
        "markReadyForInvoicing": {
          "type": "boolean"
        },
        "mustApproveRegisteredHours": {
          "type": "boolean"
        },
        "onlyProjectActivitiesTimesheetRegistration": {
          "type": "boolean"
        },
        "onlyProjectMembersCanRegisterInfo": {
          "type": "boolean"
        },
        "projectBudgetReferenceFee": {
          "type": "boolean"
        },
        "projectCategories": {
          "type": "boolean"
        },
        "projectForecast": {
          "type": "boolean"
        },
        "projectHourlyRateModel": {
          "enum": [
            "TYPE_PREDEFINED_HOURLY_RATES",
            "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
            "TYPE_FIXED_HOURLY_RATE"
          ],
          "type": "string"
        },
        "projectNameScheme": {
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ],
          "type": "string"
        },
        "projectOrderLinesSortOrder": {
          "enum": [
            "SORT_ORDER_ID",
            "SORT_ORDER_DATE",
            "SORT_ORDER_PRODUCT",
            "SORT_ORDER_CUSTOM"
          ],
          "type": "string"
        },
        "projectTypeOfContract": {
          "enum": [
            "PROJECT_FIXED_PRICE",
            "PROJECT_HOUR_RATES"
          ],
          "type": "string"
        },
        "referenceFee": {
          "type": "boolean"
        },
        "resourceGroups": {
          "type": "boolean"
        },
        "resourcePlanPeriod": {
          "enum": [
            "PERIOD_MONTH",
            "PERIOD_WEEK",
            "PERIOD_DAY"
          ],
          "type": "string"
        },
        "resourcePlanning": {
          "type": "boolean"
        },
        "showProjectOnboarding": {
          "type": "boolean"
        },
        "showProjectOrderLinesToAllProjectParticipants": {
          "type": "boolean"
        },
        "showRecentlyClosedProjectsOnSupplierInvoice": {
          "type": "boolean"
        },
        "sortOrderProjects": {
          "enum": [
            "SORT_ORDER_NAME_AND_NUMBER",
            "SORT_ORDER_NAME"
          ],
          "type": "string"
        },
        "standardReinvoicing": {
          "type": "boolean"
        },
        "useLoggedInUserEmailOnDocuments": {
          "type": "boolean"
        },
        "useLoggedInUserEmailOnProjectBudget": {
          "type": "boolean"
        },
        "useLoggedInUserEmailOnProjectContract": {
          "type": "boolean"
        },
        "useProductNetPrice": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ProjectSpecificRate": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hourlyCostPercentage": {
          "type": "number"
        },
        "hourlyRate": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "projectHourlyRate": {
          "$ref": "#/definitions/ProjectHourlyRate"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "hourlyRate",
        "projectHourlyRate"
      ],
      "type": "object"
    },
    "ProjectSpecificRateTemplate": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hourlyCostPercentage": {
          "type": "number"
        },
        "hourlyRate": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ProjectTemplate": {
      "properties": {
        "attention": {
          "$ref": "#/definitions/Contact",
          "description": "Customer in attention of person"
        },
        "contact": {
          "$ref": "#/definitions/Contact",
          "description": "Customer contact person."
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "description": "The project's customer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "displayNameFormat": {
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ],
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "externalAccountsNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "fixedprice": {
          "description": "Fixed price amount, in the project's currency.",
          "type": "number"
        },
        "forParticipantsOnly": {
          "description": "Set to true if only project participants can register information on the project",
          "type": "boolean"
        },
        "generalProjectActivitiesPerProjectOnly": {
          "description": "Set to true if a general project activity must be linked to project to allow time tracking.",
          "type": "boolean"
        },
        "invoiceComment": {
          "description": "Comment for project invoices",
          "type": "string"
        },
        "isFixedPrice": {
          "description": "Project is fixed price if set to true, hourly rate if set to false.",
          "type": "boolean"
        },
        "isInternal": {
          "type": "boolean"
        },
        "isPriceCeiling": {
          "description": "Set to true if an hourly rate project has a price ceiling.",
          "type": "boolean"
        },
        "mainProject": {
          "$ref": "#/definitions/Project"
        },
        "markUpFeesEarned": {
          "description": "Set mark-up (%) for fees earned.",
          "type": "number"
        },
        "markUpOrderLines": {
          "description": "Set mark-up (%) for order lines.",
          "type": "number"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "priceCeilingAmount": {
          "description": "Price ceiling amount, in the project's currency.",
          "type": "number"
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "projectHourlyRates": {
          "description": "Project Rate Types tied to the project.",
          "items": {
            "$ref": "#/definitions/ProjectHourlyRateTemplate"
          },
          "type": "array"
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "reference": {
          "maxLength": 255,
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType",
          "description": "The default vat type for this project."
        }
      },
      "type": "object"
    },
    "Prospect": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "closedDate": {
          "type": "string"
        },
        "closedReason": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "competitor": {
          "maxLength": 255,
          "type": "string"
        },
        "createdDate": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "description": {
          "type": "string"
        },
        "finalAdditionalServicesValue": {
          "description": "Tripletex specific.",
          "type": "number"
        },
        "finalIncomeDate": {
          "description": "The estimated start date for income on the prospect.",
          "type": "string"
        },
        "finalInitialValue": {
          "description": "The estimated startup fee on this prospect.",
          "type": "number"
        },
        "finalMonthlyValue": {
          "description": "The estimated monthly fee on this prospect.",
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isClosed": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project",
          "description": "The project connected to this prospect."
        },
        "projectOffer": {
          "$ref": "#/definitions/Project",
          "description": "The project offer connected to this prospect."
        },
        "prospectType": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "salesEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "totalValue": {
          "description": "The estimated total fee on this prospect.",
          "readOnly": true,
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "createdDate"
      ],
      "type": "object"
    },
    "Providers": {
      "type": "object"
    },
    "PurchaseOrder": {
      "properties": {
        "attachment": {
          "$ref": "#/definitions/Document",
          "description": "The attachments on this PurchaseOrder (if any)",
          "readOnly": true
        },
        "attention": {
          "$ref": "#/definitions/Employee",
          "description": "Attention"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comments": {
          "description": "Delivery information and invoice comments",
          "type": "string"
        },
        "creationDate": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "Company currency"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address",
          "description": "Delivery address"
        },
        "deliveryDate": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department",
          "description": "Department/order"
        },
        "discount": {
          "description": "Discount Percentage",
          "type": "number"
        },
        "document": {
          "$ref": "#/definitions/Document",
          "description": "The PDF representing this PurchaseOrder",
          "readOnly": true
        },
        "ediDocument": {
          "$ref": "#/definitions/Document",
          "description": "The machine readable document (such as EHF or EFO/NELFO) this PurchaseOrder is based on (if any)",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "internalComment": {
          "type": "string"
        },
        "isClosed": {
          "type": "boolean"
        },
        "lastSentEmployeeName": {
          "type": "string"
        },
        "lastSentTimestamp": {
          "type": "string"
        },
        "number": {
          "description": "Purchase order number",
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "orderLines": {
          "description": "Order lines tied to the purchase order",
          "items": {
            "$ref": "#/definitions/PurchaseOrderline"
          },
          "readOnly": true,
          "type": "array"
        },
        "ourContact": {
          "$ref": "#/definitions/Employee"
        },
        "packingNoteMessage": {
          "description": "Message on packing note.Wholesaler specific.",
          "maxLength": 50,
          "type": "string"
        },
        "pickupPoint": {
          "$ref": "#/definitions/PickupPoint",
          "description": "Pickup point, wholesaler specific"
        },
        "project": {
          "$ref": "#/definitions/Project",
          "description": "Project/order"
        },
        "receivedDate": {
          "type": "string"
        },
        "receiverEmail": {
          "description": "Email when purchase order is send by email.",
          "maxLength": 100,
          "type": "string"
        },
        "restorder": {
          "$ref": "#/definitions/PurchaseOrder",
          "readOnly": true
        },
        "status": {
          "enum": [
            "STATUS_OPEN",
            "STATUS_SENT",
            "STATUS_RECEIVING",
            "STATUS_CONFIRMED_DEVIATION_DETECTED",
            "STATUS_DEVIATION_OPEN",
            "STATUS_DEVIATION_CONFIRMED",
            "STATUS_CLOSED",
            "STATUS_CANCELLED",
            "STATUS_CONFIRMED"
          ],
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "supplierContact": {
          "$ref": "#/definitions/Employee",
          "description": "Recipient when purchase order is send by email."
        },
        "transportType": {
          "$ref": "#/definitions/TransportType",
          "description": "Transport type"
        },
        "transporterMessage": {
          "description": "Message to transporter.Wholesaler specific.",
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "deliveryDate",
        "ourContact",
        "supplier"
      ],
      "type": "object"
    },
    "PurchaseOrderAddress": {
      "properties": {
        "addressLine1": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "bnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "city": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "customerVendor": {
          "$ref": "#/definitions/Customer"
        },
        "displayName": {
          "type": "string"
        },
        "displayNameInklMatrikkel": {
          "readOnly": true,
          "type": "string"
        },
        "fnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "gnr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "knr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        },
        "postalCode": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "snr": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "unitNumber": {
          "maxLength": 255,
          "minLength": 0,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "PurchaseOrderIncomingInvoiceRelation": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "orderOut": {
          "$ref": "#/definitions/PurchaseOrder"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher"
        }
      },
      "required": [
        "orderOut",
        "voucher"
      ],
      "type": "object"
    },
    "PurchaseOrderline": {
      "properties": {
        "amountExcludingVatCurrency": {
          "description": "Total amount on order line excluding VAT in the order's currency",
          "type": "number"
        },
        "amountIncludingVatCurrency": {
          "description": "Total amount on order line including VAT in the order's currency",
          "readOnly": true,
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "The order line's currency. Determined by the order's currency.",
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "description": "Discount given as a percentage (%)",
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "purchaseOrder": {
          "$ref": "#/definitions/PurchaseOrder",
          "description": "The purchase order to attach the orderline."
        },
        "quantityReceived": {
          "description": "Used if the Purchase Order has a Goods received.",
          "type": "number"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        },
        "supplierProduct": {
          "$ref": "#/definitions/SupplierProduct"
        },
        "unitCostCurrency": {
          "description": "Unit price purchase (cost) excluding VAT in the order's currency",
          "type": "number"
        },
        "unitListPriceCurrency": {
          "description": "Unit list price of purchase excluding VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO",
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "description": "Unit price of purchase excluding VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO",
          "type": "number"
        },
        "unitPriceIncVatCurrency": {
          "description": "Unit  price including VAT in the order's currency.If it's not specified,it takes the value from purchase price in productDTO",
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "purchaseOrder"
      ],
      "type": "object"
    },
    "RP2EmployeeAvailableTime": {
      "properties": {
        "duration": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationUnit": {
          "type": "string"
        },
        "employeeId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "periodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2EmployeeBookedTime": {
      "properties": {
        "duration": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationUnit": {
          "type": "string"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "periodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2EmployeeJob": {
      "properties": {
        "duration": {
          "$ref": "#/definitions/TlxNumber"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "type": "string"
        },
        "periodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "startDate": {
          "type": "string"
        },
        "subLabel": {
          "type": "string"
        },
        "subPeriodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2EmployeeJobMoveResponse": {
      "properties": {
        "employeeIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "jobId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2JobPatchTemplate": {
      "properties": {
        "activityId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "durationAmount": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationType": {
          "enum": [
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH"
          ],
          "type": "string"
        },
        "employeeIds": {
          "description": "List of employeeIds assigned to the job",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "projectId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2JobTemplate": {
      "properties": {
        "activityId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "durationAmount": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationType": {
          "enum": [
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH"
          ],
          "type": "string"
        },
        "employeeIds": {
          "description": "List of employeeIds assigned to the job",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "periodCount": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "projectId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2PermissionsDTO": {
      "properties": {
        "canBatchDelete": {
          "type": "boolean"
        },
        "canBatchEdit": {
          "type": "boolean"
        },
        "canBatchSelect": {
          "type": "boolean"
        },
        "canCreate": {
          "type": "boolean"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        },
        "canFilter": {
          "type": "boolean"
        },
        "canOpenJobs": {
          "type": "boolean"
        },
        "canSeeOtherEmployees": {
          "type": "boolean"
        },
        "canViewEmployees": {
          "type": "boolean"
        },
        "canViewProjects": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "RP2ProjectBookedTime": {
      "properties": {
        "duration": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationUnit": {
          "type": "string"
        },
        "periodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "projectId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2ProjectJob": {
      "properties": {
        "duration": {
          "$ref": "#/definitions/TlxNumber"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "label": {
          "type": "string"
        },
        "periodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "startDate": {
          "type": "string"
        },
        "subLabel": {
          "type": "string"
        },
        "subPeriodId": {
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2ProjectJobMoveResponse": {
      "properties": {
        "jobId": {
          "format": "int32",
          "type": "integer"
        },
        "projectId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RP2TotalTime": {
      "properties": {
        "duration": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationUnit": {
          "type": "string"
        },
        "periodId": {
          "format": "int32",
          "maximum": 7,
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RPJob": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "durationAmount": {
          "$ref": "#/definitions/TlxNumber"
        },
        "durationType": {
          "enum": [
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH"
          ],
          "type": "string"
        },
        "employees": {
          "items": {
            "$ref": "#/definitions/Employee"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "projectOrderIndex": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RPViewDTO": {
      "properties": {
        "periodType": {
          "enum": [
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH"
          ],
          "type": "string"
        },
        "startDate": {
          "format": "date",
          "type": "string"
        },
        "type": {
          "enum": [
            "EMPLOYEE",
            "PROJECT"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReconciliationOfEquityOverview": {
      "properties": {
        "calculatedClosingEquity": {
          "readOnly": true,
          "type": "number"
        },
        "changeOfEquities": {
          "items": {
            "$ref": "#/definitions/ChangeOfEquity"
          },
          "type": "array"
        },
        "closingEquity": {
          "readOnly": true,
          "type": "number"
        },
        "closingEquityDiff": {
          "readOnly": true,
          "type": "number"
        },
        "openingEquity": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "ReelDocumentationDTO": {
      "properties": {
        "descriptionKey": {
          "description": "The description text key",
          "type": "string"
        },
        "summaryKey": {
          "description": "The summary text key",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReelDomainDTO": {
      "properties": {
        "documentation": {
          "$ref": "#/definitions/ReelDocumentationDTO",
          "description": "The documentation for this domain"
        },
        "functions": {
          "description": "The functions of the domain",
          "items": {
            "$ref": "#/definitions/ReelFunctionDTO"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the domain",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the domain",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReelFunctionDTO": {
      "properties": {
        "documentation": {
          "$ref": "#/definitions/ReelDocumentationDTO",
          "description": "The documentation for this function"
        },
        "name": {
          "description": "The name of the function",
          "type": "string"
        },
        "namespace": {
          "description": "The domain namespace of the function",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RegulatoryReportingCode": {
      "properties": {
        "id": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Reminder": {
      "properties": {
        "bank": {
          "maxLength": 255,
          "type": "string"
        },
        "bankAccountIBAN": {
          "maxLength": 255,
          "type": "string"
        },
        "bankAccountNumber": {
          "maxLength": 255,
          "type": "string"
        },
        "bankAccountSWIFT": {
          "maxLength": 255,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "charge": {
          "description": "The fee part of the reminder, in the company's currency.",
          "readOnly": true,
          "type": "number"
        },
        "chargeCurrency": {
          "description": "The fee part of the reminder, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "comment": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "The reminder currency.",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "interestRate": {
          "description": "The reminder interest rate.",
          "readOnly": true,
          "type": "number"
        },
        "interests": {
          "description": "The interests part of the reminder.",
          "readOnly": true,
          "type": "number"
        },
        "kid": {
          "description": "KID - Kundeidentifikasjonsnummer.",
          "maxLength": 25,
          "type": "string"
        },
        "reminderDate": {
          "description": "Creation date of the invoice reminder.",
          "readOnly": true,
          "type": "string"
        },
        "termOfPayment": {
          "description": "The reminder term of payment date.",
          "type": "string"
        },
        "totalAmountCurrency": {
          "description": "The total amount to pay in reminder's currency.",
          "readOnly": true,
          "type": "number"
        },
        "totalCharge": {
          "description": "The total fee part of all reminders, in the company's currency.",
          "readOnly": true,
          "type": "number"
        },
        "totalChargeCurrency": {
          "description": "The total fee part of all reminders, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "type": {
          "enum": [
            "SOFT_REMINDER",
            "REMINDER",
            "NOTICE_OF_DEBT_COLLECTION",
            "DEBT_COLLECTION"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "termOfPayment",
        "type"
      ],
      "type": "object"
    },
    "ReminderDTO": {
      "properties": {
        "reminders": {
          "items": {
            "$ref": "#/definitions/ReminderWidgetDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReminderWidgetDTO": {
      "properties": {
        "deadline": {
          "format": "date",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RemunerationType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "nameNO": {
          "maxLength": 100,
          "type": "string"
        },
        "remunerationType": {
          "description": "Defines the remuneration type option. ",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "remunerationType"
      ],
      "type": "object"
    },
    "Report": {
      "properties": {
        "blueprint": {
          "$ref": "#/definitions/ReportBlueprintV1",
          "description": "blueprint"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "description": "Shortcut for Report description",
          "readOnly": true,
          "type": "string"
        },
        "helpComponent": {
          "description": "helpComponent",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "Shortcut for Report name",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportAccess": {
      "properties": {
        "grant": {
          "$ref": "#/definitions/ReportAuthorization",
          "description": "The relevant grant of permission, if applicable",
          "readOnly": true
        },
        "reason": {
          "description": "The reason for having access",
          "enum": [
            "Global",
            "Owner",
            "Administrator",
            "Shared",
            "None"
          ],
          "readOnly": true,
          "type": "string"
        },
        "report": {
          "$ref": "#/definitions/Report",
          "description": "The Report that this access description is for",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "ReportAuthorization": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "granter": {
          "$ref": "#/definitions/Employee",
          "description": "The one granting permission"
        },
        "granterDelegatorId": {
          "description": "If set specifies the delegator to the granter proxy employee.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "permission": {
          "description": "The specific permission this grant of authorization is for",
          "enum": [
            "Invalid",
            "ViewResult",
            "Owner"
          ],
          "type": "string"
        },
        "report": {
          "$ref": "#/definitions/Report",
          "description": "The target resource to be granted permissions for"
        },
        "status": {
          "description": "The status of this grant of authorization",
          "enum": [
            "Rejected",
            "Granted"
          ],
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/Employee",
          "description": "The one receiving permission"
        },
        "subjectDelegatorId": {
          "description": "If set specifies the delegator to the subject proxy employee.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "permission",
        "report",
        "status",
        "subject"
      ],
      "type": "object"
    },
    "ReportBlueprintV1": {
      "properties": {
        "cells": {
          "items": {
            "$ref": "#/definitions/CellBlueprintV1"
          },
          "type": "array"
        },
        "columns": {
          "items": {
            "$ref": "#/definitions/HeaderBlueprintV1"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "rows": {
          "items": {
            "$ref": "#/definitions/HeaderBlueprintV1"
          },
          "type": "array"
        },
        "settings": {
          "$ref": "#/definitions/ReportSettings"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportClientAccess": {
      "properties": {
        "clientId": {
          "description": "The id of the client these ReportAccess are for",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "clientName": {
          "description": "The name of the client these ReportAccess are for",
          "readOnly": true,
          "type": "string"
        },
        "reportAccess": {
          "description": "All ReportAccess for this client",
          "items": {
            "$ref": "#/definitions/ReportAccess"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "ReportFilterAccountV3": {
      "properties": {
        "rangeFilters": {
          "items": {
            "$ref": "#/definitions/ReportFilterRange"
          },
          "type": "array"
        },
        "singularFilters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterActivity": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterCustomer": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterDepartment": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterEmployee": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterGeneral": {
      "properties": {
        "expression": {
          "type": "string"
        },
        "limit": {
          "format": "int64",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterPeriod": {
      "properties": {
        "constrainEndToInterval": {
          "type": "boolean"
        },
        "duration": {
          "$ref": "#/definitions/ReportFilterPeriodDatum"
        },
        "end": {
          "format": "date",
          "type": "string"
        },
        "offset": {
          "$ref": "#/definitions/ReportFilterPeriodDatum"
        },
        "start": {
          "format": "date",
          "type": "string"
        },
        "type": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterPeriodDatum": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterProduct": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterProject": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterRange": {
      "properties": {
        "from": {
          "format": "int32",
          "type": "integer"
        },
        "to": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterSingular": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportFilterSupplier": {
      "properties": {
        "filters": {
          "items": {
            "$ref": "#/definitions/ReportFilterSingular"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportGroupAutoGroup": {
      "properties": {
        "defaultOrder": {
          "enum": [
            "Ascending",
            "Descending"
          ],
          "type": "string"
        },
        "orderBy": {
          "items": {
            "$ref": "#/definitions/ReportGroupAutoGroupOrderBy"
          },
          "type": "array"
        },
        "type": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportGroupAutoGroupOrderBy": {
      "properties": {
        "expression": {
          "type": "string"
        },
        "order": {
          "enum": [
            "Ascending",
            "Descending"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportGroupFilter": {
      "properties": {
        "account": {
          "$ref": "#/definitions/ReportFilterAccountV3"
        },
        "activity": {
          "$ref": "#/definitions/ReportFilterActivity"
        },
        "customer": {
          "$ref": "#/definitions/ReportFilterCustomer"
        },
        "department": {
          "$ref": "#/definitions/ReportFilterDepartment"
        },
        "employee": {
          "$ref": "#/definitions/ReportFilterEmployee"
        },
        "general": {
          "$ref": "#/definitions/ReportFilterGeneral"
        },
        "period": {
          "$ref": "#/definitions/ReportFilterPeriod"
        },
        "product": {
          "$ref": "#/definitions/ReportFilterProduct"
        },
        "project": {
          "$ref": "#/definitions/ReportFilterProject"
        },
        "supplier": {
          "$ref": "#/definitions/ReportFilterSupplier"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportResult": {
      "properties": {
        "columnDepth": {
          "format": "int32",
          "type": "integer"
        },
        "columnHeaders": {
          "items": {
            "$ref": "#/definitions/ReportResultColumnHeader"
          },
          "type": "array"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "rowDepth": {
          "format": "int32",
          "type": "integer"
        },
        "rowHeaders": {
          "items": {
            "$ref": "#/definitions/ReportResultRowHeader"
          },
          "type": "array"
        },
        "tableContent": {
          "items": {
            "items": {
              "$ref": "#/definitions/ReportResultCell"
            },
            "type": "array"
          },
          "type": "array"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportResultCell": {
      "properties": {
        "formatted": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "style": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "$ref": "#/definitions/ReportResultCellValue"
        }
      },
      "type": "object"
    },
    "ReportResultCellValue": {
      "properties": {
        "type": {
          "enum": [
            "NULL",
            "NUMBER",
            "STRING",
            "BOOLEAN",
            "DATE",
            "ERROR",
            "REFERENCE",
            "ARRAY",
            "OBJECT"
          ],
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "ReportResultColumnHeader": {
      "properties": {
        "autoGroupType": {
          "format": "int32",
          "type": "integer"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/ReportResultColumnHeader"
          },
          "type": "array"
        },
        "depth": {
          "format": "int32",
          "type": "integer"
        },
        "formatted": {
          "type": "string"
        },
        "initiallyExpanded": {
          "type": "boolean"
        },
        "leafCount": {
          "format": "int32",
          "type": "integer"
        },
        "link": {
          "type": "string"
        },
        "style": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "$ref": "#/definitions/ReportResultCellValue"
        }
      },
      "type": "object"
    },
    "ReportResultEnvelope": {
      "properties": {
        "access": {
          "$ref": "#/definitions/ReportAccess",
          "description": "Metadata of what Report this render is for and how it is accessible",
          "readOnly": true
        },
        "result": {
          "$ref": "#/definitions/ReportResult",
          "description": "The Report result",
          "readOnly": true
        },
        "settings": {
          "$ref": "#/definitions/ReportSettings",
          "description": "Metadata describing the report settings",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "ReportResultParameters": {
      "properties": {
        "expandState": {
          "items": {
            "type": "boolean"
          },
          "type": "array"
        },
        "filter": {
          "$ref": "#/definitions/ReportGroupFilter"
        }
      },
      "type": "object"
    },
    "ReportResultRowHeader": {
      "properties": {
        "autoGroupType": {
          "format": "int32",
          "type": "integer"
        },
        "children": {
          "items": {
            "$ref": "#/definitions/ReportResultRowHeader"
          },
          "type": "array"
        },
        "depth": {
          "format": "int32",
          "type": "integer"
        },
        "formatted": {
          "type": "string"
        },
        "initiallyExpanded": {
          "type": "boolean"
        },
        "leafCount": {
          "format": "int32",
          "type": "integer"
        },
        "link": {
          "type": "string"
        },
        "style": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "$ref": "#/definitions/ReportResultCellValue"
        }
      },
      "type": "object"
    },
    "ReportSettings": {
      "properties": {
        "filters": {
          "$ref": "#/definitions/ReportSettingsFilters"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportSettingsFilters": {
      "properties": {
        "options": {
          "$ref": "#/definitions/ReportSettingsFilters"
        },
        "order": {
          "items": {
            "enum": [
              "period",
              "account",
              "customer",
              "supplier",
              "employee",
              "department",
              "project",
              "product",
              "activity"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportSettingsFiltersOptionsPeriod": {
      "properties": {
        "divisions": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "end": {
          "format": "date",
          "type": "string"
        },
        "initialValueProvider": {
          "enum": [
            "All",
            "ThisDay",
            "ThisWeek",
            "NextSevenDays",
            "NextThirtyDays",
            "ThisMonth",
            "ThisYear",
            "SoFarThisWeek",
            "SoFarThisMonth",
            "SoFarThisYear"
          ],
          "type": "string"
        },
        "shortcuts": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "start": {
          "format": "date",
          "type": "string"
        },
        "stepSize": {
          "enum": [
            "Day",
            "Week",
            "Month",
            "WageTerm",
            "VatTerm",
            "Year"
          ],
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ReportingCompanyInternal": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RequestlogModel": {
      "properties": {
        "authorizationManager": {
          "$ref": "#/definitions/DatabaseComponentAuthorizationManagerRequestlogModel"
        },
        "authorizationManagerForCsvPrinter": {
          "$ref": "#/definitions/AuthorizationManager"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "type": "array"
        },
        "clientId": {
          "type": "string"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "createLog": {
          "$ref": "#/definitions/RequestlogModel"
        },
        "createLogAsString": {
          "type": "string"
        },
        "createLogId": {
          "format": "int64",
          "type": "integer"
        },
        "deleteLog": {
          "$ref": "#/definitions/RequestlogModel"
        },
        "deleteLogAsString": {
          "type": "string"
        },
        "deleteLogId": {
          "format": "int64",
          "type": "integer"
        },
        "deleted": {
          "type": "boolean"
        },
        "dirty": {
          "type": "boolean"
        },
        "dirtyProperties": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        },
        "displayName": {
          "type": "string"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "guiId": {
          "format": "int32",
          "type": "integer"
        },
        "guiRevision": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "longId": {
          "format": "int64",
          "type": "integer"
        },
        "method": {
          "type": "string"
        },
        "new": {
          "type": "boolean"
        },
        "querystring": {
          "type": "string"
        },
        "requesturi": {
          "type": "string"
        },
        "revision": {
          "format": "int32",
          "type": "integer"
        },
        "selected": {
          "type": "boolean"
        },
        "time": {
          "format": "date-time",
          "type": "string"
        },
        "tripletexEmployeeId": {
          "format": "int32",
          "type": "integer"
        },
        "updateLog": {
          "$ref": "#/definitions/RequestlogModel"
        },
        "updateLogAsString": {
          "type": "string"
        },
        "updateLogId": {
          "format": "int64",
          "type": "integer"
        },
        "urlDetails": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourceMessages": {
      "properties": {
        "en": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of key value pairs for English text",
          "type": "object"
        },
        "no": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of key value pairs for Norwegian text",
          "type": "object"
        },
        "se": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of key value pairs for Swedish text",
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResourceMessagesArgs": {
      "properties": {
        "keys": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResourcePlanActivity": {
      "properties": {
        "activityId": {
          "format": "int32",
          "type": "integer"
        },
        "activityName": {
          "type": "string"
        },
        "employeeEntries": {
          "description": "List of EmployeeResourcePlanDTO",
          "items": {
            "$ref": "#/definitions/ResourcePlanEmployee"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResourcePlanBudget": {
      "properties": {
        "activityEntries": {
          "description": "List of ActivityResourcePlanDTO",
          "items": {
            "$ref": "#/definitions/ResourcePlanActivity"
          },
          "type": "array"
        },
        "periodEnd": {
          "type": "string"
        },
        "periodStart": {
          "type": "string"
        },
        "periodType": {
          "enum": [
            "HOUR",
            "DAY",
            "WEEK",
            "MONTH"
          ],
          "type": "string"
        },
        "projectId": {
          "format": "int32",
          "type": "integer"
        },
        "projectName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourcePlanEmployee": {
      "properties": {
        "budget": {
          "$ref": "#/definitions/TlxNumber"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeName": {
          "type": "string"
        },
        "hoursEntries": {
          "description": "List of HoursResourcePlanDTO",
          "items": {
            "$ref": "#/definitions/ResourcePlanHours"
          },
          "type": "array"
        },
        "remaining": {
          "$ref": "#/definitions/TlxNumber"
        },
        "totalAllocated": {
          "$ref": "#/definitions/TlxNumber"
        },
        "totalHours": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "ResourcePlanHours": {
      "properties": {
        "allocatedHours": {
          "$ref": "#/definitions/TlxNumber"
        },
        "label": {
          "type": "string"
        },
        "workedHours": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "ResponseWrapper": {
      "properties": {
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAccommodationAllowance": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AccommodationAllowance"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAccommodationAndRestaurant": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AccommodationAndRestaurant"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAccount": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Account"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAccountClosureFeedback": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AccountClosureFeedback"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAccountSpecification": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AccountSpecification"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAccountingPeriod": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AccountingPeriod"
        }
      },
      "type": "object"
    },
    "ResponseWrapperActivity": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Activity"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAdditionalServiceOrderLineDTO[]": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/AdditionalServiceOrderLineDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAddon": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Addon"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAddonStatusType": {
      "properties": {
        "value": {
          "enum": [
            "IN_DEVELOPMENT",
            "PENDING",
            "REJECTED",
            "APPROVED"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAdvancedPaymentWidget": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AdvancedPaymentWidget"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAltinnCompanyModule": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AltinnCompanyModule"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAltinnInstance": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AltinnInstance"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAnnualAccount": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AnnualAccount"
        }
      },
      "type": "object"
    },
    "ResponseWrapperApiConsumer": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ApiConsumer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperApproveResponseDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ApproveResponseDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAprilaCashCreditApplicationResponseDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AprilaCashCreditApplicationResponseDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperArchiveModelTypes": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ArchiveModelTypes"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAsset": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Asset"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAssetOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AssetOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAuthConfigDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AuthConfigDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAutoLogin": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AutoLogin"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAutoPayStatus": {
      "properties": {
        "value": {
          "enum": [
            "OK",
            "NOT_ACTIVE",
            "SERVICE_DOWN"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResponseWrapperAutomationSettingsDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/AutomationSettingsDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBalanceSheet": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BalanceSheet"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBalanceSheetSettingsDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BalanceSheetSettingsDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBank": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Bank"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankAgreementDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankAgreementDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankBalanceEstimation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankBalanceEstimation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankDashboardAdvice": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankDashboardAdvice"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankOnboardingDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankOnboardingDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankReconciliation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankReconciliationMatch": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationMatch"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankReconciliationMatchesCounter": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationMatchesCounter"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankReconciliationPaymentType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankReconciliationSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankStatement": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankStatement"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankStatementBalance": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankStatementBalance"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankTransaction": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankTransaction"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankTransactionAggregates": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankTransactionAggregates"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBankingSummaryDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BankingSummaryDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBanner": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Banner"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBasicData": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BasicData"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBigDecimal": {
      "properties": {
        "value": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBoolean": {
      "properties": {
        "value": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ResponseWrapperBringCredentials": {
      "properties": {
        "value": {
          "$ref": "#/definitions/BringCredentials"
        }
      },
      "type": "object"
    },
    "ResponseWrapperChecklist": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Checklist"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCheckout": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Checkout"
        }
      },
      "type": "object"
    },
    "ResponseWrapperClientAccessTemplate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ClientAccessTemplate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCloseGroup": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CloseGroup"
        }
      },
      "type": "object"
    },
    "ResponseWrapperComment": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Comment"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCommercialVehicle": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CommercialVehicle"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCompany": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Company"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCompanyAuthorityDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyAuthorityDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCompanyChooserDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyChooserDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCompanyHoliday": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyHoliday"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCompanyHolidays": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyHolidays"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCompanyStandardTime": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyStandardTime"
        }
      },
      "type": "object"
    },
    "ResponseWrapperConsumerToken": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ConsumerToken"
        }
      },
      "type": "object"
    },
    "ResponseWrapperContact": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Contact"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCost": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Cost"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCountry": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Country"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCurrency": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Currency"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCurrencyExchangeRate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CurrencyExchangeRate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCustomer": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Customer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCustomerCategory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomerCategory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCustomerReceivable": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomerReceivable"
        }
      },
      "type": "object"
    },
    "ResponseWrapperCustomizedChecklistProperty": {
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomizedChecklistProperty"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDashboardContextDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DashboardContextDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDashboardDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DashboardDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDate": {
      "properties": {
        "value": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDeliveryAddress": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DeliveryAddress"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDepartment": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Department"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDeviation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Deviation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDifferencesOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DifferencesOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDiscountGroup": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DiscountGroup"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDisposition": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Disposition"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDistributionKey": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DistributionKey"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDividend": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Dividend"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDivision": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Division"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDocument": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Document"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDocumentArchive": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DocumentArchive"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDownloadedBrreg": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DownloadedBrreg"
        }
      },
      "type": "object"
    },
    "ResponseWrapperDrivingStop": {
      "properties": {
        "value": {
          "$ref": "#/definitions/DrivingStop"
        }
      },
      "type": "object"
    },
    "ResponseWrapperElectronicSupportDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ElectronicSupportDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployee": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Employee"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployeeCategory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeCategory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployeeLoginInfo": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeLoginInfo"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployeePreferences": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeePreferences"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployeeToken": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeToken"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployeeTokenBundle": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeTokenBundle"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmployment": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Employment"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEmploymentDetails": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EmploymentDetails"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEntitlement": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Entitlement"
        }
      },
      "type": "object"
    },
    "ResponseWrapperEventInfoDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/EventInfoDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperExternalProduct": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ExternalProduct"
        }
      },
      "type": "object"
    },
    "ResponseWrapperFavoriteMenu": {
      "properties": {
        "value": {
          "$ref": "#/definitions/FavoriteMenu"
        }
      },
      "type": "object"
    },
    "ResponseWrapperFundingPartnerApplication": {
      "properties": {
        "value": {
          "$ref": "#/definitions/FundingPartnerApplication"
        }
      },
      "type": "object"
    },
    "ResponseWrapperFundingPartnerQualify": {
      "properties": {
        "value": {
          "$ref": "#/definitions/FundingPartnerQualify"
        }
      },
      "type": "object"
    },
    "ResponseWrapperGenericDataOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GenericDataOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperGoodsReceipt": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GoodsReceipt"
        }
      },
      "type": "object"
    },
    "ResponseWrapperGoodsReceiptLine": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GoodsReceiptLine"
        }
      },
      "type": "object"
    },
    "ResponseWrapperGroupContributions": {
      "properties": {
        "value": {
          "$ref": "#/definitions/GroupContributions"
        }
      },
      "type": "object"
    },
    "ResponseWrapperHelpCenterArticles": {
      "properties": {
        "value": {
          "$ref": "#/definitions/HelpCenterArticles"
        }
      },
      "type": "object"
    },
    "ResponseWrapperHistoricalPosting": {
      "properties": {
        "value": {
          "$ref": "#/definitions/HistoricalPosting"
        }
      },
      "type": "object"
    },
    "ResponseWrapperHourlyCostAndRate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/HourlyCostAndRate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperIdPortenLogin": {
      "properties": {
        "value": {
          "$ref": "#/definitions/IdPortenLogin"
        }
      },
      "type": "object"
    },
    "ResponseWrapperIdPortenLoginStatus": {
      "properties": {
        "value": {
          "$ref": "#/definitions/IdPortenLoginStatus"
        }
      },
      "type": "object"
    },
    "ResponseWrapperIncomeAndCostSummaryDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/IncomeAndCostSummaryDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperIncomeStatement": {
      "properties": {
        "value": {
          "$ref": "#/definitions/IncomeStatement"
        }
      },
      "type": "object"
    },
    "ResponseWrapperIncomingInvoicePaymentHistory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/IncomingInvoicePaymentHistory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInteger": {
      "properties": {
        "value": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInventoriesOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InventoriesOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInventory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Inventory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInventoryLocation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InventoryLocation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoice": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Invoice"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoiceOrderLineDTO[]": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/InvoiceOrderLineDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoiceRemark": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InvoiceRemark"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoiceSendTypeDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InvoiceSendTypeDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoiceSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InvoiceSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoiceSummaryDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InvoiceSummaryDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperInvoiceTemplateRenderer": {
      "properties": {
        "value": {
          "$ref": "#/definitions/InvoiceTemplateRenderer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLeaveOfAbsence": {
      "properties": {
        "value": {
          "$ref": "#/definitions/LeaveOfAbsence"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLegacyAddress": {
      "properties": {
        "value": {
          "$ref": "#/definitions/LegacyAddress"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLegacyProfileDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/LegacyProfileDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLicenseDTO[]": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/License"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListAccountantClientAccessModel": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/AccountantClientAccessModel"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListBankBalanceEstimation": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/BankBalanceEstimation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListClientAccessTemplate": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ClientAccessTemplate"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListClientForApproval": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ClientForApproval"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListClientForRemit": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ClientForRemit"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListClientForReview": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ClientForReview"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListClientInbox": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ClientInbox"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListCompanyDTO": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/CompanyDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListDocumentationGenericData": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/DocumentationGenericData"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListElectronicSupportDTO": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ElectronicSupportDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListEmployment": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/Employment"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListFileIdForIncomingPaymentsDTO": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/FileIdForIncomingPaymentsDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListInteger": {
      "properties": {
        "value": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListJob": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/Job"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListPersonalIncomeOverview": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/PersonalIncomeOverview"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListProductImportFieldDTO": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/ProductImportFieldDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListRegulatoryReportingCode": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/RegulatoryReportingCode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListRoleCategoryContainerDTO": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/RoleCategoryContainerDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListSalaryV2Employee": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/SalaryV2Employee"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListSalaryV2EmployeeToEmploymentsRelationship": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/SalaryV2EmployeeToEmploymentsRelationship"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListSalaryV2PaymentType": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/SalaryV2PaymentType"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListSalaryV2Voucher": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/SalaryV2Voucher"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListString": {
      "properties": {
        "value": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListTodoListAmelding": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/TodoListAmelding"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListTodoListAnnualAccounts": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/TodoListAnnualAccounts"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListTodoListHarmonization": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/TodoListHarmonization"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListTodoListPeriodOverview": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/TodoListPeriodOverview"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListTodoListVat": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/TodoListVat"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperListTodoListWageTransaction": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/TodoListWageTransaction"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLoggedInUserInfoDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/LoggedInUserInfoDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLogisticsSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/LogisticsSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperLong": {
      "properties": {
        "value": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMapFeatureBoolean": {
      "properties": {
        "value": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMapIntegerTlxNumber": {
      "properties": {
        "value": {
          "additionalProperties": {
            "$ref": "#/definitions/TlxNumber"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMapPilotFeatureBoolean": {
      "properties": {
        "value": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMapStringBoolean": {
      "properties": {
        "value": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMapStringEventInfoDescription": {
      "properties": {
        "value": {
          "additionalProperties": {
            "$ref": "#/definitions/EventInfoDescription"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMenu": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Menu"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMileageAllowance": {
      "properties": {
        "value": {
          "$ref": "#/definitions/MileageAllowance"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMobileAppSpecificRightsInfo": {
      "properties": {
        "value": {
          "$ref": "#/definitions/MobileAppSpecificRightsInfo"
        }
      },
      "type": "object"
    },
    "ResponseWrapperModules": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Modules"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMonthlyStatus": {
      "properties": {
        "value": {
          "$ref": "#/definitions/MonthlyStatus"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMySubscriptionAccountInfoDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/MySubscriptionAccountInfoDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperMySubscriptionModuleDTO[]": {
      "properties": {
        "value": {
          "items": {
            "$ref": "#/definitions/MySubscriptionModuleDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResponseWrapperNextOfKin": {
      "properties": {
        "value": {
          "$ref": "#/definitions/NextOfKin"
        }
      },
      "type": "object"
    },
    "ResponseWrapperNoteContainer": {
      "properties": {
        "value": {
          "$ref": "#/definitions/NoteContainer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperNoteOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/NoteOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperNotification": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Notification"
        }
      },
      "type": "object"
    },
    "ResponseWrapperObject": {
      "properties": {
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "ResponseWrapperOccupationCode": {
      "properties": {
        "value": {
          "$ref": "#/definitions/OccupationCode"
        }
      },
      "type": "object"
    },
    "ResponseWrapperOrder": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Order"
        }
      },
      "type": "object"
    },
    "ResponseWrapperOrderGroup": {
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderGroup"
        }
      },
      "type": "object"
    },
    "ResponseWrapperOrderLine": {
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderLine"
        }
      },
      "type": "object"
    },
    "ResponseWrapperOrderOffer": {
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderOffer"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPageOptions": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PageOptions"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPassenger": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Passenger"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPaymentDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPaymentType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPaymentTypeOut": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentTypeOut"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPayslip": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Payslip"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPensionScheme": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PensionScheme"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPerDiemCompensation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PerDiemCompensation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPersonalIncomeOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PersonalIncomeOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPhonePrefixCountryInternal": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PhonePrefixCountryInternal"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPickupPoint": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PickupPoint"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPosting": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Posting"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProduct": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Product"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductGroup": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductGroup"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductGroupRelation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductGroupRelation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductImport": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductImport"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductInventoryLocation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductInventoryLocation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductLine": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductLine"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductUnit": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductUnit"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProductUnitMaster": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductUnitMaster"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProfileDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProfileDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProfitAndLoss": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProfitAndLoss"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProject": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Project"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectAccess": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectAccess"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectActivity": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectActivity"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectBudgetStatus": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectBudgetStatus"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectCategory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectCategory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectControlForm": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectControlForm"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectControlFormType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectControlFormType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectHourlyRate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectHourlyRate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectInvoiceDetails": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectInvoiceDetails"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectOnboardingSummaryDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectOnboardingSummaryDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectOrderLine": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectOrderLine"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectParticipant": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectParticipant"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectPeriodHourlyReport": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodHourlyReport"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectPeriodInvoiced": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodInvoiced"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectPeriodInvoicingReserve": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodInvoicingReserve"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectPeriodOverallStatus": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectPeriodOverallStatus"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectSpecificRate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectSpecificRate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProjectTemplate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectTemplate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperProspect": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Prospect"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPurchaseOrder": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrder"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPurchaseOrderAddress": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrderAddress"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPurchaseOrderIncomingInvoiceRelation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperPurchaseOrderline": {
      "properties": {
        "value": {
          "$ref": "#/definitions/PurchaseOrderline"
        }
      },
      "type": "object"
    },
    "ResponseWrapperRP2EmployeeJobMoveResponse": {
      "properties": {
        "value": {
          "$ref": "#/definitions/RP2EmployeeJobMoveResponse"
        }
      },
      "type": "object"
    },
    "ResponseWrapperRP2JobTemplate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/RP2JobTemplate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperRP2PermissionsDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/RP2PermissionsDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperRP2ProjectJobMoveResponse": {
      "properties": {
        "value": {
          "$ref": "#/definitions/RP2ProjectJobMoveResponse"
        }
      },
      "type": "object"
    },
    "ResponseWrapperRPJob": {
      "properties": {
        "value": {
          "$ref": "#/definitions/RPJob"
        }
      },
      "type": "object"
    },
    "ResponseWrapperRPViewDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/RPViewDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReconciliationOfEquityOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ReconciliationOfEquityOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReelDomainDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ReelDomainDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReminder": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Reminder"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReminderDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ReminderDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReport": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Report"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReportAccess": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ReportAccess"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReportAuthorization": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ReportAuthorization"
        }
      },
      "type": "object"
    },
    "ResponseWrapperReportResultEnvelope": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ReportResultEnvelope"
        }
      },
      "type": "object"
    },
    "ResponseWrapperResourceMessages": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ResourceMessages"
        }
      },
      "type": "object"
    },
    "ResponseWrapperResourcePlanBudget": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ResourcePlanBudget"
        }
      },
      "type": "object"
    },
    "ResponseWrapperResultBudget": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ResultBudget"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryCompilation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryCompilation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalarySettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalarySpecification": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySpecification"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalarySummaryDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySummaryDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryTaxcardInternal": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryTaxcardInternal"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryTransaction": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryTransaction"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Employee": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Employee"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Modules": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Modules"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Overview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Overview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2OverviewData": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2OverviewData"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Payment": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Payment"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Settings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Settings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Specification": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Specification"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Supplement": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Supplement"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Transaction": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Transaction"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2TravelExpense": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2TravelExpense"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Type": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Type"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalaryV2Voucher": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryV2Voucher"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesForceAccountInfo": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceAccountInfo"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesForceCustomerStats": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceCustomerStats"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesForceEmployee": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceEmployee"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesForceEmployeeRole": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceEmployeeRole"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesForceTripletexSalesModulePurchase": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceTripletexSalesModulePurchase"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesForceUserOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesForceUserOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSalesModuleDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SalesModuleDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSegmentationData": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SegmentationData"
        }
      },
      "type": "object"
    },
    "ResponseWrapperServiceActivationResponseDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ServiceActivationResponseDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSessionToken": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SessionToken"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSimplePaymentWidget": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SimplePaymentWidget"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSnowplowContextSnowplowGlobalCompany": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SnowplowContextSnowplowGlobalCompany"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSnowplowContextSnowplowGlobalEmployee": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SnowplowContextSnowplowGlobalEmployee"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSpacesuitNotificationMeta": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SpacesuitNotificationMeta"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSseInitializationResultDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SseInitializationResultDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperStandardTime": {
      "properties": {
        "value": {
          "$ref": "#/definitions/StandardTime"
        }
      },
      "type": "object"
    },
    "ResponseWrapperStocktaking": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Stocktaking"
        }
      },
      "type": "object"
    },
    "ResponseWrapperStorebrandPensionOnboarding": {
      "properties": {
        "value": {
          "$ref": "#/definitions/StorebrandPensionOnboarding"
        }
      },
      "type": "object"
    },
    "ResponseWrapperStorebrandPensionOnboardingQualify": {
      "properties": {
        "value": {
          "$ref": "#/definitions/StorebrandPensionOnboardingQualify"
        }
      },
      "type": "object"
    },
    "ResponseWrapperString": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSubscription": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Subscription"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSupplier": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Supplier"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSupplierInvoice": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SupplierInvoice"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSupplierProduct": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SupplierProduct"
        }
      },
      "type": "object"
    },
    "ResponseWrapperSystemMessage": {
      "properties": {
        "value": {
          "$ref": "#/definitions/SystemMessage"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTaskDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TaskDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTaxCalculation": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TaxCalculation"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTaxReturnOverview": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TaxReturnOverview"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTaxcardContactInternal": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TaxcardContactInternal"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTemplate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Template"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTimeClock": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TimeClock"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTimesheetAllocated": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetAllocated"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTimesheetEntry": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetEntry"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTimesheetProjectSalaryTypeSpecification": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetProjectSalaryTypeSpecification"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTimesheetSalaryTypeSpecification": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTimesheetSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTodoListComment": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TodoListComment"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTransportType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TransportType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelCostCategory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelCostCategory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelExpense": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpense"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelExpenseRate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelExpenseRateCategory": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelExpenseRateCategoryGroup": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelExpenseSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseSettings"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelExpenseZone": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseZone"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTravelPaymentType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelPaymentType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTrialDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TrialDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTrialInfoAutomationDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TrialInfoAutomationDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTripDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TripDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTripSearchResponseDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TripSearchResponseDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTripletexAccountPricesReturnDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexAccountPricesReturnDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTripletexAccountReturn": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexAccountReturn"
        }
      },
      "type": "object"
    },
    "ResponseWrapperTripletexCompanyModules": {
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexCompanyModules"
        }
      },
      "type": "object"
    },
    "ResponseWrapperUnreadCountDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/UnreadCountDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperUserFeedback": {
      "properties": {
        "value": {
          "$ref": "#/definitions/UserFeedback"
        }
      },
      "type": "object"
    },
    "ResponseWrapperUserTemplate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/UserTemplate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperUserTemplateDefaultDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/UserTemplateDefaultDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVFCustomerResponseDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VFCustomerResponseDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVatReturns2022": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VatReturns2022"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVatReturns2022ValidateCreate": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VatReturns2022ValidateCreate"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVatReturnsPaymentInfo": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VatReturnsPaymentInfo"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVatReturnsValidationResult": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VatReturnsValidationResult"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVatSpecificationLine": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VatSpecificationLine"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVatType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VatType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVismaConnectLogin": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VismaConnectLogin"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucher": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Voucher"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherApprovalListElement": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherApprovalListElement"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherInboxContext": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherInboxContext"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherInboxItem": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherInboxItem"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherMessage": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherMessage"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherOptions": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherOptions"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherStatus": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherStatus"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherSummaryDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherSummaryDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperVoucherType": {
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherType"
        }
      },
      "type": "object"
    },
    "ResponseWrapperWeek": {
      "properties": {
        "value": {
          "$ref": "#/definitions/Week"
        }
      },
      "type": "object"
    },
    "ResponseWrapperYearEndAnnualAccounts": {
      "properties": {
        "value": {
          "$ref": "#/definitions/YearEndAnnualAccounts"
        }
      },
      "type": "object"
    },
    "ResponseWrapperYearEndReport": {
      "properties": {
        "value": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "ResponseWrapperYearEndReportNote": {
      "properties": {
        "value": {
          "$ref": "#/definitions/YearEndReportNote"
        }
      },
      "type": "object"
    },
    "ResponseWrapperZendeskChatMetaDTO": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ZendeskChatMetaDTO"
        }
      },
      "type": "object"
    },
    "ResponseWrapperZtlAccount": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ZtlAccount"
        }
      },
      "type": "object"
    },
    "ResponseWrapperZtlConsent": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ZtlConsent"
        }
      },
      "type": "object"
    },
    "ResponseWrapperZtlOnboarding": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ZtlOnboarding"
        }
      },
      "type": "object"
    },
    "ResponseWrapperZtlSettings": {
      "properties": {
        "value": {
          "$ref": "#/definitions/ZtlSettings"
        }
      },
      "type": "object"
    },
    "RestrictedEntitlementChange": {
      "properties": {
        "change": {
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Result": {
      "properties": {
        "changes": {
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "forward": {
          "type": "string"
        },
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "popups": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "returnValue": {
          "type": "object"
        },
        "validations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ResultBudget": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountingPeriod": {
          "$ref": "#/definitions/AccountingPeriod"
        },
        "amount": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "account",
        "accountingPeriod"
      ],
      "type": "object"
    },
    "RiskFreeInterestRate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyType": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "rate": {
          "readOnly": true,
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "RoleCategoryContainerDTO": {
      "properties": {
        "category": {
          "$ref": "#/definitions/Category"
        },
        "hidden": {
          "type": "boolean"
        },
        "roleContainers": {
          "items": {
            "$ref": "#/definitions/RoleContainerDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RoleContainerDTO": {
      "properties": {
        "category": {
          "$ref": "#/definitions/Category"
        },
        "clientHasRequirements": {
          "type": "boolean"
        },
        "container": {
          "enum": [
            "ROLE_ADMINISTRATOR",
            "AUTH_READ_ONLY",
            "AUTH_LOGIN",
            "AUTH_ALL_VOUCHERS",
            "AUTH_COMPANY_ACCOUNTING_REPORTS",
            "AUTH_ACCOUNTING_SETTINGS",
            "AUTH_COMPANY_RESULT_BUDGET",
            "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
            "AUTH_COMPANY_ATTESTOR",
            "AUTH_DIRECT_REMIT_ADMIN",
            "AUTH_DIRECT_REMIT_LIGHT",
            "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
            "AUTH_DIRECT_REMIT_CREATE_NEW",
            "AUTH_DIRECT_REMIT_ADMIN_ZTL",
            "AUTH_COMPANY_ADMIN",
            "AUTH_EMPLOYEE_INFO",
            "AUTH_COMPANY_EMPLOYEE_ADMIN",
            "AUTH_CUSTOMER_ADMIN",
            "AUTH_CUSTOMER_INFO",
            "AUTH_CREATE_CUSTOMER",
            "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
            "AUTH_ARCHIVE_READ",
            "AUTH_ARCHIVE_WRITE",
            "AUTH_ARCHIVE_ADMIN",
            "AUTH_CREATE_NOTE",
            "AUTH_CREATE_NOTE_TEMPLATE",
            "AUTH_INVOICING",
            "AUTH_OFFER_ADMIN",
            "AUTH_ORDER_ADMIN",
            "AUTH_CREATE_OFFER",
            "AUTH_CREATE_ORDER",
            "AUTH_FACTORING_EXPORT",
            "AUTH_INVOICE_ADMIN_SETTINGS",
            "AUTH_PROJECT_MANAGER",
            "AUTH_PROJECT_MANAGER_COMPANY",
            "AUTH_DEPARTMENT_REPORT",
            "AUTH_CREATE_PROJECT",
            "AUTH_PROJECT_EXTRA_COSTS",
            "AUTH_PROJECT_INFO",
            "AUTH_PROJECT_ADMIN_SETTINGS",
            "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
            "AUTH_PROJECT_CONTROL_FORMS",
            "AUTH_PRODUCT_ADMIN",
            "REPORT_ADMINISTRATOR",
            "REPORT_AUTHOR",
            "AUTH_COMPANY_WAGE_ADMIN",
            "AUTH_WAGE_ADMIN_SETTINGS",
            "AUTH_WAGE_INFORMATION",
            "AUTH_TASK_ADMIN",
            "AUTH_HOURS_COMPANY",
            "AUTH_HOUR_STATISTICS_COMPANY",
            "AUTH_HOURLIST",
            "AUTH_HOURLIST_SETTINGS",
            "AUTH_HOLYDAY_PLAN",
            "AUTH_TRAVEL_REPORTS_COMPANY",
            "AUTH_TRAVEL_REPORT",
            "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
            "AUTH_VOUCHER_EXPORT",
            "AUTH_INBOX_VOUCHER",
            "AUTH_INCOMPLETE_VOUCHERS",
            "AUTH_INCOMING_INVOICE",
            "AUTH_VOUCHER_SETTINGS",
            "AUTH_BANK_RECONCILIATION",
            "AUTH_VAT_REPORT",
            "AUTH_SICKNESS_REIMBURSEMENT",
            "AUTH_REGISTER_INCOME",
            "AUTH_ADVANCED_VOUCHER",
            "AUTH_VOUCHER_IMPORT",
            "AUTH_PRODUCT_INVOICE",
            "AUTH_CUSTOMS_DECLARATION",
            "AUTH_VOUCHER_AUTOMATION",
            "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
            "YEAR_END_REPORT_ADMINISTRATOR"
          ],
          "type": "string"
        },
        "dependencies": {
          "items": {
            "enum": [
              "ROLE_ADMINISTRATOR",
              "AUTH_READ_ONLY",
              "AUTH_LOGIN",
              "AUTH_ALL_VOUCHERS",
              "AUTH_COMPANY_ACCOUNTING_REPORTS",
              "AUTH_ACCOUNTING_SETTINGS",
              "AUTH_COMPANY_RESULT_BUDGET",
              "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ATTESTOR",
              "AUTH_DIRECT_REMIT_ADMIN",
              "AUTH_DIRECT_REMIT_LIGHT",
              "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
              "AUTH_DIRECT_REMIT_CREATE_NEW",
              "AUTH_DIRECT_REMIT_ADMIN_ZTL",
              "AUTH_COMPANY_ADMIN",
              "AUTH_EMPLOYEE_INFO",
              "AUTH_COMPANY_EMPLOYEE_ADMIN",
              "AUTH_CUSTOMER_ADMIN",
              "AUTH_CUSTOMER_INFO",
              "AUTH_CREATE_CUSTOMER",
              "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
              "AUTH_ARCHIVE_READ",
              "AUTH_ARCHIVE_WRITE",
              "AUTH_ARCHIVE_ADMIN",
              "AUTH_CREATE_NOTE",
              "AUTH_CREATE_NOTE_TEMPLATE",
              "AUTH_INVOICING",
              "AUTH_OFFER_ADMIN",
              "AUTH_ORDER_ADMIN",
              "AUTH_CREATE_OFFER",
              "AUTH_CREATE_ORDER",
              "AUTH_FACTORING_EXPORT",
              "AUTH_INVOICE_ADMIN_SETTINGS",
              "AUTH_PROJECT_MANAGER",
              "AUTH_PROJECT_MANAGER_COMPANY",
              "AUTH_DEPARTMENT_REPORT",
              "AUTH_CREATE_PROJECT",
              "AUTH_PROJECT_EXTRA_COSTS",
              "AUTH_PROJECT_INFO",
              "AUTH_PROJECT_ADMIN_SETTINGS",
              "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
              "AUTH_PROJECT_CONTROL_FORMS",
              "AUTH_PRODUCT_ADMIN",
              "REPORT_ADMINISTRATOR",
              "REPORT_AUTHOR",
              "AUTH_COMPANY_WAGE_ADMIN",
              "AUTH_WAGE_ADMIN_SETTINGS",
              "AUTH_WAGE_INFORMATION",
              "AUTH_TASK_ADMIN",
              "AUTH_HOURS_COMPANY",
              "AUTH_HOUR_STATISTICS_COMPANY",
              "AUTH_HOURLIST",
              "AUTH_HOURLIST_SETTINGS",
              "AUTH_HOLYDAY_PLAN",
              "AUTH_TRAVEL_REPORTS_COMPANY",
              "AUTH_TRAVEL_REPORT",
              "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
              "AUTH_VOUCHER_EXPORT",
              "AUTH_INBOX_VOUCHER",
              "AUTH_INCOMPLETE_VOUCHERS",
              "AUTH_INCOMING_INVOICE",
              "AUTH_VOUCHER_SETTINGS",
              "AUTH_BANK_RECONCILIATION",
              "AUTH_VAT_REPORT",
              "AUTH_SICKNESS_REIMBURSEMENT",
              "AUTH_REGISTER_INCOME",
              "AUTH_ADVANCED_VOUCHER",
              "AUTH_VOUCHER_IMPORT",
              "AUTH_PRODUCT_INVOICE",
              "AUTH_CUSTOMS_DECLARATION",
              "AUTH_VOUCHER_AUTOMATION",
              "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
              "YEAR_END_REPORT_ADMINISTRATOR"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "hidden": {
          "type": "boolean"
        },
        "reversedDependencies": {
          "items": {
            "enum": [
              "ROLE_ADMINISTRATOR",
              "AUTH_READ_ONLY",
              "AUTH_LOGIN",
              "AUTH_ALL_VOUCHERS",
              "AUTH_COMPANY_ACCOUNTING_REPORTS",
              "AUTH_ACCOUNTING_SETTINGS",
              "AUTH_COMPANY_RESULT_BUDGET",
              "AUTH_COMPANY_CUSTOMER_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_VENDOR_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_EMPLOYEE_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ASSET_ACCOUNTING_REPORTS",
              "AUTH_COMPANY_ATTESTOR",
              "AUTH_DIRECT_REMIT_ADMIN",
              "AUTH_DIRECT_REMIT_LIGHT",
              "AUTH_MANAGE_BANK_ACCOUNT_NUMBERS",
              "AUTH_DIRECT_REMIT_CREATE_NEW",
              "AUTH_DIRECT_REMIT_ADMIN_ZTL",
              "AUTH_COMPANY_ADMIN",
              "AUTH_EMPLOYEE_INFO",
              "AUTH_COMPANY_EMPLOYEE_ADMIN",
              "AUTH_CUSTOMER_ADMIN",
              "AUTH_CUSTOMER_INFO",
              "AUTH_CREATE_CUSTOMER",
              "AUTH_INBOX_ARCHIVE_ALL_EMPLOYEES",
              "AUTH_ARCHIVE_READ",
              "AUTH_ARCHIVE_WRITE",
              "AUTH_ARCHIVE_ADMIN",
              "AUTH_CREATE_NOTE",
              "AUTH_CREATE_NOTE_TEMPLATE",
              "AUTH_INVOICING",
              "AUTH_OFFER_ADMIN",
              "AUTH_ORDER_ADMIN",
              "AUTH_CREATE_OFFER",
              "AUTH_CREATE_ORDER",
              "AUTH_FACTORING_EXPORT",
              "AUTH_INVOICE_ADMIN_SETTINGS",
              "AUTH_PROJECT_MANAGER",
              "AUTH_PROJECT_MANAGER_COMPANY",
              "AUTH_DEPARTMENT_REPORT",
              "AUTH_CREATE_PROJECT",
              "AUTH_PROJECT_EXTRA_COSTS",
              "AUTH_PROJECT_INFO",
              "AUTH_PROJECT_ADMIN_SETTINGS",
              "AUTH_PROJECT_OWN_PROJECT_RESULT_REPORT",
              "AUTH_PROJECT_CONTROL_FORMS",
              "AUTH_PRODUCT_ADMIN",
              "REPORT_ADMINISTRATOR",
              "REPORT_AUTHOR",
              "AUTH_COMPANY_WAGE_ADMIN",
              "AUTH_WAGE_ADMIN_SETTINGS",
              "AUTH_WAGE_INFORMATION",
              "AUTH_TASK_ADMIN",
              "AUTH_HOURS_COMPANY",
              "AUTH_HOUR_STATISTICS_COMPANY",
              "AUTH_HOURLIST",
              "AUTH_HOURLIST_SETTINGS",
              "AUTH_HOLYDAY_PLAN",
              "AUTH_TRAVEL_REPORTS_COMPANY",
              "AUTH_TRAVEL_REPORT",
              "AUTH_TRAVEL_EXPENSE_ADMIN_SETTINGS",
              "AUTH_VOUCHER_EXPORT",
              "AUTH_INBOX_VOUCHER",
              "AUTH_INCOMPLETE_VOUCHERS",
              "AUTH_INCOMING_INVOICE",
              "AUTH_VOUCHER_SETTINGS",
              "AUTH_BANK_RECONCILIATION",
              "AUTH_VAT_REPORT",
              "AUTH_SICKNESS_REIMBURSEMENT",
              "AUTH_REGISTER_INCOME",
              "AUTH_ADVANCED_VOUCHER",
              "AUTH_VOUCHER_IMPORT",
              "AUTH_PRODUCT_INVOICE",
              "AUTH_CUSTOMS_DECLARATION",
              "AUTH_VOUCHER_AUTOMATION",
              "AUTH_REMIT_FILES_VOUCHER_OVERVIEW",
              "YEAR_END_REPORT_ADMINISTRATOR"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "RushHoursToll": {
      "properties": {
        "days": {
          "items": {
            "$ref": "#/definitions/Day"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "SalaryAdvanceTaxcardInternal": {
      "properties": {
        "altinnTaxDeductionCardId": {
          "$ref": "#/definitions/SalaryTaxcardInternal"
        },
        "antallMndForTrekk": {
          "type": "number"
        },
        "frikortbelop": {
          "type": "number"
        },
        "prosentsats": {
          "type": "number"
        },
        "remainingFreeCardAmount": {
          "type": "number"
        },
        "tabellnummer": {
          "maxLength": 20,
          "type": "string"
        },
        "tabelltype": {
          "maxLength": 100,
          "type": "string"
        },
        "trekkode": {
          "maxLength": 100,
          "type": "string"
        },
        "trekkodeDescription": {
          "type": "string"
        },
        "type": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "typeDescription": {
          "type": "string"
        }
      },
      "required": [
        "altinnTaxDeductionCardId"
      ],
      "type": "object"
    },
    "SalaryCompilation": {
      "properties": {
        "employee": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "expenses": {
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "mandatoryTaxDeductions": {
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "taxDeductions": {
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "vacationPayBasis": {
          "readOnly": true,
          "type": "number"
        },
        "wages": {
          "items": {
            "$ref": "#/definitions/SalaryCompilationLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryCompilationLine": {
      "properties": {
        "amount": {
          "readOnly": true,
          "type": "number"
        },
        "description": {
          "readOnly": true,
          "type": "string"
        },
        "taxable": {
          "readOnly": true,
          "type": "boolean"
        },
        "taxableDescription": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalarySettings": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        },
        "payrollTaxCalcMethod": {
          "description": "Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport",
          "enum": [
            "AA",
            "BB",
            "CC",
            "C2",
            "DD",
            "EE",
            "GG",
            "JJ",
            "EMPTY"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "payrollTaxCalcMethod"
      ],
      "type": "object"
    },
    "SalarySpecification": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "type": "number"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "rate": {
          "type": "number"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count",
        "rate",
        "salaryType"
      ],
      "type": "object"
    },
    "SalarySummaryDTO": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "employersPaymentPercentage": {
          "$ref": "#/definitions/TlxNumber"
        },
        "numberOfActiveEmployees": {
          "format": "int32",
          "type": "integer"
        },
        "salaryPaymentSum": {
          "$ref": "#/definitions/TlxNumber"
        },
        "salaryPercentage": {
          "$ref": "#/definitions/TlxNumber"
        },
        "salaryPeriodMonthFirstDay": {
          "format": "date",
          "type": "string"
        },
        "salaryPeriodMonthLastDay": {
          "format": "date",
          "type": "string"
        },
        "taxesPercentage": {
          "$ref": "#/definitions/TlxNumber"
        },
        "validAltInnConfig": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SalaryTaxcardInternal": {
      "properties": {
        "additionalInfo": {
          "maxLength": 250,
          "type": "string"
        },
        "advanceTaxcards": {
          "items": {
            "$ref": "#/definitions/SalaryAdvanceTaxcardInternal"
          },
          "type": "array"
        },
        "arbeidstakerIdentifikator": {
          "maxLength": 20,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "deductionPeriod": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "orderId": {
          "format": "int32",
          "type": "integer"
        },
        "payrollTaxMunicipalityId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "skattekortIdentifikator": {
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "status": {
          "type": "string"
        },
        "statusDescription": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "utstedtDato": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearOfIncome": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryTransaction": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "description": "Voucher date.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isHistorical": {
          "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance.",
          "type": "boolean"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "paySlipsAvailableDate": {
          "description": "The date payslips are made available to the employee. Defaults to voucherDate.",
          "type": "string"
        },
        "payslips": {
          "description": "Link to individual payslip objects.",
          "items": {
            "$ref": "#/definitions/Payslip"
          },
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "month",
        "payslips",
        "year"
      ],
      "type": "object"
    },
    "SalaryType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 10,
          "type": "string"
        },
        "showInTimesheet": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2Employee": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "employeeNumber": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "firstName": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastName": {
          "maxLength": 100,
          "type": "string"
        },
        "nameAndNumber": {
          "readOnly": true,
          "type": "string"
        },
        "phoneNumberSmsCertified": {
          "readOnly": true,
          "type": "string"
        },
        "pictureId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2EmployeeToEmploymentsRelationship": {
      "properties": {
        "employee": {
          "$ref": "#/definitions/SalaryV2Employee",
          "description": "Employee",
          "readOnly": true
        },
        "employments": {
          "description": "Employments",
          "items": {
            "$ref": "#/definitions/Employment"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "SalaryV2Modules": {
      "properties": {
        "moduleAgro": {
          "description": "Module Agro",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAutopay": {
          "description": "Module Autopay",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleDepartment": {
          "description": "Module department",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleDepartmentAccounting": {
          "description": "Module department accounting",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleElectronicVoucher": {
          "description": "Module Electronic vouchers",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleEncryptedPayslip": {
          "description": "Module Encrypted Payslip",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleFreeCompanyCar": {
          "description": "Module Free Company Car",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleMamut": {
          "description": "Module Mamut",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleMesan": {
          "description": "Module Mesan",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleNets": {
          "description": "Module Nets",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleSeamenDeduction": {
          "description": "Module seamen deduction",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleUnionDeduction": {
          "description": "Module Union Deduction",
          "readOnly": true,
          "type": "boolean"
        },
        "moduleWageProjectAccounting": {
          "description": "Module wage project accounting",
          "readOnly": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SalaryV2Overview": {
      "properties": {
        "rows": {
          "items": {
            "$ref": "#/definitions/SalaryV2OverviewRow"
          },
          "type": "array"
        },
        "salaryTypesInUse": {
          "items": {
            "$ref": "#/definitions/SalaryV2Type"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SalaryV2OverviewData": {
      "properties": {
        "rows": {
          "items": {
            "$ref": "#/definitions/SalaryV2OverviewDataWageCodeRow"
          },
          "readOnly": true,
          "type": "array"
        },
        "salaryPayments": {
          "items": {
            "$ref": "#/definitions/SalaryV2OverviewDataSalaryPayment"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "SalaryV2OverviewDataSalaryPayment": {
      "properties": {
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "paymentAmount": {
          "readOnly": true,
          "type": "number"
        },
        "payrollTaxBasisAmount": {
          "readOnly": true,
          "type": "number"
        },
        "salaryPaymentId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2OverviewDataWageCodeColumn": {
      "properties": {
        "amount": {
          "readOnly": true,
          "type": "number"
        },
        "count": {
          "readOnly": true,
          "type": "number"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "isHours": {
          "readOnly": true,
          "type": "boolean"
        },
        "salaryPaymentId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2OverviewDataWageCodeRow": {
      "properties": {
        "columns": {
          "items": {
            "$ref": "#/definitions/SalaryV2OverviewDataWageCodeColumn"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "isPayrollTaxable": {
          "readOnly": true,
          "type": "boolean"
        },
        "salaryTypeId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "totalAmount": {
          "readOnly": true,
          "type": "number"
        },
        "totalCount": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "SalaryV2OverviewRow": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "paymentSum": {
          "type": "number"
        },
        "payrollTaxBasisSum": {
          "type": "number"
        },
        "wageCodeBreakdown": {
          "additionalProperties": {
            "$ref": "#/definitions/TlxNumber"
          },
          "description": "A map of all the wage code ids used for one employee and their respective amount",
          "type": "object"
        }
      },
      "type": "object"
    },
    "SalaryV2Payment": {
      "properties": {
        "amount": {
          "readOnly": true,
          "type": "number"
        },
        "bankAccountOrIban": {
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "description": "Voucher date.",
          "type": "string"
        },
        "deliveryMethodPaySlip": {
          "enum": [
            "MANUAL",
            "EBOKS",
            "PRINT",
            "EMAIL",
            "APP"
          ],
          "readOnly": true,
          "type": "string"
        },
        "division": {
          "$ref": "#/definitions/Company",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/SalaryV2Employee"
        },
        "employeeHourlyWage": {
          "readOnly": true,
          "type": "number"
        },
        "employeeSalaryDate": {
          "readOnly": true,
          "type": "string"
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "grossAmount": {
          "readOnly": true,
          "type": "number"
        },
        "grossAmountDescription": {
          "readOnly": true,
          "type": "string"
        },
        "holidayAllowanceRate": {
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isEmploymentInfoAmeldinger": {
          "readOnly": true,
          "type": "boolean"
        },
        "isTaxCardMissing": {
          "readOnly": true,
          "type": "boolean"
        },
        "lastMonthPaidAmount": {
          "readOnly": true,
          "type": "number"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "payrollTaxAmount": {
          "readOnly": true,
          "type": "number"
        },
        "payrollTaxBasis": {
          "readOnly": true,
          "type": "number"
        },
        "payrollTaxMunicipality": {
          "$ref": "#/definitions/Municipality",
          "readOnly": true
        },
        "payrollTaxPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "seamenDaysOnBoard": {
          "format": "int32",
          "type": "integer"
        },
        "seamenDeduction": {
          "type": "boolean"
        },
        "specifications": {
          "description": "Link to salary specifications.",
          "items": {
            "$ref": "#/definitions/SalaryV2Specification"
          },
          "type": "array"
        },
        "suggestAddReadjustment": {
          "readOnly": true,
          "type": "boolean"
        },
        "sumAmountTaxDeductions": {
          "readOnly": true,
          "type": "number"
        },
        "taxDescription": {
          "readOnly": true,
          "type": "string"
        },
        "transaction": {
          "$ref": "#/definitions/SalaryV2Transaction"
        },
        "travelExpenses": {
          "description": "Link to salary specifications.",
          "items": {
            "$ref": "#/definitions/SalaryV2TravelExpense"
          },
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vacationAllowanceAmount": {
          "readOnly": true,
          "type": "number"
        },
        "validationResults": {
          "$ref": "#/definitions/SalaryV2PaymentValidationResult",
          "readOnly": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "employee",
        "employment"
      ],
      "type": "object"
    },
    "SalaryV2PaymentType": {
      "properties": {
        "accountId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "typeOfPayment": {
          "enum": [
            "NOT_PAID",
            "NETS",
            "AUTOPAY",
            "POSTING_RULE",
            "ZTL"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "SalaryV2PaymentValidationResult": {
      "properties": {
        "poisonPills": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "validations": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "warnings": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "SalaryV2Settings": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "prefersOtherPayrollTaxCalculationMethod": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2Specification": {
      "properties": {
        "amount": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "costCarrierEditable": {
          "type": "boolean"
        },
        "count": {
          "type": "number"
        },
        "countAndRateEditable": {
          "type": "boolean"
        },
        "date": {
          "description": "date",
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/SalaryV2Employee"
        },
        "externalChangesSinceLastTime": {
          "type": "boolean"
        },
        "freeCarSpec": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "paymentAmount": {
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "rate": {
          "type": "number"
        },
        "refYear": {
          "format": "int32",
          "type": "integer"
        },
        "salaryPayment": {
          "$ref": "#/definitions/SalaryV2Payment"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryV2Type"
        },
        "salaryTypeEditable": {
          "type": "boolean"
        },
        "specificationType": {
          "description": "Type of specification; only TYPE_MANUAL are user create- and editable",
          "enum": [
            "TYPE_MONTHLY_PAY",
            "TYPE_HOURLIST",
            "TYPE_HOURS",
            "TYPE_TRAVEL_REPORT",
            "TYPE_TAX",
            "TYPE_MANUAL",
            "TYPE_VACATION_ALLOWANCE",
            "TYPE_VACATION_ALLOWANCE_EXTRA",
            "TYPE_VACATION_CORRECTION",
            "TYPE_VACATION_FULL_MONTH_DEDUCTION",
            "TYPE_LEDGER",
            "TYPE_FLEXI_ADJUSTMENT",
            "TYPE_VACATION_ADJUSTMENT",
            "TYPE_MESAN_BONUS",
            "TYPE_REGULAR",
            "TYPE_ABSENCE",
            "TYPE_READJUSTMENT"
          ],
          "type": "string"
        },
        "supplement": {
          "$ref": "#/definitions/SalaryV2Supplement",
          "description": "Salary specification supplement. Required if the salaryType requires supplementary information."
        },
        "templateIncrement": {
          "type": "boolean"
        },
        "unionSpec": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "validations": {
          "items": {
            "$ref": "#/definitions/ApiValidationMessage"
          },
          "readOnly": true,
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2Supplement": {
      "properties": {
        "carListPrice": {
          "type": "number"
        },
        "carNumberOfKm": {
          "type": "number"
        },
        "carNumberOfKmToHomeOrWork": {
          "type": "number"
        },
        "carRegistrationNumber": {
          "maxLength": 20,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "continentalShaft": {
          "type": "boolean"
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "deductedArtistTax": {
          "format": "int32",
          "type": "integer"
        },
        "endDate": {
          "description": "end date, currently only for Norwegian Continental Shaft",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfDays": {
          "format": "int32",
          "type": "integer"
        },
        "numberOfJourneys": {
          "format": "int32",
          "type": "integer"
        },
        "salarySpecification": {
          "$ref": "#/definitions/SalaryV2Specification"
        },
        "startDate": {
          "description": "start date, currently only for Norwegian Continental Shaft",
          "type": "string"
        },
        "taxCountry": {
          "$ref": "#/definitions/Country"
        },
        "taxPaidAbroad": {
          "type": "number"
        },
        "upgrossingBasis": {
          "type": "number"
        },
        "upgrossingTableNumber": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "validations": {
          "items": {
            "$ref": "#/definitions/ApiValidationMessage"
          },
          "readOnly": true,
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearOfIncome": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2Transaction": {
      "properties": {
        "allowDeletePayments": {
          "description": "True if bank payments are deletable",
          "type": "boolean"
        },
        "ameldingWageId": {
          "format": "int32",
          "type": "integer"
        },
        "anyExternalChangesOnThisTransaction": {
          "type": "boolean"
        },
        "attachment": {
          "$ref": "#/definitions/Document",
          "description": "If the documentation for the voucher has been provided from an external source (e.g. another system via API or a user upload) then this is a reference to the document. This is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "completed": {
          "type": "boolean"
        },
        "containsNegativeWps": {
          "type": "boolean"
        },
        "date": {
          "description": "Voucher date.",
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "hasBankTransfers": {
          "type": "boolean"
        },
        "hourlyWageCodeIds": {
          "description": "List of wage code ids that are hourly wage code",
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isHistorical": {
          "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance.",
          "type": "boolean"
        },
        "month": {
          "format": "int32",
          "type": "integer"
        },
        "notDeletableMessage": {
          "type": "string"
        },
        "paySlipsAvailableDate": {
          "description": "The date payslips are made available to the employee. Defaults to voucherDate.",
          "type": "string"
        },
        "paymentDate": {
          "description": "The date payslips are paid",
          "type": "string"
        },
        "paymentType": {
          "$ref": "#/definitions/SalaryV2PaymentType",
          "description": "Payment type in use, or default payment type",
          "readOnly": true
        },
        "payrollTaxBasisAmount": {
          "readOnly": true,
          "type": "number"
        },
        "payrollTaxCalcMethod": {
          "description": "Employee National Insurance calculation method",
          "maxLength": 2,
          "type": "string"
        },
        "payslipGeneralComment": {
          "description": "Comment to be shown on all payslips",
          "type": "string"
        },
        "periodAsString": {
          "type": "string"
        },
        "reversed": {
          "type": "boolean"
        },
        "reverser": {
          "type": "boolean"
        },
        "salaryPayments": {
          "description": "Link to individual payslip objects.",
          "items": {
            "$ref": "#/definitions/SalaryV2Payment"
          },
          "type": "array"
        },
        "sumPaidAmount": {
          "readOnly": true,
          "type": "number"
        },
        "sumPayrollTaxAmount": {
          "readOnly": true,
          "type": "number"
        },
        "sumTaxDeductionAmount": {
          "readOnly": true,
          "type": "number"
        },
        "sumTotalVacationAllowanceAmount": {
          "readOnly": true,
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/SalaryV2Voucher",
          "description": "Link to the voucher object"
        },
        "voucherComment": {
          "description": "Comment on voucher",
          "type": "string"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "month",
        "salaryPayments",
        "year"
      ],
      "type": "object"
    },
    "SalaryV2TravelExpense": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isExpense": {
          "type": "boolean"
        },
        "salaryDescription": {
          "type": "string"
        },
        "specifications": {
          "items": {
            "$ref": "#/definitions/SalaryV2Specification"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2Type": {
      "properties": {
        "calcType": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "maxRate": {
          "readOnly": true,
          "type": "number"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 10,
          "type": "string"
        },
        "payStatementCode": {
          "type": "string"
        },
        "payment": {
          "readOnly": true,
          "type": "boolean"
        },
        "payrollTaxable": {
          "readOnly": true,
          "type": "boolean"
        },
        "percentIncrease": {
          "readOnly": true,
          "type": "number"
        },
        "rate": {
          "readOnly": true,
          "type": "number"
        },
        "requiredSupplementFields": {
          "items": {
            "enum": [
              "COUNTRY",
              "TAX_COUNTRY",
              "CAR_NUMBER_OF_KM",
              "CAR_NUMBER_OF_KM_TO_HOME_OR_WORK",
              "CAR_LIST_PRICE",
              "CAR_REGISTRATION_NUMBER",
              "NUMBER_OF_JOURNEYS",
              "UPGROSSING_BASIS",
              "UPGROSSING_TABLE_NUMBER",
              "YEAR_OF_INCOME",
              "DEDUCTED_ARTIST_TAX",
              "TAX_PAID_ABROAD",
              "SUPPORT_VESSEL",
              "IS_CONTINENTAL_SHAFT",
              "NORWEGIAN_SHAFT_PERIOD",
              "NORWEGIAN_SHAFT_FIRST_60_DAYS",
              "NUMBER_OF_DAYS"
            ],
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "requiresAdditionalInfo": {
          "readOnly": true,
          "type": "boolean"
        },
        "requiresSupplement": {
          "readOnly": true,
          "type": "boolean"
        },
        "showInTimesheet": {
          "readOnly": true,
          "type": "boolean"
        },
        "sickPayable": {
          "readOnly": true,
          "type": "boolean"
        },
        "taxable": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vacationAllowance": {
          "readOnly": true,
          "type": "boolean"
        },
        "vacationPayable": {
          "readOnly": true,
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalaryV2Voucher": {
      "properties": {
        "attachmentId": {
          "format": "int32",
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "notDeletableMessage": {
          "type": "string"
        },
        "number": {
          "description": "System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "numberAsString": {
          "type": "string"
        },
        "reverseVoucher": {
          "$ref": "#/definitions/SalaryV2Voucher",
          "readOnly": true
        },
        "reversible": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "urlDetails": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date"
      ],
      "type": "object"
    },
    "SalesForceAccountInfo": {
      "properties": {
        "activeMainModule": {
          "description": "Active main module",
          "enum": [
            "ACCOUNTING",
            "INVOICE",
            "CRM",
            "PROJECT",
            "WAGE",
            "NETS_PRINT",
            "NETS_PRINT_SALARY",
            "OCR",
            "REMIT",
            "SMS_NOTIFICATION",
            "VOUCHER_SCANNING",
            "TIME_TRACKING",
            "VVS_ELECTRO",
            "UBEGRENSET_BILAG_VVS_ELEKTRO",
            "INVOICE_OPTION_VIPPS",
            "INVOICE_OPTION_EFAKTURA",
            "INVOICE_OPTION_AVTALEGIRO",
            "INVOICE_OPTION_PAPER",
            "FACTORING_APRILA",
            "INVOICE_OPTION_AUTOINVOICE_OUTBOUND_EHF",
            "API_V2",
            "SMART_SCAN",
            "BILAG_0_100_mikro",
            "BILAG_0_500_vanlig_legacy",
            "BILAG_501_1000_vanlig_legacy",
            "BILAG_1001_2000_vanlig_legacy",
            "BILAG_2001_3500_vanlig_legacy",
            "BILAG_3501_5000_vanlig_legacy",
            "BILAG_5001_10001_vanlig_legacy",
            "UBEGRENSET_BILAG_vanlig_legacy",
            "BILAG_0_500_prosjekt_legacy",
            "BILAG_501_1000_prosjekt_legacy",
            "BILAG_1001_2000_prosjekt_legacy",
            "BILAG_2001_3500_prosjekt_legacy",
            "BILAG_3501_5000_prosjekt_legacy",
            "BILAG_5001_10001_prosjekt_legacy",
            "UBEGRENSET_BILAG_prosjekt_legacy",
            "MIKRO",
            "MINI",
            "MEDIUM",
            "TOTAL",
            "BASIS",
            "SMART",
            "AGRO_CLIENT",
            "MAMUT",
            "KOMPLETT",
            "SMART_WAGE",
            "SMART_TIME_TRACKING",
            "BILAG_0_500",
            "BILAG_501_1000",
            "BILAG_1001_2000",
            "BILAG_2001_3500",
            "BILAG_3501_5000",
            "BILAG_5001_10001",
            "UBEGRENSET_BILAG",
            "READ_ONLY_ACCESS",
            "READ_ONLY_ACCESS_FREE",
            "AUTOPAY",
            "VOUCHER_APPROVAL",
            "SMART_PROJECT",
            "ACCOUNT_OFFICE",
            "UNLIMITED_VOUCHER_ACCOUNT_OFFICE",
            "COMPANY_SERVICE_FOR_PAYING_ACCOUNT_OFFICES",
            "AGRO_WAGE",
            "INVOICE_OPTION_AUTOINVOICE_INCOMING_EHF",
            "MAMUT_PROJECT",
            "MAMUT_WITH_WAGE",
            "USER_SERVICE_HISTORIC_CUSTOMERS_NON_STANDARD",
            "ENCRYPTED_PAYSLIP",
            "AGRO_LICENCE",
            "AGRO_DOCUMENT_CENTER",
            "AGRO_INVOICE",
            "FIVE_EMPLOYEES",
            "AUTOPLUS_MINI",
            "AUTOPLUS_MEDIUM",
            "AUTOPLUS_STOR",
            "CASH_CREDIT_APRILA",
            "NO1TS",
            "NO1TS_TRAVELREPORT",
            "NO1TS_ACCOUNTING",
            "AGRO_INVOICE_MIGRATED",
            "USER_CATEGORY_1_LICENSE",
            "USER_CATEGORY_2_LICENSE",
            "USER_CATEGORY_3_LICENSE",
            "VOUCHER_FACTORY",
            "OCR_AUTOPAY",
            "CLOSED_ACCOUNT",
            "LOGISTICS",
            "INTEGRATION_PARTNER",
            "CREDIT_SCORING",
            "ZTL",
            "PLUSS",
            "YEAR_END_REPORTING_ENK",
            "FACTORING_VISMA_FINANCE",
            "YEAR_END_REPORTING_AS",
            "BILAG_0_100_MIKRO_AUTOMATION",
            "BILAG_0_500_AUTOMATION",
            "BILAG_501_1000_AUTOMATION",
            "BILAG_1001_2000_AUTOMATION",
            "BILAG_2001_3500_AUTOMATION",
            "BILAG_3501_5000_AUTOMATION",
            "BILAG_5001_10001_AUTOMATION",
            "UBEGRENSET_BILAG_AUTOMATION",
            "CMA_SHOPIFY",
            "CMA_MYSTORE",
            "CMA_WOOCOMMERCE"
          ],
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "customerCompanyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "customerId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "endDate": {
          "description": "Tripletex account end Date",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isAccountant": {
          "readOnly": true,
          "type": "boolean"
        },
        "isAuditor": {
          "readOnly": true,
          "type": "boolean"
        },
        "isReseller": {
          "readOnly": true,
          "type": "boolean"
        },
        "isSuspended": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAccountantConnectClient": {
          "readOnly": true,
          "type": "boolean"
        },
        "registerDate": {
          "description": "Tripletex account register Date",
          "readOnly": true,
          "type": "string"
        },
        "salesForceOpportunityDTO": {
          "$ref": "#/definitions/SalesForceOpportunity",
          "description": "Company opportunity",
          "readOnly": true
        },
        "startDate": {
          "description": "Tripletex account start Date",
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceAccountantConnection": {
      "properties": {
        "aoCustomerId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "clientCustomerId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceAddress": {
      "properties": {
        "addressLine1": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "addressLine2": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "city": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "country": {
          "$ref": "#/definitions/SalesForceCountry",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "postalCode": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceCountry": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isoAlpha2Code": {
          "readOnly": true,
          "type": "string"
        },
        "isoAlpha3Code": {
          "maxLength": 3,
          "readOnly": true,
          "type": "string"
        },
        "isoNumericCode": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceCustomerStats": {
      "properties": {
        "customerId": {
          "description": "Customer Id",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "dateOfLastAdminLogin": {
          "description": "Last Admin login to Tripletex date",
          "readOnly": true,
          "type": "string"
        },
        "numberOfEmployees": {
          "description": "Number of employees",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfInvoicedEmployeesOnLastInvoice": {
          "description": "Number of invoiced employees on last invoice",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfInvoicedTransactionsEHF": {
          "description": "Number of invoiced transactions EHF",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfUsers": {
          "description": "Number of users",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "totalMonthlyFees": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Total monthly service fees including discounts.",
          "readOnly": true
        },
        "totalStartupFees": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Total charged startup-fees for all the customer's products",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "SalesForceEmployee": {
      "properties": {
        "address": {
          "$ref": "#/definitions/SalesForceAddress",
          "readOnly": true
        },
        "allowLogin": {
          "readOnly": true,
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "customerId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "email": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "firstName": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isAccountAdministrator": {
          "readOnly": true,
          "type": "boolean"
        },
        "isAppUser": {
          "readOnly": true,
          "type": "boolean"
        },
        "isDefaultLogin": {
          "readOnly": true,
          "type": "boolean"
        },
        "isExternal": {
          "readOnly": true,
          "type": "boolean"
        },
        "isMarketingConsent": {
          "readOnly": true,
          "type": "boolean"
        },
        "isTripletexCertified": {
          "readOnly": true,
          "type": "boolean"
        },
        "isUserAdministrator": {
          "readOnly": true,
          "type": "boolean"
        },
        "lastName": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "loginEndDate": {
          "description": "Login end date",
          "readOnly": true,
          "type": "string"
        },
        "phoneNumberHome": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "phoneNumberSmsCertified": {
          "readOnly": true,
          "type": "string"
        },
        "phoneNumberWork": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "userId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceEmployeeRole": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "roleId": {
          "format": "int32",
          "type": "integer"
        },
        "tripletexCustomerId": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "userId": {
          "format": "int32",
          "type": "integer"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceOpportunity": {
      "properties": {
        "accountantMonthlyProvision": {
          "description": "The monthly provision for the accountant of the monthly price (percentage)",
          "readOnly": true,
          "type": "number"
        },
        "accountantStartupProvision": {
          "description": "The initial provision for the accountant of the startup price (percentage)",
          "readOnly": true,
          "type": "number"
        },
        "allPrices": {
          "additionalProperties": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object"
          },
          "description": "A nested map of all active sales modules. The key in the outer map is the sales module, whilst the inner map contains the different pricing types for the given sales module. A pricing type could be PER_USE(10).",
          "readOnly": true,
          "type": "object"
        },
        "listPriceCategory1UserService": {
          "description": "The monthly list price per user.",
          "readOnly": true,
          "type": "number"
        },
        "listPriceCategory1UserStartup": {
          "description": "The startup list price per user.",
          "readOnly": true,
          "type": "number"
        },
        "noOfUsersIncluded": {
          "description": "The number of users included for free in the purchased module.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "noOfUsersPrepaid": {
          "description": "The number of users prepaid when creating the company.",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "sumAdditionalServices": {
          "description": "The total startup price for additional services.",
          "readOnly": true,
          "type": "number"
        },
        "sumService": {
          "description": "The monthly price for the company.",
          "readOnly": true,
          "type": "number"
        },
        "sumServiceCategory1Users": {
          "description": "The total price per monthly price for users of category 1.",
          "readOnly": true,
          "type": "number"
        },
        "sumStartup": {
          "description": "The startup price for the company.",
          "readOnly": true,
          "type": "number"
        },
        "sumStartupCategory1Users": {
          "description": "The total startup price for users of category 1.",
          "readOnly": true,
          "type": "number"
        },
        "sumYearlyService": {
          "description": "The monthly price for the company.",
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "SalesForceTripletexSalesModulePurchase": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "customerId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "endDate": {
          "description": "Purchase end date",
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "purchaseDate": {
          "description": "Purchase date",
          "readOnly": true,
          "type": "string"
        },
        "salesForceOpportunityDTO": {
          "$ref": "#/definitions/SalesForceOpportunity",
          "description": "Company opportunity",
          "readOnly": true
        },
        "tripletexCompanyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "tripletexPriceList": {
          "enum": [
            "TRIPLETEX_OLD_MODEL",
            "TRIPLETEX_STANDARD",
            "AGRO",
            "MAMUT",
            "BASIS",
            "SMART",
            "KOMPLETT",
            "VVS_ELEKTRO",
            "AUTOPLUS",
            "MIKRO",
            "INTEGRATION_PARTNER",
            "PLUSS"
          ],
          "readOnly": true,
          "type": "string"
        },
        "tripletexSalesModuleName": {
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "Type upSale or newSales",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesForceUserOverview": {
      "properties": {
        "customerId": {
          "description": "Customer Id",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfPayslipOnlyUsers": {
          "description": "Number of payslip only users",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfUsers": {
          "description": "Number of users",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SalesModuleDTO": {
      "properties": {
        "costStartDate": {
          "type": "string"
        },
        "name": {
          "enum": [
            "MAMUT",
            "MAMUT_WITH_WAGE",
            "AGRO_LICENCE",
            "AGRO_CLIENT",
            "AGRO_DOCUMENT_CENTER",
            "AGRO_INVOICE",
            "AGRO_INVOICE_MIGRATED",
            "AGRO_WAGE",
            "NO1TS",
            "NO1TS_TRAVELREPORT",
            "NO1TS_ACCOUNTING",
            "BASIS",
            "SMART",
            "PLUSS",
            "KOMPLETT",
            "VVS",
            "ELECTRO",
            "ACCOUNTING_OFFICE",
            "SMART_WAGE",
            "SMART_TIME_TRACKING",
            "SMART_PROJECT",
            "OCR",
            "API_V2",
            "ELECTRONIC_VOUCHERS",
            "UP_TO_100_VOUCHERS",
            "UP_TO_500_VOUCHERS",
            "UP_TO_1000_VOUCHERS",
            "UP_TO_2000_VOUCHERS",
            "UP_TO_3500_VOUCHERS",
            "UP_TO_5000_VOUCHERS",
            "UP_TO_10000_VOUCHERS",
            "UNLIMITED_VOUCHERS",
            "UP_TO_100_VOUCHERS_AUTOMATION",
            "UP_TO_500_VOUCHERS_AUTOMATION",
            "UP_TO_1000_VOUCHERS_AUTOMATION",
            "UP_TO_2000_VOUCHERS_AUTOMATION",
            "UP_TO_3500_VOUCHERS_AUTOMATION",
            "UP_TO_5000_VOUCHERS_AUTOMATION",
            "UP_TO_10000_VOUCHERS_AUTOMATION",
            "UNLIMITED_VOUCHERS_AUTOMATION",
            "LOGISTICS",
            "MIKRO",
            "AUTOPLUS_MINI",
            "AUTOPLUS_MEDIUM",
            "AUTOPLUS_STOR",
            "INTEGRATION_PARTNER",
            "PROJECT",
            "YEAR_END_REPORTING_ENK",
            "YEAR_END_REPORTING_AS"
          ],
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "SearchCompletionDTO": {
      "properties": {
        "address": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "score": {
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "items": {
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SegmentationData": {
      "properties": {
        "companyName": {
          "type": "string"
        },
        "companyStartDateYear": {
          "type": "string"
        },
        "companyType": {
          "type": "string"
        },
        "contextId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "employeeNumber": {
          "format": "int32",
          "type": "integer"
        },
        "hackedOrSupportAccess": {
          "type": "boolean"
        },
        "incomingInvoices": {
          "format": "int32",
          "type": "integer"
        },
        "industry": {
          "type": "string"
        },
        "isAccountant": {
          "type": "boolean"
        },
        "isReseller": {
          "type": "boolean"
        },
        "isTestOrFreeCompany": {
          "type": "boolean"
        },
        "isTrialAccount": {
          "type": "boolean"
        },
        "mainAccountBank": {
          "type": "string"
        },
        "modules": {
          "$ref": "#/definitions/SegmentationModules"
        },
        "orgNumber": {
          "type": "string"
        },
        "outgoingInvoices": {
          "format": "int32",
          "type": "integer"
        },
        "packageName": {
          "type": "string"
        },
        "pilotFeatures": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "roles": {
          "$ref": "#/definitions/SegmentationRoles"
        },
        "tripletexCustomerCategoryId3": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SegmentationModules": {
      "properties": {
        "approveWeeklyHourlists": {
          "type": "boolean"
        },
        "approvehourlists": {
          "type": "boolean"
        },
        "approveinvoices": {
          "type": "boolean"
        },
        "approvemonthlyhourlists": {
          "type": "boolean"
        },
        "approvetravelreports": {
          "type": "boolean"
        },
        "autoInvoicing": {
          "type": "boolean"
        },
        "completemonthlyhourlists": {
          "type": "boolean"
        },
        "completeweeklyhourlists": {
          "type": "boolean"
        },
        "factoringVismaFinance": {
          "type": "string"
        },
        "hourCostFactorProject": {
          "type": "boolean"
        },
        "hourlyRateProjectsWriteUpDown": {
          "type": "boolean"
        },
        "invoiceapprovedhoursmandatory": {
          "type": "boolean"
        },
        "moduleAPI20": {
          "type": "boolean"
        },
        "moduleAccountantConnectClient": {
          "type": "boolean"
        },
        "moduleAdditionProjectMarkup": {
          "type": "boolean"
        },
        "moduleAgro": {
          "type": "boolean"
        },
        "moduleAmortization": {
          "type": "boolean"
        },
        "moduleApproveDepartmentVoucher": {
          "type": "boolean"
        },
        "moduleApproveProjectVoucher": {
          "type": "boolean"
        },
        "moduleApproveVoucher": {
          "type": "boolean"
        },
        "moduleArchive": {
          "type": "boolean"
        },
        "moduleAutoBankReconciliation": {
          "type": "boolean"
        },
        "moduleAutoCustomerNumber": {
          "type": "boolean"
        },
        "moduleAutoProjectNumber": {
          "type": "boolean"
        },
        "moduleAutoVendorNumber": {
          "type": "boolean"
        },
        "moduleBoligmappa": {
          "type": "boolean"
        },
        "moduleCRM": {
          "type": "boolean"
        },
        "moduleCashCreditAprila": {
          "type": "boolean"
        },
        "moduleContact": {
          "type": "boolean"
        },
        "moduleControlSchemaRequiredHourTracking": {
          "type": "boolean"
        },
        "moduleControlSchemaRequiredInvoicing": {
          "type": "boolean"
        },
        "moduleCurrency": {
          "type": "boolean"
        },
        "moduleCustomerCategories": {
          "type": "boolean"
        },
        "moduleCustomerCategory1": {
          "type": "boolean"
        },
        "moduleCustomerCategory2": {
          "type": "boolean"
        },
        "moduleCustomerCategory3": {
          "type": "boolean"
        },
        "moduleDepartmentAccounting": {
          "type": "boolean"
        },
        "moduleDivisions": {
          "type": "boolean"
        },
        "moduleElectro": {
          "type": "boolean"
        },
        "moduleEmail": {
          "type": "boolean"
        },
        "moduleEmployeeAccounting": {
          "type": "boolean"
        },
        "moduleEmployeeCategory": {
          "type": "boolean"
        },
        "moduleEncryptedPaySlip": {
          "type": "boolean"
        },
        "moduleFactoring": {
          "type": "boolean"
        },
        "moduleFactoringAprila": {
          "type": "boolean"
        },
        "moduleHistorical": {
          "type": "boolean"
        },
        "moduleHolydayPlan": {
          "type": "boolean"
        },
        "moduleHourCost": {
          "type": "boolean"
        },
        "moduleInvoiceOptionAutoinvoiceEhf": {
          "type": "boolean"
        },
        "moduleInvoiceOptionAvtaleGiro": {
          "type": "boolean"
        },
        "moduleInvoiceOptionEfaktura": {
          "type": "boolean"
        },
        "moduleInvoiceOptionEhfIncoming": {
          "type": "boolean"
        },
        "moduleInvoiceOptionEhfOutbound": {
          "type": "boolean"
        },
        "moduleInvoiceOptionPaper": {
          "type": "boolean"
        },
        "moduleInvoiceOptionVipps": {
          "type": "boolean"
        },
        "moduleInvoiceScanning": {
          "type": "boolean"
        },
        "moduleLogistics": {
          "type": "boolean"
        },
        "moduleMamut": {
          "type": "boolean"
        },
        "moduleMesan": {
          "type": "boolean"
        },
        "moduleNetsEboks": {
          "type": "boolean"
        },
        "moduleNetsPrintInvoice": {
          "type": "boolean"
        },
        "moduleNetsPrintSalary": {
          "type": "boolean"
        },
        "moduleNrf": {
          "type": "boolean"
        },
        "moduleOcr": {
          "type": "boolean"
        },
        "moduleOffer": {
          "type": "boolean"
        },
        "moduleOrderDiscount": {
          "type": "boolean"
        },
        "moduleOrderLineCost": {
          "type": "boolean"
        },
        "moduleOrderMarkup": {
          "type": "boolean"
        },
        "moduleOrderNumber": {
          "type": "boolean"
        },
        "moduleOrderOut": {
          "type": "boolean"
        },
        "modulePayrollAccounting": {
          "type": "boolean"
        },
        "modulePayrollAccountingNO": {
          "type": "boolean"
        },
        "modulePensionreport": {
          "type": "boolean"
        },
        "moduleProductAccounting": {
          "type": "boolean"
        },
        "moduleProductInvoice": {
          "type": "boolean"
        },
        "moduleProjectAccounting": {
          "type": "boolean"
        },
        "moduleProjectBudget": {
          "type": "boolean"
        },
        "moduleProvisionSalary": {
          "type": "boolean"
        },
        "moduleRemit": {
          "type": "boolean"
        },
        "moduleRemitAutoPay": {
          "type": "boolean"
        },
        "moduleRemitNets": {
          "type": "boolean"
        },
        "moduleRemitZtl": {
          "type": "boolean"
        },
        "moduleResourceGroups": {
          "type": "boolean"
        },
        "moduleResultBudget": {
          "type": "boolean"
        },
        "moduleSmartScan": {
          "type": "boolean"
        },
        "moduleSwedish": {
          "type": "boolean"
        },
        "moduleTimeBalance": {
          "type": "boolean"
        },
        "moduleTravelExpense": {
          "type": "boolean"
        },
        "moduleTravelExpenseRates": {
          "type": "boolean"
        },
        "moduleVacationBalance": {
          "type": "boolean"
        },
        "moduleVendor": {
          "type": "boolean"
        },
        "moduleVoucherAutomation": {
          "type": "boolean"
        },
        "moduleVoucherExport": {
          "type": "boolean"
        },
        "moduleVoucherScanning": {
          "type": "boolean"
        },
        "moduleVoucherTypes": {
          "type": "boolean"
        },
        "moduleWageExport": {
          "type": "boolean"
        },
        "moduleWageProjectAccounting": {
          "type": "boolean"
        },
        "moduleWarehouse": {
          "type": "boolean"
        },
        "moduleWorkingHours": {
          "type": "boolean"
        },
        "moduleaccountingexternal": {
          "type": "boolean"
        },
        "moduleaccountinginternal": {
          "type": "boolean"
        },
        "moduleaccountingreports": {
          "type": "boolean"
        },
        "modulebudget": {
          "type": "boolean"
        },
        "modulecustomer": {
          "type": "boolean"
        },
        "moduledepartment": {
          "type": "boolean"
        },
        "moduleemployee": {
          "type": "boolean"
        },
        "modulehourlist": {
          "type": "boolean"
        },
        "moduleinvoice": {
          "type": "boolean"
        },
        "modulenote": {
          "type": "boolean"
        },
        "moduleproduct": {
          "type": "boolean"
        },
        "moduleproject": {
          "type": "boolean"
        },
        "moduleprojectcategory": {
          "type": "boolean"
        },
        "moduleprojecteconomy": {
          "type": "boolean"
        },
        "moduleprojectprognosis": {
          "type": "boolean"
        },
        "moduleprojectsubcontract": {
          "type": "boolean"
        },
        "modulereferencefee": {
          "type": "boolean"
        },
        "moduleresourceallocation": {
          "type": "boolean"
        },
        "modulesubscription": {
          "type": "boolean"
        },
        "moduletask": {
          "type": "boolean"
        },
        "multipleCustomerCategories": {
          "type": "boolean"
        },
        "sendPayslipsByEmail": {
          "type": "boolean"
        },
        "showRecentlyClosedProjectsOnSupplierInvoice": {
          "type": "boolean"
        },
        "showTravelReportLetterhead": {
          "type": "boolean"
        },
        "tripletexSupportLoginAccessCompanyLevel": {
          "type": "boolean"
        },
        "yearEndReport": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SegmentationRoles": {
      "properties": {
        "isAutWageAdminSetting": {
          "type": "boolean"
        },
        "isAuthAccountingSettings": {
          "type": "boolean"
        },
        "isAuthCompanyAdmin": {
          "type": "boolean"
        },
        "isAuthCompanyWageAdmin": {
          "type": "boolean"
        },
        "isAuthCreateOrder": {
          "type": "boolean"
        },
        "isAuthInboxVoucher": {
          "type": "boolean"
        },
        "isAuthInvoiceAdminSettings": {
          "type": "boolean"
        },
        "isAuthInvoicing": {
          "type": "boolean"
        },
        "isAuthReadOnly": {
          "type": "boolean"
        },
        "isAuthTravelsAndExpensesAdminSettings": {
          "type": "boolean"
        },
        "isAuthWageSettings": {
          "type": "boolean"
        },
        "roleAccountAdministrator": {
          "type": "boolean"
        },
        "roleAdministrator": {
          "type": "boolean"
        },
        "roleSystemAdministrator": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ServiceActivationResponseDTO": {
      "properties": {
        "result": {
          "$ref": "#/definitions/Result"
        }
      },
      "type": "object"
    },
    "SessionToken": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "consumerToken": {
          "$ref": "#/definitions/ConsumerToken"
        },
        "employeeToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "encryptionKey": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "token": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "expirationDate",
        "token"
      ],
      "type": "object"
    },
    "SignatureCombinationDTO": {
      "properties": {
        "companyRepresentativeDTOList": {
          "items": {
            "$ref": "#/definitions/CompanyRepresentativeDTO"
          },
          "type": "array"
        },
        "signatureCombinationDescription": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SimplePaymentWidget": {
      "properties": {
        "amount": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Amount of the payment to be registered in the Payment Widget"
        },
        "bankAccount": {
          "description": "Bank account used to register payment in the Payment Widget",
          "type": "string"
        },
        "date": {
          "description": "Date of the payment to be registered in the Payment Widget",
          "type": "string"
        },
        "kid": {
          "description": "Kid used to register payment in the Payment Widget",
          "type": "string"
        },
        "paymentTypes": {
          "description": "List of payment types used in this Payment Widget",
          "items": {
            "$ref": "#/definitions/PaymentWidgetPaymentType"
          },
          "type": "array"
        },
        "readOnlyBankAccount": {
          "description": "Field for making the bank account field readOnly in the Payment Widget",
          "type": "boolean"
        },
        "readOnlyKid": {
          "description": "Field for making the kid field readOnly in the Payment Widget",
          "type": "boolean"
        },
        "selectedPaymentType": {
          "$ref": "#/definitions/PaymentWidgetPaymentType",
          "description": "Default payment type for this Payment Widget"
        }
      },
      "type": "object"
    },
    "SnowplowContext": {
      "properties": {
        "data": {
          "type": "object"
        },
        "schema": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SnowplowContextSnowplowGlobalCompany": {
      "properties": {
        "data": {
          "$ref": "#/definitions/SnowplowGlobalCompany"
        },
        "schema": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SnowplowContextSnowplowGlobalEmployee": {
      "properties": {
        "data": {
          "$ref": "#/definitions/SnowplowGlobalEmployee"
        },
        "schema": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SnowplowGlobalCompany": {
      "properties": {
        "companyId": {
          "format": "int32",
          "type": "integer"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "customerType": {
          "enum": [
            "Mamut",
            "Agro",
            "Paying",
            "Free",
            "Test"
          ],
          "type": "string"
        },
        "isAccountant": {
          "type": "boolean"
        },
        "isPaying": {
          "type": "boolean"
        },
        "organizationNumber": {
          "format": "int64",
          "type": "integer"
        },
        "package": {
          "type": "string"
        },
        "pilotFeatures": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "registrationDate": {
          "format": "date-time",
          "type": "string"
        },
        "startDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SnowplowGlobalEmployee": {
      "properties": {
        "employeeId": {
          "format": "int32",
          "type": "integer"
        },
        "isAccountant": {
          "type": "boolean"
        },
        "roleIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "tripletexEmployeeId": {
          "format": "int32",
          "type": "integer"
        },
        "userId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SpacesuitNotificationMeta": {
      "properties": {
        "clientName": {
          "type": "string"
        },
        "notificationSettingsUrl": {
          "type": "string"
        },
        "sseUrl": {
          "type": "string"
        },
        "stompUrl": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SseInitializationResultDTO": {
      "properties": {
        "contextId": {
          "description": "The contextId of the employee",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "currentHiddenCursor": {
          "description": "The current hidden cursor",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "currentReadCursor": {
          "description": "The current read cursor",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        },
        "employeeId": {
          "description": "The companyId of the employee",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "StandardTime": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "fromDate": {
          "type": "string"
        },
        "hoursPerDay": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fromDate",
        "hoursPerDay"
      ],
      "type": "object"
    },
    "Stock": {
      "properties": {
        "changesInPeriod": {
          "readOnly": true,
          "type": "number"
        },
        "closingStock": {
          "readOnly": true,
          "type": "number"
        },
        "inventory": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "inventoryId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "openingStock": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "Stocktaking": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory",
          "description": "The inventory this applies for"
        },
        "isCompleted": {
          "type": "boolean"
        },
        "number": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "typeOfStocktaking": {
          "description": "[Deprecated] Define the type of stoctaking.<br>ALL_PRODUCTS_WITH_INVENTORIES: Create a stocktaking for all products with inventories.<br>INCLUDE_PRODUCTS: Create a stocktaking which includes all products.<br>NO_PRODUCTS: Create a stocktaking without products.<br>If not specified, the value 'ALL_PRODUCTS_WITH_INVENTORIES' is used.",
          "enum": [
            "ALL_PRODUCTS_WITH_INVENTORIES",
            "INCLUDE_PRODUCTS",
            "NO_PRODUCTS"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "inventory"
      ],
      "type": "object"
    },
    "StorebrandPensionOnboarding": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currentPensionProvider": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "firstName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "hasActivePensionContracts": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastName": {
          "maxLength": 100,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 25,
          "minLength": 0,
          "type": "string"
        },
        "role": {
          "enum": [
            "CEO",
            "CHAIRMAN",
            "INSURANCE",
            "ACCOUNTANT_EXTERNAL",
            "HR",
            "FINANCE",
            "ACCOUNTANT_INTERNAL",
            "OTHER"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currentPensionProvider",
        "hasActivePensionContracts",
        "role"
      ],
      "type": "object"
    },
    "StorebrandPensionOnboardingQualify": {
      "properties": {
        "employee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "partTimePercentageWarning": {
          "readOnly": true,
          "type": "string"
        },
        "requiredModules": {
          "readOnly": true,
          "type": "boolean"
        },
        "socialSecurityNumberWarning": {
          "readOnly": true,
          "type": "string"
        },
        "validEmployees": {
          "readOnly": true,
          "type": "boolean"
        },
        "yearlyWagesWarning": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Subscription": {
      "properties": {
        "authHeaderName": {
          "description": "Custom authentication header name",
          "example": "Authorization",
          "maxLength": 255,
          "type": "string"
        },
        "authHeaderValue": {
          "description": "Custom authentication header value (write only)",
          "example": "Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
          "maxLength": 4096,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "event": {
          "description": "Event name (from /v2/event) you wish to subscribe to. Form should be: *subject.verb*.",
          "example": "customer.create",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "fields": {
          "description": "The fields in the object delivered with the notification callback, nested as in other API calls.",
          "example": "id,version,number",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "description": "The status of the subscription.",
          "enum": [
            "ACTIVE",
            "DISABLED",
            "DISABLED_TOO_MANY_ERRORS",
            "DISABLED_RATE_LIMIT_EXCEEDED",
            "DISABLED_MISUSE"
          ],
          "type": "string"
        },
        "targetUrl": {
          "description": "The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS. Basic authentication is supported.",
          "example": "https://username:password@myintegration.example/tripletexCallback",
          "maxLength": 255,
          "minLength": 1,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "event",
        "targetUrl"
      ],
      "type": "object"
    },
    "Supplier": {
      "properties": {
        "accountManager": {
          "$ref": "#/definitions/Employee"
        },
        "bankAccountPresentation": {
          "description": "List of bankAccount for this supplier",
          "items": {
            "$ref": "#/definitions/CompanyBankAccountPresentation"
          },
          "type": "array"
        },
        "bankAccounts": {
          "description": "[DEPRECATED] List of the bank account numbers for this supplier.  Norwegian bank account numbers only.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "category1": {
          "$ref": "#/definitions/CustomerCategory",
          "description": "Category 1 of this supplier"
        },
        "category2": {
          "$ref": "#/definitions/CustomerCategory",
          "description": "Category 2 of this supplier"
        },
        "category3": {
          "$ref": "#/definitions/CustomerCategory",
          "description": "Category 3 of this supplier"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "description": "The preferred currency for this supplier"
        },
        "customerNumber": {
          "format": "int32",
          "type": "integer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/DeliveryAddress"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "format": "email",
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceEmail": {
          "format": "email",
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "isCustomer": {
          "description": "Determine if the supplier is also a customer",
          "type": "boolean"
        },
        "isInactive": {
          "readOnly": true,
          "type": "boolean"
        },
        "isPrivateIndividual": {
          "type": "boolean"
        },
        "isSupplier": {
          "readOnly": true,
          "type": "boolean"
        },
        "isWholesaler": {
          "readOnly": true,
          "type": "boolean"
        },
        "ledgerAccount": {
          "$ref": "#/definitions/Account",
          "description": "Can be used to specify the ledger account of the supplier if it's different from the default 2400 account"
        },
        "locale": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "organizationNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "overdueNoticeEmail": {
          "description": "The email address of the customer where the noticing emails are sent in case of an overdue",
          "format": "email",
          "maxLength": 254,
          "minLength": 0,
          "type": "string"
        },
        "phoneNumber": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "showProducts": {
          "type": "boolean"
        },
        "supplierNumber": {
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "SupplierAutomation": {
      "properties": {
        "activated": {
          "description": "Is automation activated?",
          "type": "boolean"
        },
        "amountMaxFabricAiVendorInvoice": {
          "description": "If set, gives the amount limit for automating invoices for this vendor, it the total invoice amount is above the limit, the invoice is not automated.",
          "format": "int32",
          "type": "integer"
        },
        "automatedCount": {
          "description": "Number of automated vouchers",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "automaticallyPostedInvoicesLast10Count": {
          "description": "Number automatically of the latest 10 posted invoices",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "automaticallyPostedInvoicesLast10CountAutomation": {
          "description": "Number automatically of the latest 10 posted invoices",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "automaticallyPostedInvoicesLast10CountAutomationRule": {
          "description": "Number automatically of the latest 10 posted invoices",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "automationRulesDetails": {
          "$ref": "#/definitions/AutomationRuleDetails",
          "description": "The vendor rule details of the vendor if he/she has chosen to have his own rules on the automation instead of FabricAi."
        },
        "canSendEhf": {
          "description": "Whether the vendor can send EHF",
          "type": "boolean"
        },
        "category": {
          "description": "Automation category. 0-3.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completedInvoices": {
          "description": "Number of invoices with status completed based on the last 10 invoices.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "dateRequestEhfSent": {
          "description": "The date the user has sent the request to a supplier to receive EHF.",
          "type": "string"
        },
        "email": {
          "description": "email of the vendor",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notAutomaticallyPostedInvoicesLast10Count": {
          "description": "Number of not automatically of the latest 10 posted invoices",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "notCompletedInvoices": {
          "description": "Number of invoices with status not completed based on the last 10 invoices.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "number": {
          "type": "string"
        },
        "paymentTypeFabricAi": {
          "description": "If set, the payment type to be used when automating an invoice from this vendor.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "vendorAccountNumber": {
          "format": "int32",
          "type": "integer"
        },
        "vendorId": {
          "format": "int32",
          "type": "integer"
        },
        "voucherCount": {
          "description": "Number of EHF vouchers send from this supplier regardless of time.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "voucherCountLast90DaysEhf": {
          "description": "Number of EHF vouchers last 90 days.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "voucherCountLast90DaysNonEhf": {
          "description": "Number of non-EHF vouchers last 90 days.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "canSendEhf",
        "email",
        "name",
        "number",
        "vendorAccountNumber",
        "vendorId"
      ],
      "type": "object"
    },
    "SupplierBalance": {
      "properties": {
        "balanceChange": {
          "readOnly": true,
          "type": "number"
        },
        "balanceIn": {
          "readOnly": true,
          "type": "number"
        },
        "balanceInCurrencies": {
          "description": "Currencies that have been used prior to this period, for the given filter",
          "items": {
            "$ref": "#/definitions/Currency"
          },
          "readOnly": true,
          "type": "array"
        },
        "balanceOut": {
          "readOnly": true,
          "type": "number"
        },
        "sumAmountNegative": {
          "readOnly": true,
          "type": "number"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        }
      },
      "type": "object"
    },
    "SupplierInvoice": {
      "properties": {
        "amount": {
          "description": "In the company’s currency, typically NOK. Is 0 if value is missing.",
          "readOnly": true,
          "type": "number"
        },
        "amountCurrency": {
          "description": "In the specified currency.",
          "type": "number"
        },
        "amountExcludingVat": {
          "description": "Amount excluding VAT (NOK). Is 0 if value is missing.",
          "readOnly": true,
          "type": "number"
        },
        "amountExcludingVatCurrency": {
          "description": "Amount excluding VAT in the specified currency. Is 0 if value is missing.",
          "readOnly": true,
          "type": "number"
        },
        "approvalListElements": {
          "items": {
            "$ref": "#/definitions/VoucherApprovalListElement"
          },
          "readOnly": true,
          "type": "array"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoiceDate": {
          "type": "string"
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "invoiceNumber": {
          "description": "Invoice number",
          "maxLength": 100,
          "type": "string"
        },
        "isCreditNote": {
          "readOnly": true,
          "type": "boolean"
        },
        "kidOrReceiverReference": {
          "description": "KID or message",
          "type": "string"
        },
        "orderLines": {
          "items": {
            "$ref": "#/definitions/OrderLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "originalInvoiceDocumentId": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "outstandingAmount": {
          "description": "The amount outstanding on the invoice, in the invoice currency.",
          "readOnly": true,
          "type": "number"
        },
        "payments": {
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true,
          "type": "array"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier",
          "description": "The invoice supplier"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "description": "The invoice voucher."
        }
      },
      "required": [
        "invoiceDate",
        "invoiceDueDate"
      ],
      "type": "object"
    },
    "SupplierProduct": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "cost": {
          "description": "Price purchase (cost) in the company's currency",
          "type": "number"
        },
        "costExcludingVatCurrency": {
          "description": "Price purchase (cost) excluding VAT in the product's currency",
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "description": {
          "type": "string"
        },
        "discountPrice": {
          "readOnly": true,
          "type": "number"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "ean": {
          "maxLength": 14,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isDeletable": {
          "readOnly": true,
          "type": "boolean"
        },
        "isEfoNelfoProduct": {
          "readOnly": true,
          "type": "boolean"
        },
        "isInactive": {
          "type": "boolean"
        },
        "isMainSupplierProduct": {
          "description": "This feature is available only in pilot",
          "type": "boolean"
        },
        "isStockItem": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "priceExcludingVatCurrency": {
          "description": "Price of purchase excluding VAT in the product's currency",
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "description": "Price of purchase including VAT in the product's currency",
          "type": "number"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        },
        "stockOfGoods": {
          "readOnly": true,
          "type": "number"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "vendorName": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "wholesalerId": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "supplier"
      ],
      "type": "object"
    },
    "SystemMessage": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SystemReportCategoryDTO": {
      "properties": {
        "icon": {
          "description": "The icon for the report category",
          "type": "string"
        },
        "reports": {
          "description": "The reports in this report category",
          "items": {
            "$ref": "#/definitions/SystemReportDTO"
          },
          "type": "array"
        },
        "subCategories": {
          "description": "The report categories in this report category",
          "items": {
            "$ref": "#/definitions/SystemReportCategoryDTO"
          },
          "type": "array"
        },
        "textKey": {
          "description": "The text key for the name of the report category",
          "type": "string"
        },
        "theme": {
          "description": "The theme of the report category",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SystemReportDTO": {
      "properties": {
        "path": {
          "description": "The path to the report",
          "type": "string"
        },
        "text": {
          "description": "The name of the report",
          "type": "string"
        },
        "textKey": {
          "description": "The text key for the name of the report",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TangibleFixedAsset": {
      "properties": {
        "accountNumber": {
          "readOnly": true,
          "type": "string"
        },
        "accountingValueProfitAndLoss": {
          "readOnly": true,
          "type": "string"
        },
        "acquisitionCost": {
          "readOnly": true,
          "type": "number"
        },
        "adjustmentOfInputVat": {
          "readOnly": true,
          "type": "number"
        },
        "basisForDepreciationOrIncomeRecognition": {
          "readOnly": true,
          "type": "number"
        },
        "basisForDepreciationOrIncomeRecognitionTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "depreciation": {
          "readOnly": true,
          "type": "number"
        },
        "depreciationDifference": {
          "readOnly": true,
          "type": "number"
        },
        "depreciationPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "depreciationPercentageTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "depreciationTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "improvements": {
          "readOnly": true,
          "type": "number"
        },
        "incomeRecognitionOfNegativeBalance": {
          "readOnly": true,
          "type": "number"
        },
        "infoMessageDepreciation": {
          "readOnly": true,
          "type": "string"
        },
        "infoMessageIncomeRecognition": {
          "readOnly": true,
          "type": "string"
        },
        "infoResidualWriteOff": {
          "readOnly": true,
          "type": "string"
        },
        "lossTransferedToProfitAndLossAccount": {
          "readOnly": true,
          "type": "number"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "negate": {
          "readOnly": true,
          "type": "boolean"
        },
        "newAcquisitions": {
          "readOnly": true,
          "type": "number"
        },
        "objectGroup": {
          "readOnly": true,
          "type": "string"
        },
        "objectIdentifier": {
          "readOnly": true,
          "type": "string"
        },
        "obviousChangeOfValue": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "profitTransferedToProfitAndLossAccount": {
          "readOnly": true,
          "type": "number"
        },
        "publicSubsidies": {
          "readOnly": true,
          "type": "number"
        },
        "reversalOfSubsidiesForRegionalInvestments": {
          "readOnly": true,
          "type": "number"
        },
        "salesAndOtherRealisation": {
          "readOnly": true,
          "type": "number"
        },
        "salesAndOtherRealisationRecognition": {
          "readOnly": true,
          "type": "number"
        },
        "straightLineDepreciation": {
          "readOnly": true,
          "type": "number"
        },
        "straightLineDepreciationTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "subsidiesForRegionalInvestments": {
          "readOnly": true,
          "type": "number"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        },
        "unknownTransactionType": {
          "readOnly": true,
          "type": "number"
        },
        "warningTooHighPercentage": {
          "readOnly": true,
          "type": "string"
        },
        "warningTooLowPercentage": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "Task": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "status": {
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TaskDTO": {
      "properties": {
        "tasks": {
          "items": {
            "$ref": "#/definitions/TaskWidgetDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TaskWidgetDTO": {
      "properties": {
        "icon": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TaxCalculation": {
      "properties": {
        "accumulatedLoss": {
          "readOnly": true,
          "type": "number"
        },
        "basisDefferedTax": {
          "readOnly": true,
          "type": "number"
        },
        "basisDefferedTaxAssets": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedDeferredTax": {
          "readOnly": true,
          "type": "number"
        },
        "calculatedDeferredTaxAssets": {
          "readOnly": true,
          "type": "number"
        },
        "decreasedDeferredTax": {
          "readOnly": true,
          "type": "number"
        },
        "decreasedDeferredTaxAssets": {
          "readOnly": true,
          "type": "number"
        },
        "deferredTaxAssetsClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "deferredTaxAssetsOpeningBalance": {
          "readOnly": true,
          "type": "number"
        },
        "deferredTaxAssetsToBePosted": {
          "readOnly": true,
          "type": "number"
        },
        "deferredTaxClosingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "deferredTaxOpeningBalance": {
          "readOnly": true,
          "type": "number"
        },
        "deferredTaxToBePosted": {
          "readOnly": true,
          "type": "number"
        },
        "increasedDeferredTax": {
          "readOnly": true,
          "type": "number"
        },
        "increasedDeferredTaxAssets": {
          "readOnly": true,
          "type": "number"
        },
        "objectIdentifier": {
          "readOnly": true,
          "type": "number"
        },
        "taxCalculated": {
          "readOnly": true,
          "type": "number"
        },
        "taxDiff": {
          "readOnly": true,
          "type": "number"
        },
        "taxPosted": {
          "readOnly": true,
          "type": "number"
        },
        "taxRateNextYear": {
          "readOnly": true,
          "type": "number"
        },
        "taxRateThisYear": {
          "readOnly": true,
          "type": "number"
        },
        "taxableProfit": {
          "readOnly": true,
          "type": "number"
        },
        "tooLittleTaxSetAside": {
          "readOnly": true,
          "type": "number"
        },
        "tooMuchTaxSetAside": {
          "readOnly": true,
          "type": "number"
        },
        "totalAdditions": {
          "readOnly": true,
          "type": "number"
        },
        "totalBasis": {
          "readOnly": true,
          "type": "number"
        },
        "totalDeductions": {
          "readOnly": true,
          "type": "number"
        },
        "totalTaxSetAside": {
          "readOnly": true,
          "type": "number"
        },
        "totalTaxToSetAsside": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "TaxReturn": {
      "properties": {
        "closingBalance": {
          "readOnly": true,
          "type": "number"
        },
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "TaxReturnOverview": {
      "properties": {
        "accumulatedLossForNextYear": {
          "readOnly": true,
          "type": "number"
        },
        "accumulatedLossFromPreviousYear": {
          "readOnly": true,
          "type": "number"
        },
        "aidSchemes": {
          "items": {
            "$ref": "#/definitions/AidScheme"
          },
          "type": "array"
        },
        "businessIncome": {
          "readOnly": true,
          "type": "number"
        },
        "capitalAndDebt": {
          "items": {
            "$ref": "#/definitions/TaxReturn"
          },
          "type": "array"
        },
        "groupContributionReceived": {
          "readOnly": true,
          "type": "number"
        },
        "groupContributionReceivedGrouping": {
          "readOnly": true,
          "type": "string"
        },
        "lossesInBusinessAndRealEstate": {
          "readOnly": true,
          "type": "number"
        },
        "obtainedPrivateAgreementAndDebtForgiveness": {
          "readOnly": true,
          "type": "number"
        },
        "obtainedPrivateAgreementAndDebtForgivenessGrouping": {
          "readOnly": true,
          "type": "string"
        },
        "paidGroupContribution": {
          "readOnly": true,
          "type": "number"
        },
        "paidGroupContributionGrouping": {
          "readOnly": true,
          "type": "string"
        },
        "posts": {
          "items": {
            "$ref": "#/definitions/GenericData"
          },
          "type": "array"
        },
        "showConcernRelation": {
          "readOnly": true,
          "type": "boolean"
        },
        "sumDebt": {
          "readOnly": true,
          "type": "number"
        },
        "sumGrossAssets": {
          "readOnly": true,
          "type": "number"
        },
        "taxToPay": {
          "readOnly": true,
          "type": "number"
        },
        "taxValueCustomerReceivables": {
          "readOnly": true,
          "type": "number"
        },
        "taxValueInventories": {
          "readOnly": true,
          "type": "number"
        },
        "taxValueTangibleFixedAssets": {
          "readOnly": true,
          "type": "number"
        },
        "taxableProfitForTheYear": {
          "readOnly": true,
          "type": "number"
        },
        "totalDebtInAccounts": {
          "readOnly": true,
          "type": "number"
        },
        "useOfLossCarryForwards": {
          "readOnly": true,
          "type": "number"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "TaxcardContactInternal": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "displayName": {
          "readOnly": true,
          "type": "string"
        },
        "email": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "phoneNumberMobile": {
          "maxLength": 100,
          "type": "string"
        },
        "phoneNumberMobileCountry": {
          "$ref": "#/definitions/Country",
          "description": "The country of the mobile phone number. If not set, the country is derived as best as possible from phoneNumberMobile. NB! 8 digit numbers are assumed to be Norwegian."
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TaxcardEmployeeInternal": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "maxLength": 100,
          "type": "string"
        },
        "taxcard": {
          "$ref": "#/definitions/SalaryTaxcardInternal"
        }
      },
      "type": "object"
    },
    "Template": {
      "properties": {
        "availableFields": {
          "items": {
            "$ref": "#/definitions/InvoiceField"
          },
          "type": "array"
        },
        "colorFields": {
          "items": {
            "$ref": "#/definitions/ColorField"
          },
          "type": "array"
        },
        "commentFields": {
          "items": {
            "$ref": "#/definitions/CommentField"
          },
          "type": "array"
        },
        "defaultFields": {
          "items": {
            "$ref": "#/definitions/InvoiceField"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageFields": {
          "items": {
            "$ref": "#/definitions/ImageField"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "requiredFields": {
          "items": {
            "$ref": "#/definitions/InvoiceField"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TemporaryDifferences": {
      "properties": {
        "changes": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceAccountValue": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceDifferences": {
          "readOnly": true,
          "type": "number"
        },
        "closingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "negate": {
          "readOnly": true,
          "type": "boolean"
        },
        "objectIdentifier": {
          "readOnly": true,
          "type": "string"
        },
        "openingBalanceAccountValue": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceDifferences": {
          "readOnly": true,
          "type": "number"
        },
        "openingBalanceTaxValue": {
          "readOnly": true,
          "type": "number"
        },
        "readOnly": {
          "readOnly": true,
          "type": "boolean"
        },
        "showAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "showTax": {
          "readOnly": true,
          "type": "boolean"
        },
        "source": {
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "readOnly": true,
          "type": "string"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "type": "object"
    },
    "TimeClock": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hoursStart": {
          "minimum": 0,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lunchBreakDuration": {
          "minimum": 0,
          "type": "number"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "timeStart": {
          "type": "string"
        },
        "timeStop": {
          "type": "string"
        },
        "timesheetEntry": {
          "$ref": "#/definitions/TimesheetEntry"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "employee",
        "timeStart",
        "timeStop",
        "timesheetEntry"
      ],
      "type": "object"
    },
    "TimesheetAllocated": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hours": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isApproved": {
          "type": "boolean"
        },
        "managerComment": {
          "maxLength": 255,
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "date",
        "hours"
      ],
      "type": "object"
    },
    "TimesheetEntry": {
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "chargeable": {
          "readOnly": true,
          "type": "boolean"
        },
        "chargeableHours": {
          "readOnly": true,
          "type": "number"
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hourlyCost": {
          "readOnly": true,
          "type": "number"
        },
        "hourlyCostPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "hourlyRate": {
          "readOnly": true,
          "type": "number"
        },
        "hours": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "locked": {
          "description": "Indicates if the hour can be changed.",
          "readOnly": true,
          "type": "boolean"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "timeClocks": {
          "description": "Link to stop watches on this hour.",
          "items": {
            "$ref": "#/definitions/TimeClock"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "activity",
        "date",
        "employee",
        "hours"
      ],
      "type": "object"
    },
    "TimesheetEntrySearchResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "sumAllHours": {
          "readOnly": true,
          "type": "number"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "TimesheetProjectSalaryTypeSpecification": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "type": "number"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "wagePayment": {
          "$ref": "#/definitions/Payslip"
        }
      },
      "required": [
        "count",
        "date",
        "employee",
        "salaryType"
      ],
      "type": "object"
    },
    "TimesheetSalaryTypeSpecification": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "count": {
          "type": "number"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "count",
        "date",
        "employee",
        "salaryType"
      ],
      "type": "object"
    },
    "TimesheetSettings": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "defaultProjectActivity": {
          "$ref": "#/definitions/Activity"
        },
        "flexBalance": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "timeClock": {
          "type": "boolean"
        },
        "timesheetCompleted": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vacationBalance": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TlxNumber": {
      "type": "object"
    },
    "TodoListAmelding": {
      "properties": {
        "accountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "accountManagerName": {
          "type": "string"
        },
        "clientCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customAccountManagerName": {
          "type": "string"
        },
        "customDueDate": {
          "format": "date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "dueDate": {
          "format": "date",
          "type": "string"
        },
        "expandedDetails": {
          "items": {
            "$ref": "#/definitions/TodoListExpandedDetail"
          },
          "type": "array"
        },
        "itemIdentifier": {
          "format": "int32",
          "type": "integer"
        },
        "period": {
          "type": "string"
        },
        "periodStart": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TodoListAnnualAccounts": {
      "properties": {
        "accountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "accountManagerName": {
          "type": "string"
        },
        "clientCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customAccountManagerName": {
          "type": "string"
        },
        "customDueDate": {
          "format": "date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "dueDate": {
          "format": "date",
          "type": "string"
        },
        "itemIdentifier": {
          "format": "int32",
          "type": "integer"
        },
        "period": {
          "type": "string"
        },
        "periodStart": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "url": {
          "type": "string"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TodoListComment": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "maxLength": 1024,
          "minLength": 1,
          "type": "string"
        },
        "createdAt": {
          "readOnly": true,
          "type": "string"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "periodStart": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "comment",
        "customerId",
        "employee",
        "periodStart",
        "type"
      ],
      "type": "object"
    },
    "TodoListExpandedDetail": {
      "properties": {
        "category": {
          "enum": [
            "RECONCILIATION_BANK",
            "RECONCILIATION_LEDGER",
            "RECONCILIATION_CUSTOMER",
            "RECONCILIATION_VENDOR",
            "RECONCILIATION_WAGE",
            "AMELDING_EMPLOYMENT",
            "AMELDING_WAGE_TRANSACTION",
            "WAGE_TRANSACTION_PAID_MANDATORY_DEDUCTION",
            "WAGE_TRANSACTION_PAID_TAX_DEDUCTION",
            "WAGE_TRANSACTION_PAID_PAYROLL_TAX"
          ],
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TodoListHarmonization": {
      "properties": {
        "accountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "accountManagerName": {
          "type": "string"
        },
        "clientCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customAccountManagerName": {
          "type": "string"
        },
        "customDueDate": {
          "format": "date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "dueDate": {
          "format": "date",
          "type": "string"
        },
        "expandedDetails": {
          "items": {
            "$ref": "#/definitions/TodoListExpandedDetail"
          },
          "type": "array"
        },
        "itemIdentifier": {
          "format": "int32",
          "type": "integer"
        },
        "period": {
          "type": "string"
        },
        "periodStart": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TodoListItemStatus": {
      "properties": {
        "lastUpdatedBy": {
          "type": "string"
        },
        "lastUpdatedDate": {
          "format": "date",
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "enum": [
            "OVERDUE",
            "NOT_STARTED",
            "INCOMPLETE",
            "COMPLETED",
            "NOT_APPLICABLE"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TodoListPeriodOverview": {
      "properties": {
        "accountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "accountManagerName": {
          "type": "string"
        },
        "clientCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customAccountManagerName": {
          "type": "string"
        },
        "customDueDate": {
          "format": "date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "dueDate": {
          "format": "date",
          "type": "string"
        },
        "itemIdentifier": {
          "format": "int32",
          "type": "integer"
        },
        "period": {
          "type": "string"
        },
        "periodStart": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "url": {
          "type": "string"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TodoListSingleChanges": {
      "properties": {
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customDate": {
          "description": "The customized date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "originalAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "originalDate": {
          "description": "The original date",
          "type": "string"
        },
        "originalStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "periodStart": {
          "description": "The start period",
          "type": "string"
        },
        "type": {
          "enum": [
            "CUSTOM",
            "HARMONIZATION",
            "VAT_RETURNS",
            "AMELDING",
            "WAGE_TRANSACTIONS",
            "PERIOD_OVERVIEW",
            "ANNUAL_ACCOUNTS"
          ],
          "type": "string"
        }
      },
      "required": [
        "customerId",
        "originalDate",
        "periodStart",
        "type"
      ],
      "type": "object"
    },
    "TodoListVat": {
      "properties": {
        "accountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "accountManagerName": {
          "type": "string"
        },
        "clientCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customAccountManagerName": {
          "type": "string"
        },
        "customDueDate": {
          "format": "date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "dueDate": {
          "format": "date",
          "type": "string"
        },
        "itemIdentifier": {
          "format": "int32",
          "type": "integer"
        },
        "period": {
          "type": "string"
        },
        "periodStart": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "url": {
          "type": "string"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TodoListWageTransaction": {
      "properties": {
        "accountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "accountManagerName": {
          "type": "string"
        },
        "clientCompanyId": {
          "format": "int32",
          "type": "integer"
        },
        "clientName": {
          "type": "string"
        },
        "customAccountManagerId": {
          "format": "int32",
          "type": "integer"
        },
        "customAccountManagerName": {
          "type": "string"
        },
        "customDueDate": {
          "format": "date",
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "customerId": {
          "format": "int32",
          "type": "integer"
        },
        "dueDate": {
          "format": "date",
          "type": "string"
        },
        "expandedDetails": {
          "items": {
            "$ref": "#/definitions/TodoListExpandedDetail"
          },
          "type": "array"
        },
        "itemIdentifier": {
          "format": "int32",
          "type": "integer"
        },
        "period": {
          "type": "string"
        },
        "periodStart": {
          "format": "date",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/TodoListItemStatus"
        },
        "year": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TollStationV2": {
      "properties": {
        "coordinate": {
          "$ref": "#/definitions/Coordinate"
        },
        "distance": {
          "$ref": "#/definitions/TlxNumber"
        },
        "name": {
          "type": "string"
        },
        "prices": {
          "items": {
            "$ref": "#/definitions/Price"
          },
          "type": "array"
        },
        "time": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "TotalToll": {
      "properties": {
        "regularToll": {
          "$ref": "#/definitions/TlxNumber"
        },
        "rushHoursToll": {
          "$ref": "#/definitions/TlxNumber"
        },
        "totalPrice": {
          "$ref": "#/definitions/TlxNumber"
        },
        "vehicle": {
          "enum": [
            "NotSet",
            "CarDiesel",
            "CarGasolineOrHybrid",
            "CarZeroEmission",
            "TruckEuroV",
            "TruckEuroVI",
            "CarGeneral",
            "TruckGeneral"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TransportType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isPickUp": {
          "readOnly": true,
          "type": "boolean"
        },
        "nameKey": {
          "maxLength": 100,
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TravelCostCategory": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isInactive": {
          "readOnly": true,
          "type": "boolean"
        },
        "isVatLocked": {
          "readOnly": true,
          "type": "boolean"
        },
        "sequence": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "showOnEmployeeExpenses": {
          "readOnly": true,
          "type": "boolean"
        },
        "showOnTravelExpenses": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "description"
      ],
      "type": "object"
    },
    "TravelDetails": {
      "properties": {
        "departureDate": {
          "type": "string"
        },
        "departureFrom": {
          "maxLength": 255,
          "type": "string"
        },
        "departureTime": {
          "maxLength": 20,
          "type": "string"
        },
        "destination": {
          "maxLength": 255,
          "type": "string"
        },
        "detailedJourneyDescription": {
          "type": "string"
        },
        "isCompensationFromRates": {
          "type": "boolean"
        },
        "isDayTrip": {
          "type": "boolean"
        },
        "isForeignTravel": {
          "type": "boolean"
        },
        "purpose": {
          "type": "string"
        },
        "returnDate": {
          "type": "string"
        },
        "returnTime": {
          "maxLength": 20,
          "type": "string"
        }
      },
      "type": "object"
    },
    "TravelExpense": {
      "properties": {
        "accommodationAllowances": {
          "description": "Link to individual accommodation allowances.",
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          },
          "readOnly": true,
          "type": "array"
        },
        "accountingPeriodClosed": {
          "readOnly": true,
          "type": "boolean"
        },
        "accountingPeriodVATClosed": {
          "readOnly": true,
          "type": "boolean"
        },
        "actions": {
          "items": {
            "$ref": "#/definitions/Link"
          },
          "readOnly": true,
          "type": "array"
        },
        "amount": {
          "readOnly": true,
          "type": "number"
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "approvedDate": {
          "readOnly": true,
          "type": "string"
        },
        "attachment": {
          "$ref": "#/definitions/Document",
          "readOnly": true
        },
        "attachmentCount": {
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "chargeableAmount": {
          "readOnly": true,
          "type": "number"
        },
        "completedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "completedDate": {
          "readOnly": true,
          "type": "string"
        },
        "costs": {
          "description": "Link to individual costs.",
          "items": {
            "$ref": "#/definitions/Cost"
          },
          "type": "array"
        },
        "date": {
          "readOnly": true,
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "fixedInvoicedAmount": {
          "type": "number"
        },
        "highRateVAT": {
          "readOnly": true,
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "isApproved": {
          "readOnly": true,
          "type": "boolean"
        },
        "isChargeable": {
          "type": "boolean"
        },
        "isCompleted": {
          "readOnly": true,
          "type": "boolean"
        },
        "isFixedInvoicedAmount": {
          "type": "boolean"
        },
        "isIncludeAttachedReceiptsWhenReinvoicing": {
          "type": "boolean"
        },
        "isSalaryAdmin": {
          "readOnly": true,
          "type": "boolean"
        },
        "lowRateVAT": {
          "readOnly": true,
          "type": "number"
        },
        "mediumRateVAT": {
          "readOnly": true,
          "type": "number"
        },
        "mileageAllowances": {
          "description": "Link to individual mileage allowances.",
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          },
          "readOnly": true,
          "type": "array"
        },
        "number": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "paymentAmount": {
          "readOnly": true,
          "type": "number"
        },
        "paymentAmountCurrency": {
          "readOnly": true,
          "type": "number"
        },
        "paymentCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip",
          "readOnly": true
        },
        "perDiemCompensations": {
          "description": "Link to individual per diem compensations.",
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          },
          "type": "array"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "rejectedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "rejectedComment": {
          "readOnly": true,
          "type": "string"
        },
        "showPayslip": {
          "readOnly": true,
          "type": "boolean"
        },
        "state": {
          "enum": [
            "ALL",
            "OPEN",
            "APPROVED",
            "SALARY_PAID",
            "DELIVERED",
            "REJECTED"
          ],
          "readOnly": true,
          "type": "string"
        },
        "title": {
          "maxLength": 255,
          "type": "string"
        },
        "travelAdvance": {
          "type": "number"
        },
        "travelDetails": {
          "$ref": "#/definitions/TravelDetails"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      },
      "required": [
        "employee"
      ],
      "type": "object"
    },
    "TravelExpenseRate": {
      "properties": {
        "breakfastDeductionRate": {
          "type": "number"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "dinnerDeductionRate": {
          "type": "number"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lunchDeductionRate": {
          "type": "number"
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "zone": {
          "type": "string"
        }
      },
      "required": [
        "rateCategory",
        "zone"
      ],
      "type": "object"
    },
    "TravelExpenseRateCategory": {
      "properties": {
        "ameldingWageCode": {
          "format": "int32",
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "fromDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isRequiresOvernightAccommodation": {
          "type": "boolean"
        },
        "isRequiresZone": {
          "type": "boolean"
        },
        "isValidAccommodation": {
          "type": "boolean"
        },
        "isValidDayTrip": {
          "type": "boolean"
        },
        "isValidDomestic": {
          "type": "boolean"
        },
        "isValidForeignTravel": {
          "type": "boolean"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "type": {
          "enum": [
            "PER_DIEM",
            "ACCOMMODATION_ALLOWANCE",
            "MILEAGE_ALLOWANCE"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "wageCodeNumber": {
          "maxLength": 10,
          "type": "string"
        }
      },
      "required": [
        "fromDate",
        "toDate"
      ],
      "type": "object"
    },
    "TravelExpenseRateCategoryGroup": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "fromDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isForeignTravel": {
          "type": "boolean"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "toDate": {
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "fromDate",
        "toDate"
      ],
      "type": "object"
    },
    "TravelExpenseSettings": {
      "properties": {
        "accommodationNotCompensated": {
          "type": "boolean"
        },
        "approvalRequired": {
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "mileageNotCompensated": {
          "type": "boolean"
        },
        "perDiemNotCompensated": {
          "type": "boolean"
        },
        "taxFreeMileageRates": {
          "type": "boolean"
        },
        "taxFreePerDiemRates": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "useRates": {
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TravelExpenseZone": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "continent": {
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "countryCode": {
          "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "readOnly": true,
          "type": "string"
        },
        "governmentName": {
          "description": "The Government name ",
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isDisabled": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "zoneName": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "TravelPaymentType": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isInactive": {
          "readOnly": true,
          "type": "boolean"
        },
        "showOnEmployeeExpenses": {
          "readOnly": true,
          "type": "boolean"
        },
        "showOnTravelExpenses": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "description"
      ],
      "type": "object"
    },
    "TrialDTO": {
      "properties": {
        "companyEndDate": {
          "format": "date-time",
          "type": "string"
        },
        "packageName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TrialInfoAutomationDTO": {
      "properties": {
        "correctSuggestions365days": {
          "format": "int32",
          "type": "integer"
        },
        "correctSuggestions90days": {
          "format": "int32",
          "type": "integer"
        },
        "countActivatedVendors": {
          "format": "int32",
          "type": "integer"
        },
        "countDeactivatedVendors": {
          "format": "int32",
          "type": "integer"
        },
        "getvendorsCouldBeAutomated": {
          "format": "int32",
          "type": "integer"
        },
        "percentAutomatedEHF": {
          "format": "int32",
          "type": "integer"
        },
        "percentInvoicesNonEhf": {
          "format": "int32",
          "type": "integer"
        },
        "percentSuggestionsEHF": {
          "format": "int32",
          "type": "integer"
        },
        "percentVendorsNotSendingEhf": {
          "format": "int32",
          "type": "integer"
        },
        "showProjectHint": {
          "type": "boolean"
        },
        "totalAutomated365days": {
          "format": "int32",
          "type": "integer"
        },
        "totalAutomated90days": {
          "format": "int32",
          "type": "integer"
        },
        "totalCorrectSuggestions": {
          "format": "int32",
          "type": "integer"
        },
        "totalCouldBeAutomated365days": {
          "format": "int32",
          "type": "integer"
        },
        "totalCouldBeAutomated90days": {
          "format": "int32",
          "type": "integer"
        },
        "totalEHFinvoices": {
          "format": "int32",
          "type": "integer"
        },
        "vendorsNotSendingEhf": {
          "format": "int32",
          "type": "integer"
        },
        "voucherCountNonEhf": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TriggerDTO": {
      "properties": {
        "calendarName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextFireTime": {
          "format": "date-time",
          "type": "string"
        },
        "previousFireTime": {
          "format": "date-time",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TripDTO": {
      "properties": {
        "distance": {
          "type": "number"
        },
        "sumTollNOK": {
          "type": "number"
        },
        "travelTimeInMinutes": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "TripSearchDTO": {
      "properties": {
        "routePoints": {
          "items": {
            "$ref": "#/definitions/Coordinate"
          },
          "type": "array"
        },
        "vehicleType": {
          "enum": [
            "NotSet",
            "CarDiesel",
            "CarGasolineOrHybrid",
            "CarZeroEmission",
            "TruckEuroV",
            "TruckEuroVI",
            "CarGeneral",
            "TruckGeneral"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "TripSearchResponseDTO": {
      "properties": {
        "distance": {
          "type": "number"
        },
        "tollStations": {
          "items": {
            "$ref": "#/definitions/TollStationV2"
          },
          "type": "array"
        },
        "totalToll": {
          "$ref": "#/definitions/TotalToll"
        },
        "travelTimeInMinutes": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "TripletexAccount": {
      "properties": {
        "accountType": {
          "description": "Is this a test account or a paying account?",
          "enum": [
            "TEST",
            "PAYING",
            "FREE"
          ],
          "type": "string"
        },
        "accountingOffice": {
          "type": "boolean"
        },
        "administrator": {
          "$ref": "#/definitions/Employee",
          "description": "Employee to create. Department on this object will also be created if supplied. If null a dummy user and department will be created instead"
        },
        "administratorPassword": {
          "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)",
          "type": "string"
        },
        "auditor": {
          "type": "boolean"
        },
        "autoValidateUserLogin": {
          "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS.",
          "type": "boolean"
        },
        "bankAccount": {
          "description": "Main bank account",
          "type": "string"
        },
        "chartOfAccountsType": {
          "description": "The chart of accounts to use for the new company",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ],
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/Company",
          "description": "Information about the company to create. Supply as much info as you have, but at least name, type and address."
        },
        "createAdministratorApiToken": {
          "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.",
          "type": "boolean"
        },
        "createCompanyOwnedApiToken": {
          "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.",
          "type": "boolean"
        },
        "customerCardId": {
          "description": "Customer card id is used to indicate what customer account to use when creating the TripletexCompany object. 0 means customer account does not already exist.",
          "format": "int32",
          "type": "integer"
        },
        "customerCategoryId2": {
          "description": "Customer category id used to indicate that the customer is created by Salesforce",
          "format": "int32",
          "type": "integer"
        },
        "invoiceEmail": {
          "description": "Email address used for invoices/reminders",
          "type": "string"
        },
        "invoiceStartDate": {
          "description": "Start date for invoicing",
          "type": "string"
        },
        "marketingConsent": {
          "description": "Marketing consent",
          "enum": [
            "DEFAULT",
            "GRANTED",
            "DENIED"
          ],
          "type": "string"
        },
        "mayCreateTripletexAccounts": {
          "description": "Should the company we are creating be able to create new Tripletex accounts?",
          "type": "boolean"
        },
        "modules": {
          "description": "Sales modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.",
          "items": {
            "$ref": "#/definitions/SalesModuleDTO"
          },
          "type": "array"
        },
        "numberOfPrepaidUsers": {
          "description": "Number of users Prepaid. Only available for some consumers.",
          "format": "int32",
          "type": "integer"
        },
        "numberOfVouchers": {
          "description": "Used to calculate prices.",
          "enum": [
            "INTERVAL_0_100",
            "INTERVAL_101_500",
            "INTERVAL_0_500",
            "INTERVAL_501_1000",
            "INTERVAL_1001_2000",
            "INTERVAL_2001_3500",
            "INTERVAL_3501_5000",
            "INTERVAL_5001_10000",
            "INTERVAL_UNLIMITED"
          ],
          "type": "string"
        },
        "postAccount": {
          "description": "Swedish post account number (PlusGirot)",
          "type": "string"
        },
        "reseller": {
          "type": "boolean"
        },
        "sendEmails": {
          "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true",
          "type": "boolean"
        },
        "signedTC": {
          "description": "Terms and conditions",
          "enum": [
            "DEFAULT",
            "GRANTED",
            "DENIED"
          ],
          "type": "string"
        },
        "vatStatusType": {
          "description": "VAT type",
          "enum": [
            "VAT_REGISTERED",
            "VAT_NOT_REGISTERED",
            "VAT_APPLICANT"
          ],
          "type": "string"
        }
      },
      "required": [
        "accountType",
        "modules"
      ],
      "type": "object"
    },
    "TripletexAccountPricesReturnDTO": {
      "properties": {
        "allPrices": {
          "additionalProperties": {
            "additionalProperties": {
              "$ref": "#/definitions/TlxNumber"
            },
            "type": "object"
          },
          "type": "object"
        },
        "listPriceCategory1UserService": {
          "$ref": "#/definitions/TlxNumber"
        },
        "listPriceCategory1UserStartup": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumService": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumServiceCategory1Users": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumStartup": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumStartupCategory1Users": {
          "$ref": "#/definitions/TlxNumber"
        },
        "sumYearlyService": {
          "$ref": "#/definitions/TlxNumber"
        }
      },
      "type": "object"
    },
    "TripletexAccountReturn": {
      "properties": {
        "administrator": {
          "$ref": "#/definitions/Employee"
        },
        "administratorApiToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "company": {
          "$ref": "#/definitions/Company"
        },
        "companyOwnedApiToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "companyOwnedApiTokenRobotId": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TripletexCompanyModules": {
      "properties": {
        "approvehourlists": {
          "readOnly": true,
          "type": "boolean"
        },
        "approveinvoices": {
          "readOnly": true,
          "type": "boolean"
        },
        "approvemonthlyhourlists": {
          "readOnly": true,
          "type": "boolean"
        },
        "approvetravelreports": {
          "readOnly": true,
          "type": "boolean"
        },
        "autoInvoicing": {
          "readOnly": true,
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "completemonthlyhourlists": {
          "readOnly": true,
          "type": "boolean"
        },
        "completeweeklyhourlists": {
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "moduleAccountantConnectClient": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAccountingExternal": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAccountingReports": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleActivityHourlyWageWageCode": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAdditionProjectMarkup": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAgro": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAhlsellPartner": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAmortization": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleApi20": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleApproveDepartmentVoucher": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleApproveProjectVoucher": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleApproveVoucher": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleArchive": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAutoBankReconciliation": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAutoCustomerNumber": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAutoProjectNumber": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleAutoVendorNumber": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleBoligmappa": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCRM": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCashCreditAprila": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleChangeDebtCollector": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleContact": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleControlSchemaRequiredHourTracking": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleControlSchemaRequiredInvoicing": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCurrency": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCustomerCategories": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCustomerCategory1": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCustomerCategory2": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleCustomerCategory3": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleDepartmentAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleDivisions": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleElectro": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleElektroUnion": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleElproffen": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleEmail": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleEmployeeAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleEmployeeCategory": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleEncryptedPaySlip": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleFactoringAprila": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleFactoringVismaFinance": {
          "enum": [
            "OFF",
            "STARTED",
            "SIGNING_STARTED",
            "ON",
            "IN_REVIEW",
            "DEACTIVATED_FROM_ON",
            "DEACTIVATED_FROM_OFF",
            "FAILED",
            "OPTED_OUT"
          ],
          "readOnly": true,
          "type": "string"
        },
        "moduleFinanceTax": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleGtin": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleHolydayPlan": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoice": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceFeeComment": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceImport": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceOptionAutoinvoiceEhf": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceOptionAvtaleGiro": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceOptionEfaktura": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceOptionPaper": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceOptionVipps": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleInvoiceScanning": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleMamut": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleMesan": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleNetsEboks": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleNetsPrintInvoice": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleNetsPrintSalary": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleNrf": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOcr": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOcrAutoPay": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOffer": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOnninen123": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOrderDiscount": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOrderExt": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOrderLineCost": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOrderMarkup": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOrderNumber": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleOrderOut": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulePayrollAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulePensionreport": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProductAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProductInvoice": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProjectAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProjectBudget": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProjectBudgetReferenceFee": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProjectParticipants": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleProvisionSalary": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleResourceGroups": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleResultBudget": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleRorkjop": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleSmartScan": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleStopWatch": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleSubscriptionAddressList": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleSubscriptionsPeriodisation": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleSwedish": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleTimeBalance": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleTravelExpense": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleTravelExpenseRates": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleVacationBalance": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleVoucherAutomation": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleVoucherScanning": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleVoucherTypes": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleWageAmortization": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleWageExport": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleWageProjectAccounting": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleWarehouse": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleWorkingHours": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleaccountinginternal": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulebudget": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulebunches": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulecustomer": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduledepartment": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleemployee": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulehistorical": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulehourlist": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulenote": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleproduct": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleproject": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleprojectcategory": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleprojecteconomy": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleprojectlocation": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleprojectprognosis": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleprojectsubcontract": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulereferencefee": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduleresourceallocation": {
          "readOnly": true,
          "type": "boolean"
        },
        "modulesubscription": {
          "readOnly": true,
          "type": "boolean"
        },
        "moduletask": {
          "readOnly": true,
          "type": "boolean"
        },
        "monthlyHourlistMinusTimeWarning": {
          "readOnly": true,
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "TypeOfGoods": {
      "properties": {
        "closingStock": {
          "readOnly": true,
          "type": "number"
        },
        "costOfGoodsSold": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataSubTypeGroupId": {
          "readOnly": true,
          "type": "number"
        },
        "genericDataType": {
          "enum": [
            "MISC",
            "TRANSPORT",
            "ACCOMMODATION_AND_RESTAURANT",
            "PROFIT_AND_LOSS",
            "CUSTOMER_RECEIVABLE",
            "INVENTORIES",
            "TANGIBLE_FIXED_ASSETS",
            "RECONCILIATION_OF_EQUITY",
            "PERMANENT_DIFFERENCES",
            "TEMPORARY_DIFFERENCES",
            "DOCUMENT_DOWNLOADED",
            "GROUP_CONTRIBUTIONS",
            "TAX_RETURN",
            "TAX_CALCULATIONS",
            "DOCUMENTATION"
          ],
          "readOnly": true,
          "type": "string"
        },
        "groupId": {
          "readOnly": true,
          "type": "number"
        },
        "openingStock": {
          "readOnly": true,
          "type": "number"
        },
        "productName": {
          "readOnly": true,
          "type": "string"
        },
        "purchaseOfGoods": {
          "readOnly": true,
          "type": "number"
        },
        "salesRevenueAndWithdrawals": {
          "readOnly": true,
          "type": "number"
        },
        "salesRevenueInCash": {
          "readOnly": true,
          "type": "number"
        },
        "typeOfGoods": {
          "enum": [
            "FOOD_STUFFS",
            "TOBACCO_ETC",
            "COFFEE_AND_TEA",
            "SOFT_DRINKS",
            "ALCOPOP_AND_CIDER",
            "BEER",
            "WINE",
            "SPIRITS",
            "OTHER_PRODUCTS"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "UnreadCountDTO": {
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "readCursor": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UpsaleMetric": {
      "properties": {
        "action": {
          "description": "Status for upsale's AutoPay bank dashboard page or enabling / disabling upsale's notifications.",
          "enum": [
            "VISITED",
            "ONBOARDED",
            "DISABLED"
          ],
          "type": "string"
        },
        "actualEmployeeId": {
          "description": "Actual employee's ID.",
          "format": "int32",
          "type": "integer"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "companyId": {
          "description": "The company's ID.",
          "format": "int32",
          "type": "integer"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "loginEmployeeId": {
          "description": "Login employee's ID.",
          "format": "int32",
          "type": "integer"
        },
        "metricType": {
          "description": "The type of the metric used.",
          "enum": [
            "BANK_DASHBOARD",
            "VENDOR",
            "SALARY"
          ],
          "type": "string"
        },
        "tripletexUserId": {
          "description": "Tripletex's user ID.",
          "format": "int32",
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UserFeedback": {
      "properties": {
        "actualEmployeeId": {
          "$ref": "#/definitions/Employee"
        },
        "browser": {
          "maxLength": 100,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "contactRequest": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "loginEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "message": {
          "maxLength": 500,
          "type": "string"
        },
        "pageTitle": {
          "maxLength": 100,
          "type": "string"
        },
        "receivedAt": {
          "format": "date-time",
          "type": "string"
        },
        "team": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "browser",
        "contactRequest",
        "message",
        "pageTitle",
        "team"
      ],
      "type": "object"
    },
    "UserTemplate": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "colors": {
          "items": {
            "$ref": "#/definitions/ColorField"
          },
          "type": "array"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/CommentValue"
          },
          "type": "array"
        },
        "description": {
          "maxLength": 255,
          "type": "string"
        },
        "fields": {
          "items": {
            "enum": [
              "AMOUNT_TO_PAY_MAJOR",
              "AMOUNT_TO_PAY_MINOR",
              "INVOICE_DATE",
              "DUE_DATE",
              "INVOICE_NUMBER",
              "CUSTOMER_NUMBER",
              "OUR_REFERENCE",
              "THEIR_REFERENCE",
              "ACCOUNT",
              "KID",
              "ORDER_LINE_SUMMARY_NET",
              "ORDER_LINE_SUMMARY_VAT",
              "ORDER_LINE_SUMMARY_TOTAL",
              "PROJECT_NAME",
              "OUR_CONTACT",
              "THEIR_CONTACT",
              "DELIVERY_DATE",
              "DELIVERY_ADDRESS",
              "DELIVERY_TOTAL_WEIGHT",
              "SENDER_NAME",
              "SENDER_ADDRESS_LINE_1",
              "SENDER_ADDRESS_LINE_2",
              "SENDER_ZIP_CODE",
              "SENDER_AREA",
              "SENDER_ORG_NUMBER",
              "SENDER_PHONE",
              "SENDER_EMAIL",
              "SENDER_ZIP_AND_CITY",
              "RECIPIENT_NAME",
              "RECIPIENT_ADDRESS_LINE_1",
              "RECIPIENT_ADDRESS_LINE_2",
              "RECIPIENT_ZIP_CODE",
              "RECIPIENT_AREA",
              "RECIPIENT_ORG_NUMBER",
              "RECIPIENT_PHONE",
              "RECIPIENT_EMAIL",
              "RECIPIENT_ZIP_AND_CITY",
              "OL_PRODUCT_NUMBER",
              "OL_DESCRIPTION",
              "OL_QUANTITY",
              "OL_ITEM_COST",
              "OL_VAT",
              "OL_NET_SUM",
              "OL_DISCOUNT",
              "OL_SURCHARGE"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/ImageValue"
          },
          "type": "array"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "template": {
          "enum": [
            "SIMPLE",
            "FANCY",
            "PAY_ME_PAYMENT_FOCUS"
          ],
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "UserTemplateDefaultDTO": {
      "properties": {
        "colors": {
          "items": {
            "$ref": "#/definitions/ColorField"
          },
          "type": "array"
        },
        "comments": {
          "items": {
            "$ref": "#/definitions/CommentValue"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "fields": {
          "items": {
            "enum": [
              "AMOUNT_TO_PAY_MAJOR",
              "AMOUNT_TO_PAY_MINOR",
              "INVOICE_DATE",
              "DUE_DATE",
              "INVOICE_NUMBER",
              "CUSTOMER_NUMBER",
              "OUR_REFERENCE",
              "THEIR_REFERENCE",
              "ACCOUNT",
              "KID",
              "ORDER_LINE_SUMMARY_NET",
              "ORDER_LINE_SUMMARY_VAT",
              "ORDER_LINE_SUMMARY_TOTAL",
              "PROJECT_NAME",
              "OUR_CONTACT",
              "THEIR_CONTACT",
              "DELIVERY_DATE",
              "DELIVERY_ADDRESS",
              "DELIVERY_TOTAL_WEIGHT",
              "SENDER_NAME",
              "SENDER_ADDRESS_LINE_1",
              "SENDER_ADDRESS_LINE_2",
              "SENDER_ZIP_CODE",
              "SENDER_AREA",
              "SENDER_ORG_NUMBER",
              "SENDER_PHONE",
              "SENDER_EMAIL",
              "SENDER_ZIP_AND_CITY",
              "RECIPIENT_NAME",
              "RECIPIENT_ADDRESS_LINE_1",
              "RECIPIENT_ADDRESS_LINE_2",
              "RECIPIENT_ZIP_CODE",
              "RECIPIENT_AREA",
              "RECIPIENT_ORG_NUMBER",
              "RECIPIENT_PHONE",
              "RECIPIENT_EMAIL",
              "RECIPIENT_ZIP_AND_CITY",
              "OL_PRODUCT_NUMBER",
              "OL_DESCRIPTION",
              "OL_QUANTITY",
              "OL_ITEM_COST",
              "OL_VAT",
              "OL_NET_SUM",
              "OL_DISCOUNT",
              "OL_SURCHARGE"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/ImageValue"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "template": {
          "enum": [
            "SIMPLE",
            "FANCY",
            "PAY_ME_PAYMENT_FOCUS"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "VFCustomerResponseDTO": {
      "properties": {
        "companyName": {
          "type": "string"
        },
        "companyOnboardingDate": {
          "format": "date",
          "type": "string"
        },
        "companyOnboardingStatus": {
          "enum": [
            "NOT_STARTED",
            "STARTED",
            "SIGNING_STARTED",
            "IN_REVIEW",
            "ACCEPTED",
            "COMPLETED",
            "REJECTED",
            "CANCELED",
            "FAILED"
          ],
          "type": "string"
        },
        "companyOnboardingStatusLastChangeDate": {
          "format": "date",
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "isContractFactoringCustomer": {
          "type": "boolean"
        },
        "offerPreSelectMode": {
          "enum": [
            "FORCE_SELECT",
            "PRE_SELECTED"
          ],
          "type": "string"
        },
        "orgNumber": {
          "type": "string"
        },
        "productOnboardingStatuses": {
          "items": {
            "$ref": "#/definitions/VFProductOnboardingStatusDTO"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "VFFactoringInvoiceOffer": {
      "properties": {
        "offers": {
          "items": {
            "$ref": "#/definitions/VfFactoringOffer"
          },
          "readOnly": true,
          "type": "array"
        },
        "orderId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "validationErrors": {
          "items": {
            "enum": [
              "CLOSED_ORDER_NOT_ALLOWED",
              "RECURRING_INVOICE_NOT_ALLOWED",
              "DUE_DATE_TOO_SHORT",
              "DUE_DATE_TOO_LONG",
              "CUSTOMER_POSTAL_CODE_MISSING",
              "CUSTOMER_CITY_MISSING",
              "EMPLOYEE_EMAIL_MISSING",
              "EMPLOYEE_NAME_MISSING",
              "ACTUAL_EMPLOYEE_MISSING",
              "ORDER_NOT_FOUND",
              "COMPANY_NOT_VERIFIED",
              "POSTING_ACCOUNT_INVALID",
              "POSTING_ACCOUNT_MISSING",
              "INVALID_CURRENCY",
              "NO_PRELIMINARY_INVOICE",
              "COMPANY_OPTED_OUT"
            ],
            "type": "string"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "VFProductOnboardingStatusDTO": {
      "properties": {
        "onboardingStatus": {
          "enum": [
            "NOT_STARTED",
            "STARTED",
            "SIGNING_STARTED",
            "IN_REVIEW",
            "ACCEPTED",
            "COMPLETED",
            "REJECTED",
            "CANCELED",
            "FAILED"
          ],
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "productOnboardingStatusLastChangeDate": {
          "format": "date-time",
          "type": "string"
        },
        "validFrom": {
          "format": "date-time",
          "type": "string"
        },
        "validTo": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VacationSummary": {
      "properties": {
        "incomingVacationBalance": {
          "readOnly": true,
          "type": "number"
        },
        "outgoingVacationBalance": {
          "readOnly": true,
          "type": "number"
        },
        "vacationTakenInPeriod": {
          "readOnly": true,
          "type": "number"
        },
        "vacationTakenThisYear": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "ValidationError": {
      "properties": {
        "reasons": {
          "description": "The list of reasons of this error",
          "items": {
            "$ref": "#/definitions/ValidationReasonDTO"
          },
          "readOnly": true,
          "type": "array"
        },
        "vatCode": {
          "description": "The vatCode connected to this error",
          "readOnly": true,
          "type": "string"
        },
        "vatSpecificationLineId": {
          "description": "The vatSpecificationLine id the error is connected to",
          "format": "int64",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ValidationReasonDTO": {
      "properties": {
        "developerReason": {
          "description": "Developer message for the error. In some cases it could be a xml error, then more info will be here.",
          "readOnly": true,
          "type": "string"
        },
        "errorCode": {
          "description": "Skatteetatens errorCode",
          "readOnly": true,
          "type": "string"
        },
        "reason": {
          "description": "The actual reason for the validation error",
          "readOnly": true,
          "type": "string"
        },
        "statusType": {
          "description": "The status of the reason",
          "enum": [
            "SUCCESS",
            "INVALID",
            "WARNING",
            "MISSING_INFORMATION"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "VatReturns2022": {
      "properties": {
        "altinnMetadata": {
          "$ref": "#/definitions/AltinnInstance",
          "description": "Metadata about the sending in altinn"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "closedDate": {
          "type": "string"
        },
        "end": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isPaid": {
          "readOnly": true,
          "type": "boolean"
        },
        "receiptId": {
          "description": "Attachment for vat return",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "remainingAmountVatToPay": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "start": {
          "type": "string"
        },
        "status": {
          "description": "The current instance status of the vatReturns.",
          "enum": [
            "NOT_STARTED",
            "INSTANCE_CREATED",
            "VAT_ENVELOPE_DELIVERED",
            "VAT_RETURNS_DELIVERED",
            "ATTACHMENTS_DELIVERED",
            "FILLING_COMPLETE",
            "SENDING_COMPLETE",
            "FEEDBACK_RECEIVED",
            "MANUAL_DELIVERY",
            "USER_FORBIDDEN",
            "SENDING_FAILED"
          ],
          "type": "string"
        },
        "structuredComment": {
          "maxLength": 255,
          "type": "string"
        },
        "totalAmountVatToPay": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "userComment": {
          "type": "string"
        },
        "vatGroups": {
          "items": {
            "$ref": "#/definitions/VatSpecificationGroup"
          },
          "readOnly": true,
          "type": "array"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "VatReturns2022Creation": {
      "properties": {
        "term": {
          "description": "The term of the vatReturns. Must be according to the terms the company have.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "year": {
          "description": "The year of creating the vatReturns",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "term",
        "year"
      ],
      "type": "object"
    },
    "VatReturns2022ValidateCreate": {
      "properties": {
        "accountingPeriodClosed": {
          "readOnly": true,
          "type": "boolean"
        },
        "accountsRequiringHarmonization": {
          "items": {
            "$ref": "#/definitions/Account"
          },
          "readOnly": true,
          "type": "array"
        },
        "alreadyExists": {
          "readOnly": true,
          "type": "boolean"
        },
        "beforeStartBalance": {
          "readOnly": true,
          "type": "boolean"
        },
        "helpAccountPostedOn": {
          "$ref": "#/definitions/Account",
          "readOnly": true
        },
        "incompleteVouchers": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "invalidDate": {
          "readOnly": true,
          "type": "boolean"
        },
        "success": {
          "readOnly": true,
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "VatReturnsComment": {
      "properties": {
        "deliveredSign": {
          "description": "The sign delivered on the structured comment",
          "enum": [
            "ZERO",
            "POSITIVE",
            "NEGATIVE"
          ],
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "description": "Detailed description of the comment",
          "readOnly": true,
          "type": "string"
        },
        "expectedSign": {
          "description": "The sign expected on the structured comment",
          "enum": [
            "ZERO",
            "POSITIVE",
            "NEGATIVE"
          ],
          "readOnly": true,
          "type": "string"
        },
        "technicalName": {
          "description": "Technical name of the comment",
          "readOnly": true,
          "type": "string"
        },
        "title": {
          "description": "Title of the comment",
          "readOnly": true,
          "type": "string"
        },
        "vatSpecificationType": {
          "description": "Detailed description of the comment",
          "enum": [
            "DEFAULT",
            "LOSS_OF_CLAIM",
            "WITHDRAWAL",
            "ADJUSTMENT",
            "REVERSAL",
            "COMPENSATION"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "VatReturnsPaymentInfo": {
      "properties": {
        "account": {
          "description": "The bank account number of Skatteetaten",
          "maxLength": 20,
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Amount to pay or receive"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "dueDate": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "kid": {
          "description": "The KID number from Skatteetaten",
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "vatReturns": {
          "$ref": "#/definitions/VatReturns2022",
          "readOnly": true
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VatReturnsValidationResult": {
      "properties": {
        "errors": {
          "description": "The general error messages the validation has",
          "items": {
            "$ref": "#/definitions/ValidationError"
          },
          "readOnly": true,
          "type": "array"
        },
        "generalMessage": {
          "description": "The general error messages the validation has",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "validationStatus": {
          "description": "The status of general validation",
          "enum": [
            "SUCCESS",
            "INVALID",
            "WARNING",
            "MISSING_INFORMATION"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "VatReturnsVatCodeComment": {
      "properties": {
        "comments": {
          "description": "List of comments for the given vatCode",
          "items": {
            "$ref": "#/definitions/VatReturnsComment"
          },
          "readOnly": true,
          "type": "array"
        },
        "vatCode": {
          "description": "The vatCode",
          "type": "string"
        }
      },
      "type": "object"
    },
    "VatSpecificationGroup": {
      "properties": {
        "lines": {
          "description": "The vat lines",
          "items": {
            "$ref": "#/definitions/VatSpecificationLine"
          },
          "readOnly": true,
          "type": "array"
        },
        "name": {
          "description": "The name of the group",
          "readOnly": true,
          "type": "string"
        },
        "totalAmountVat": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Total vat amount on the group",
          "readOnly": true
        },
        "totalAmountVatBasis": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Total vat basis amount on the group",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "VatSpecificationLine": {
      "properties": {
        "basis": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Basis"
        },
        "expectedSign": {
          "description": "Expected delivery sign",
          "enum": [
            "ZERO",
            "POSITIVE",
            "NEGATIVE"
          ],
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isReversable": {
          "description": "Is Reversable",
          "type": "boolean"
        },
        "rate": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Rate"
        },
        "specificationType": {
          "description": "Vat specificationType",
          "enum": [
            "DEFAULT",
            "LOSS_OF_CLAIM",
            "WITHDRAWAL",
            "ADJUSTMENT",
            "REVERSAL",
            "COMPENSATION"
          ],
          "type": "string"
        },
        "standardCode": {
          "description": "The SAF-T code",
          "format": "int32",
          "type": "integer"
        },
        "structuredComment": {
          "description": "Pre-generated structured comment",
          "maxLength": 255,
          "type": "string"
        },
        "userComment": {
          "description": "User comment",
          "type": "string"
        },
        "vatAmount": {
          "$ref": "#/definitions/TlxNumber",
          "description": "Vat amount"
        },
        "vatReturns2022DTO": {
          "$ref": "#/definitions/VatReturns2022",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType",
          "description": "The vat type used for this line"
        }
      },
      "type": "object"
    },
    "VatTermPeriod": {
      "properties": {
        "defaultTerm": {
          "description": "Default term",
          "readOnly": true,
          "type": "boolean"
        },
        "displayName": {
          "description": "Display name",
          "readOnly": true,
          "type": "string"
        },
        "dueDate": {
          "description": "Due date",
          "readOnly": true,
          "type": "string"
        },
        "endDate": {
          "description": "End date",
          "readOnly": true,
          "type": "string"
        },
        "startDate": {
          "description": "Start date",
          "readOnly": true,
          "type": "string"
        },
        "term": {
          "description": "Term",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "year": {
          "description": "Term year",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VatType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "deductionPercentage": {
          "description": "Percentage of the VAT amount that is deducted. Always 100% for all predefined VAT types, but can be lower for custom types for relative VAT.",
          "type": "number"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "number": {
          "maxLength": 10,
          "type": "string"
        },
        "parentType": {
          "$ref": "#/definitions/VatType",
          "description": "Only used on custom VAT types for relative VAT, gives the link to the parent VAT type. For most purposes the custom VAT type will behave like the parent VAT type, but with different deduction."
        },
        "percentage": {
          "type": "number"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VfFactoringOffer": {
      "properties": {
        "fixedFeeVatAmount": {
          "type": "number"
        },
        "fixedFeeVatExcluded": {
          "type": "number"
        },
        "offerId": {
          "type": "string"
        },
        "offerProductType": {
          "enum": [
            "RECOURSE",
            "NO_RECOURSE",
            "ARM"
          ],
          "type": "string"
        },
        "offerType": {
          "enum": [
            "SOFT_OFFER",
            "HARD_OFFER"
          ],
          "type": "string"
        },
        "orderId": {
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "variableFeeMinimumFeeHit": {
          "type": "boolean"
        },
        "variableFeePricePercentage": {
          "type": "number"
        },
        "variableFeeVatAmount": {
          "type": "number"
        },
        "variableFeeVatExcluded": {
          "type": "number"
        },
        "youWillReceive": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "Video": {
      "properties": {
        "href": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "VismaConnectLogin": {
      "properties": {
        "connectEnabled": {
          "type": "boolean"
        },
        "connectOnboarded": {
          "type": "boolean"
        },
        "needsIntroduction": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "VismaConnectMobileAppLogin": {
      "properties": {
        "accessToken": {
          "description": "Access token from Visma Connect",
          "type": "string"
        },
        "employeeId": {
          "description": "Optional employee ID. Default employee is used when null",
          "format": "int32",
          "type": "integer"
        },
        "expirationDate": {
          "description": "Expiration date for the combined token",
          "type": "string"
        },
        "idToken": {
          "description": "Id token from Visma Connect",
          "type": "string"
        }
      },
      "required": [
        "accessToken",
        "expirationDate",
        "idToken"
      ],
      "type": "object"
    },
    "VismaConnectMobileAppTokens": {
      "properties": {
        "accessToken": {
          "description": "Access token from Visma Connect",
          "type": "string"
        },
        "idToken": {
          "description": "Id token from Visma Connect",
          "type": "string"
        }
      },
      "required": [
        "accessToken",
        "idToken"
      ],
      "type": "object"
    },
    "Voucher": {
      "properties": {
        "attachment": {
          "$ref": "#/definitions/Document",
          "description": "If the documentation for the voucher has been provided from an external source (e.g. another system via API or a user upload) then this is a reference to the document. This is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "document": {
          "$ref": "#/definitions/Document",
          "description": "If the documentation for the voucher has been generated by the system (e.g. an invoice) then this is a reference to the generated document. This document is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "ediDocument": {
          "$ref": "#/definitions/Document",
          "description": "If the voucher is created based on a machine readable document (such as EHF or EFO/NELFO) then this is a reference to that document. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "externalVoucherNumber": {
          "description": "External voucher number.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "description": "System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "postings": {
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "type": "array"
        },
        "reverseVoucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        },
        "supplierVoucherType": {
          "description": "Supplier voucher type - simple and detailed.",
          "enum": [
            "TYPE_SUPPLIER_INVOICE_SIMPLE",
            "TYPE_SUPPLIER_INVOICE_DETAILED"
          ],
          "type": "string"
        },
        "tempNumber": {
          "description": "Temporary voucher number.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucherType": {
          "$ref": "#/definitions/VoucherType",
          "description": "Voucher type. Must not be of type 'Utgående faktura' ('Outgoing Invoice') on new vouchers, instead use voucherType=null or use the Invoice endpoint."
        },
        "year": {
          "description": "System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "date",
        "description",
        "postings"
      ],
      "type": "object"
    },
    "VoucherApprovalListElement": {
      "properties": {
        "actionDate": {
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "commentFromOriginator": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department",
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "organisationLevel": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "project": {
          "$ref": "#/definitions/Project",
          "readOnly": true
        },
        "status": {
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "description": "The voucher.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "VoucherDetailsDTO": {
      "properties": {
        "baseLink": {
          "type": "string"
        },
        "count": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VoucherInboxArchive": {
      "properties": {
        "archiveDate": {
          "type": "string"
        },
        "filename": {
          "description": "Override filename",
          "type": "string"
        },
        "ids": {
          "description": "List of voucherInboxIds to move to archive",
          "type": "string"
        },
        "modelId": {
          "format": "int32",
          "type": "integer"
        },
        "modelType": {
          "description": "Add to specific archive",
          "enum": [
            "NONE",
            "CUSTOMER",
            "SUPPLIER",
            "PROJECT",
            "PRODUCT",
            "INVOICE",
            "EMPLOYEE",
            "ACCOUNT",
            "ASSET"
          ],
          "type": "string"
        },
        "pathId": {
          "description": "Target path in archive",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VoucherInboxContext": {
      "properties": {
        "automatedVouchersThisWeek": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "canUserDelete": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserEdit": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserRegisterAdvancedVoucher": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserRegisterBankReconciliation": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserRegisterCustomsDeclaration": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserRegisterIncome": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserRegisterIncomingInvoice": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserRegisterPaymentIn": {
          "readOnly": true,
          "type": "boolean"
        },
        "canUserUpload": {
          "readOnly": true,
          "type": "boolean"
        },
        "companyName": {
          "readOnly": true,
          "type": "string"
        },
        "contextId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "employeeId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "hasAutomation": {
          "readOnly": true,
          "type": "boolean"
        },
        "hasDepartment": {
          "readOnly": true,
          "type": "boolean"
        },
        "hasProject": {
          "readOnly": true,
          "type": "boolean"
        },
        "inDeveloperMode": {
          "readOnly": true,
          "type": "boolean"
        },
        "locale": {
          "readOnly": true,
          "type": "string"
        },
        "mainBankAccountId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "showAttestation": {
          "readOnly": true,
          "type": "boolean"
        },
        "showFollowUp": {
          "readOnly": true,
          "type": "boolean"
        },
        "showGoToPayment": {
          "readOnly": true,
          "type": "boolean"
        },
        "showInbox": {
          "readOnly": true,
          "type": "boolean"
        },
        "showLastUpdated": {
          "readOnly": true,
          "type": "boolean"
        },
        "tripletexStartDate": {
          "readOnly": true,
          "type": "string"
        },
        "voucherScanningEmail": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "VoucherInboxItem": {
      "properties": {
        "account": {
          "readOnly": true,
          "type": "string"
        },
        "accountId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "accountSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "accountingPeriod": {
          "readOnly": true,
          "type": "string"
        },
        "allowPostingBeforeVoucherApproved": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeDeleted": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeMerged": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsAdvanced": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsBankReconciliation": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsChanged": {
          "description": "Possible to do one click 'Send to ledger'",
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsCustomsDeclaration": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsDetailedInvoice": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsIncome": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsPaymentIn": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredAsSimpleInvoice": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeRegisteredInQueue": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeSentToAccountant": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeSentToArchive": {
          "readOnly": true,
          "type": "boolean"
        },
        "canBeSentToLedger": {
          "description": "Possible to do one click 'Send to ledger'",
          "readOnly": true,
          "type": "boolean"
        },
        "commentCount": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "companyId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "department": {
          "readOnly": true,
          "type": "string"
        },
        "departmentId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "departmentSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "description": {
          "readOnly": true,
          "type": "string"
        },
        "documentIds": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "readOnly": true,
          "type": "array"
        },
        "documents": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "dueDate": {
          "readOnly": true,
          "type": "string"
        },
        "dueDateSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "emailArrivalTime": {
          "readOnly": true,
          "type": "string"
        },
        "filename": {
          "readOnly": true,
          "type": "string"
        },
        "hasPredictions": {
          "description": "Has one or more predictions from FabricAi",
          "readOnly": true,
          "type": "boolean"
        },
        "hasSmartScanSuggestions": {
          "description": "Has one or more suggestions from SmartScan",
          "readOnly": true,
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "importFailureReason": {
          "readOnly": true,
          "type": "string"
        },
        "invoiceAmount": {
          "readOnly": true,
          "type": "number"
        },
        "invoiceAmountSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "invoiceCurrency": {
          "readOnly": true,
          "type": "string"
        },
        "invoiceCurrencySourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "invoiceDate": {
          "readOnly": true,
          "type": "string"
        },
        "invoiceDateSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "invoiceId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "invoiceType": {
          "enum": [
            "UNKNOWN",
            "PDF",
            "EHF",
            "EFO_NELFO"
          ],
          "readOnly": true,
          "type": "string"
        },
        "isDue": {
          "readOnly": true,
          "type": "boolean"
        },
        "isInvoiceDetailed": {
          "readOnly": true,
          "type": "boolean"
        },
        "isInvoiceSimple": {
          "readOnly": true,
          "type": "boolean"
        },
        "isLocked": {
          "description": "Is voucher locked for change by external integration",
          "readOnly": true,
          "type": "boolean"
        },
        "isSpam": {
          "readOnly": true,
          "type": "boolean"
        },
        "isTemporary": {
          "readOnly": true,
          "type": "boolean"
        },
        "lastComment": {
          "readOnly": true,
          "type": "string"
        },
        "nonAutomationReason": {
          "readOnly": true,
          "type": "string"
        },
        "paymentType": {
          "readOnly": true,
          "type": "string"
        },
        "paymentTypeId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "paymentTypeSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "project": {
          "readOnly": true,
          "type": "string"
        },
        "projectId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "projectSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "receivedDate": {
          "readOnly": true,
          "type": "string"
        },
        "senderEmailAddress": {
          "readOnly": true,
          "type": "string"
        },
        "spamReportForDisplay": {
          "readOnly": true,
          "type": "string"
        },
        "supplierName": {
          "readOnly": true,
          "type": "string"
        },
        "supplierSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "enum": [
            "UNKNOWN",
            "INVOICE",
            "ERROR_EHF_IMPORT",
            "REPLAYABLE_VOUCHER",
            "REMINDER_SPECIFICATION",
            "CREDITNOTE",
            "RECEIPT"
          ],
          "readOnly": true,
          "type": "string"
        },
        "vatAmount": {
          "readOnly": true,
          "type": "number"
        },
        "vatNumber": {
          "readOnly": true,
          "type": "string"
        },
        "vatPercentage": {
          "readOnly": true,
          "type": "number"
        },
        "vatSourceType": {
          "enum": [
            "NONE",
            "EDI",
            "SMART_SCAN",
            "FABRIC_AI",
            "LAST_VOUCHER"
          ],
          "readOnly": true,
          "type": "string"
        },
        "voucherId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VoucherInternal": {
      "properties": {
        "attachment": {
          "$ref": "#/definitions/Document",
          "description": "If the documentation for the voucher has been provided from an external source (e.g. another system via API or a user upload) then this is a reference to the document. This is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "document": {
          "$ref": "#/definitions/Document",
          "description": "If the documentation for the voucher has been generated by the system (e.g. an invoice) then this is a reference to the generated document. This document is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "ediDocument": {
          "$ref": "#/definitions/Document",
          "description": "If the voucher is created based on a machine readable document (such as EHF or EFO/NELFO) then this is a reference to that document. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "readOnly": true
        },
        "externalVoucherNumber": {
          "description": "External voucher number.",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "number": {
          "description": "System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "postings": {
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "type": "array"
        },
        "reverseVoucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        },
        "supplierVoucherType": {
          "description": "Supplier voucher type - simple and detailed.",
          "enum": [
            "TYPE_SUPPLIER_INVOICE_SIMPLE",
            "TYPE_SUPPLIER_INVOICE_DETAILED"
          ],
          "type": "string"
        },
        "tempNumber": {
          "description": "Temporary voucher number.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "urlDetails": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucherType": {
          "$ref": "#/definitions/VoucherType",
          "description": "Voucher type. Must not be of type 'Utgående faktura' ('Outgoing Invoice') on new vouchers, instead use voucherType=null or use the Invoice endpoint."
        },
        "year": {
          "description": "System generated number that cannot be changed.",
          "format": "int32",
          "minimum": 0,
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "date",
        "description",
        "postings"
      ],
      "type": "object"
    },
    "VoucherMessage": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "content": {
          "description": "The message",
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "sendTime": {
          "description": "The timestamp of the message",
          "type": "string"
        },
        "sender": {
          "$ref": "#/definitions/Employee",
          "description": "The employee that sent this message",
          "readOnly": true
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucherId": {
          "description": "The voucher to connect the message to, only set on create",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "VoucherOptions": {
      "properties": {
        "delete": {
          "$ref": "#/definitions/Delete",
          "description": "A data structure containing information about the delete operation.",
          "readOnly": true
        }
      },
      "type": "object"
    },
    "VoucherSearchResponse": {
      "properties": {
        "count": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "from": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "totalNumberOfPostings": {
          "description": "[DEPRECATED] Number of postings returned (if postings are returned)",
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "values": {
          "items": {
            "$ref": "#/definitions/Voucher"
          },
          "readOnly": true,
          "type": "array"
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "VoucherStatus": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "comment": {
          "type": "string"
        },
        "externalObjectUrl": {
          "description": "Link to external object",
          "maxLength": 255,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "1 or 0 predefined status message",
          "enum": [
            "NONE",
            "ONGOING",
            "NEEDS_APPROVAL",
            "WITHDRAWN",
            "SETTLED"
          ],
          "type": "string"
        },
        "referenceNumber": {
          "description": "reference number to external object",
          "maxLength": 255,
          "type": "string"
        },
        "status": {
          "description": "Process status",
          "enum": [
            "WAITING",
            "DONE",
            "SKIPPED",
            "ERROR",
            "NONE",
            "PROCESSING",
            "RECLAIMED"
          ],
          "type": "string"
        },
        "timestamp": {
          "description": "Time of last update",
          "readOnly": true,
          "type": "string"
        },
        "type": {
          "description": "The type of process",
          "enum": [
            "TRIPLETEX",
            "SUPPLIERINVOICE_EXTERNAL",
            "DEBT_COLLECTION"
          ],
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "description": "The voucher."
        }
      },
      "required": [
        "voucher"
      ],
      "type": "object"
    },
    "VoucherSummaryDTO": {
      "properties": {
        "attestationVouchersData": {
          "$ref": "#/definitions/VoucherDetailsDTO"
        },
        "automatedVouchersData": {
          "$ref": "#/definitions/VoucherDetailsDTO"
        },
        "nonPostedVouchersData": {
          "$ref": "#/definitions/VoucherDetailsDTO"
        },
        "voucherReceptionData": {
          "$ref": "#/definitions/VoucherDetailsDTO"
        }
      },
      "type": "object"
    },
    "VoucherType": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WebHookWrapper": {
      "properties": {
        "event": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "subscriptionId": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "Week": {
      "properties": {
        "approved": {
          "readOnly": true,
          "type": "boolean"
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "approvedDate": {
          "readOnly": true,
          "type": "string"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "completed": {
          "readOnly": true,
          "type": "boolean"
        },
        "employee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "timesheetEntries": {
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          },
          "readOnly": true,
          "type": "array"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "week": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Widgets": {
      "properties": {
        "content": {
          "items": {
            "enum": [
              "APP",
              "BANKING",
              "EASY_ONBOARDING",
              "HELP_CENTER",
              "INCOME_AND_COST_CHART",
              "INVOICE_SUMMARY",
              "REMINDER",
              "SALARY_SUMMARY",
              "TASKS",
              "TRIAL",
              "VOUCHER_SUMMARY"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "sidebar": {
          "items": {
            "enum": [
              "APP",
              "BANKING",
              "EASY_ONBOARDING",
              "HELP_CENTER",
              "INCOME_AND_COST_CHART",
              "INVOICE_SUMMARY",
              "REMINDER",
              "SALARY_SUMMARY",
              "TASKS",
              "TRIAL",
              "VOUCHER_SUMMARY"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WorkingHoursScheme": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "code": {
          "maxLength": 100,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "nameNO": {
          "maxLength": 100,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "workingHoursScheme": {
          "description": "Defines the working hours scheme option.",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS",
            "OTHER_SHIFT"
          ],
          "type": "string"
        }
      },
      "required": [
        "workingHoursScheme"
      ],
      "type": "object"
    },
    "YearEndAnnualAccounts": {
      "properties": {
        "assets": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currentAssets": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "currentAssetsBankDepositsCash": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "currentAssetsInvestments": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "currentAssetsReceivables": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "currentAssetsStocks": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "currentLiabilities": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "equity": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "equityAndLiabilities": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "equityPaidInCapital": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "equityRetainedEarnings": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "fixedAssets": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "fixedAssetsFinancial": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "fixedAssetsIntangible": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "fixedAssetsTangible": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "liabilities": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "longTermLiabilities": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "longTermLiabilitiesOther": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "longTermLiabilitiesProvisions": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "netFinancialItems": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "netFinancialItemsExpenses": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "netFinancialItemsIncome": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "netProfitOrLossForTheYear": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "netProfitOrLossForTheYearAfterMinoritiesShareOfProfit": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "operatingProfit": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "operatingProfitExpenses": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "operatingProfitRevenues": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "ordinaryResultAfterTaxes": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "ordinaryResultBeforeTaxes": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "sentDate": {
          "type": "string"
        },
        "status": {
          "enum": [
            "STARTED",
            "UPDATED",
            "RESTARTED",
            "SUBMITTED_UNSIGNED",
            "SUBMITTED_SIGNED",
            "USER_MARKED_AS_SIGNEDBYALL",
            "SYSTEM_MARKED_AS_SIGNEDBYALL"
          ],
          "type": "string"
        },
        "transfers": {
          "$ref": "#/definitions/AnnualAccountsSubTotalSection"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "YearEndReport": {
      "properties": {
        "altinnMetadata": {
          "$ref": "#/definitions/AltinnInstance",
          "readOnly": true
        },
        "annualResult": {
          "type": "number"
        },
        "asset": {
          "type": "number"
        },
        "capitalCost": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "capitalIncome": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currentAsset": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "currentDebt": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "debt": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "equity": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "equityAndDebt": {
          "type": "number"
        },
        "extraordinaryCost": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "fixedAsset": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "inventories": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "operatingExpense": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "operatingRevenue": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "sentDate": {
          "type": "string"
        },
        "status": {
          "enum": [
            "STARTED",
            "UPDATED",
            "RESTARTED",
            "COMPLEMENTARY_DATA_DOWNLOADED",
            "COMPLEMENTARY_DATA_MODIFIED",
            "PREVALIDATED_ACCEPTED",
            "PREVALIDATED_DECLINED",
            "ALTINN_INSTANCE_CREATED_AND_INITIATED",
            "ALTINN_INSTANCE_MAIN_CONTENT_UPLOADED",
            "ALTINN_INSTANCE_CLOSED",
            "ALTINN_INSTANCE_APPROVED_FOR_TRANSFER",
            "CONTENT_PROCESSING_AT_RECIPIENT",
            "ALTINN_INSTANCE_HAS_FEEDBACK",
            "FEEDBACK_ACCEPTED",
            "FEEDBACK_DECLINED",
            "USER_MARKED_AS_DELIVERED"
          ],
          "type": "string"
        },
        "submissionAttemptDate": {
          "type": "string"
        },
        "submissionInProgress": {
          "type": "boolean"
        },
        "submissionResult": {
          "$ref": "#/definitions/YearEndSubmissionResult"
        },
        "tangibleFixedAssets": {
          "items": {
            "$ref": "#/definitions/TangibleFixedAsset"
          },
          "type": "array"
        },
        "taxCost": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "wealthFromBusinessActivity": {
          "$ref": "#/definitions/YearEndReportType"
        },
        "year": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "yearEndReportBasicData": {
          "$ref": "#/definitions/BasicData"
        },
        "yearEndReportPosting": {
          "$ref": "#/definitions/YearEndReportType"
        }
      },
      "type": "object"
    },
    "YearEndReportNote": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "grouping": {
          "maxLength": 255,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "isMandatory": {
          "type": "boolean"
        },
        "name": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "YearEndReportNoteData": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "note": {
          "$ref": "#/definitions/YearEndReportNote"
        },
        "noteGroupType": {
          "enum": [
            "EXTRAORDINARY_INCOME_GROUP",
            "EXTRAORDINARY_COST_GROUP",
            "GROUP_GROUP",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_GROUP"
          ],
          "type": "string"
        },
        "noteSubTypeGroupId": {
          "format": "int32",
          "type": "integer"
        },
        "postMediumTextValue": {
          "type": "string"
        },
        "postType": {
          "enum": [
            "ID_FOR_NOTE",
            "IS_CHECKED",
            "UPDATED_BY",
            "UPDATED_DATE",
            "ACCOUNTS",
            "ACCOUNTING_PRINCIPLES_FREE_TEXT",
            "ACCOUNTING_PRINCIPLES_USE_DEFAULT_TEXT",
            "STILL_IN_BUSINESS",
            "STILL_IN_BUSINESS_INFO",
            "NUMBER_OF_MAN_YEARS",
            "OPENING_BALANCE_SALARY",
            "CLOSING_BALANCE_SALARY",
            "OPENING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "CLOSING_BALANCE_NATIONAL_INSURANCE_CONTRIBUTIONS",
            "OPENING_BALANCE_PENSION_COST",
            "CLOSING_BALANCE_PENSION_COST",
            "OPENING_BALANCE_OTHER_BENEFITS",
            "CLOSING_BALANCE_OTHER_BENEFITS",
            "ABOUT_MAN_YEARS_AND_SALARY",
            "EXTRAORDINARY_INCOME_AND_COST",
            "EXTRAORDINARY_INCOME_AND_COST_DESCRIPTION",
            "EXTRAORDINARY_INCOME_AND_COST_AMOUNT",
            "EXTRAORDINARY_INCOME_AND_COST_ADDITIONAL_INFORMATION",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_OPENING_ACQUISITION_COST_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_INFLOW_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DISPOSAL_IN_THE_YEAR_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_ACQUISITION_COST",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_TOTAL_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_CLOSING_CAPITALISED_VALUE",
            "FIXED_ASSETS_DEPRECIATIONS_TANGIBLE_FIXED_ASSETS",
            "FIXED_ASSETS_DEPRECIATIONS_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ECONOMIC_LIFE",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE_INTANGIBLE_ASSETS",
            "FIXED_ASSETS_ACQUISITION_COST",
            "FIXED_ASSETS_GOODWILL",
            "FIXED_ASSETS_DEPRECIATION_SCHEDULE",
            "FIXED_ASSETS_ADDITIONAL_INFORMATION",
            "GROUP",
            "GROUP_INVESTMENTS",
            "GROUP_OPENING_BALANCE",
            "GROUP_REVENUE_RECOGNIZED_AS_INCOME",
            "GROUP_OTHER_CHANGES",
            "GROUP_CLOSING_BALANCE",
            "GROUP_ADDED_VALUE",
            "GROUP_DEPRECIATION_OF_ADDED_VALUES",
            "GROUP_GOODWILL",
            "GROUP_DEPRECIATION_OF_GOODWILL",
            "GROUP_TOTAL_ACQUISITION_COST",
            "GROUP_TOTAL_CAPITALIZED_EQUITY",
            "GROUP_IS_SUBSIDIARY",
            "GROUP_NAME_OF_PARENT_COMPANY",
            "GROUP_BUSINESS_OFFICE_PARENT_COMPANY",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION",
            "GROUP_EXCLUDED_FROM_CONSOLIDATION_JUSTIFICATION",
            "GROUP_TRANSACTIONS_WITH_SUBSIDIARIES",
            "GROUP_INTERNAL_GAIN_TRANSACTIONS",
            "GROUP_RECEIVABLES_AND_LIABILITIES",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_RECEIVABLES_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_LONG_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CORPORATE",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_COMPANY",
            "OPENING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "CLOSING_BALANCE_SHORT_TERM_TOTAL_AMOUNT_CONTROLLED_COMPANY",
            "OPENING_BALANCE_MORTGAGED_ASSETS",
            "OPENING_BALANCE_OTHER_COLLATERAL",
            "OPENING_BALANCE_GUANRANTEES",
            "GROUP_RECEIVABLES_AND_LIABILITIES_ADDITIONAL_INFO",
            "RECEIVABLES_FALL_DUE_LATER_THAN_ONE_YEAR",
            "RECEIVABLES_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ASSET",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_REAL_VALUE",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_VALUE_ADJUSTMENT",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_ADDITIONAL_INFORMATION",
            "ACTUAL_VALUE_FINACIAL_INSTRUMENTS_DESCRIPTION",
            "HOLDING_OWN_SHARES",
            "HOLDING_OWN_SHARES_NUMBER_OF_SHARES",
            "HOLDING_OWN_SHARES_NOMINAL_VALUE_OF_SHARES",
            "HOLDING_OWN_SHARES_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_ACQUISITIONS_REMUNERATION",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_REMUNERATION",
            "OWN_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_PART_OF_SHARE_CAPITAL",
            "OWN_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "PARENT_COMPANY_SHARES_ACQUISITIONS_BACKGROUND_ACQUISITIONS",
            "OWN_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "PARENT_COMPANY_SHARES_DISPOSAL_NUMBER_OF_SHARES_ACQUIRED",
            "OWN_SHARES_DISPOSAL_REMUNERATION",
            "PARENT_COMPANY_SHARES_DISPOSAL_REMUNERATION",
            "OWN_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "PARENT_COMPANY_SHARES_DISPOSAL_PART_OF_SHARE_CAPITAL",
            "HOLDING_OWN_SHARES_THIS_YEARS_PAYOUT",
            "HOLDING_OWN_SHARES_PROVISION_FOR_THE_YEAR",
            "HOLDING_OWN_SHARES_PROVISIONS",
            "HOLDING_OWN_SHARES_ADDITIONAL_INFORMATION",
            "DEBT_DUE_FOR_PAYMENT",
            "DEBT_SECURED_BY_MORTGAGE",
            "DEBT_CAPITALISED_VALUE",
            "DEBT_TOTAL_NON_RECOGNIZED_WARRANTY_OBLIGATIONS",
            "DEBT_WARRANTY_OBLIGATIONS",
            "DEBT_ADDITIONAL_INFORMATION",
            "LOAN_AND_PROVISION_OF_SECURITY_IS_GRANTED",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_TOTAL_LOAN_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_PROVISION_OF_COLLATERAL_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_INTEREST_RATE_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_MAIN_TERMS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_REIMBURSED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_DEDUCTED_AMOUNT_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_BOARD_MEMBERS",
            "LOAN_AND_PROVISION_OF_SECURITY_WAIVED_AMOUNTS_MEMBERS_OF_OTHER_BODIES",
            "LOAN_AND_PROVISION_OF_SECURITY_ADDITIONAL_INFORMATION",
            "FREE_NOTE_FREE_TEXT"
          ],
          "type": "string"
        },
        "postValue": {
          "maxLength": 255,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "yearEndReport": {
          "$ref": "#/definitions/YearEndReport"
        }
      },
      "required": [
        "postType",
        "postValue"
      ],
      "type": "object"
    },
    "YearEndReportPost": {
      "properties": {
        "balanceIn": {
          "readOnly": true,
          "type": "number"
        },
        "groupNumber": {
          "readOnly": true,
          "type": "string"
        },
        "grouping": {
          "readOnly": true,
          "type": "string"
        },
        "info": {
          "readOnly": true,
          "type": "string"
        },
        "isExcludeFromTaxReturn": {
          "type": "boolean"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "subPost": {
          "readOnly": true,
          "type": "string"
        },
        "sumAmount": {
          "readOnly": true,
          "type": "number"
        },
        "technicalName": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "YearEndReportType": {
      "properties": {
        "posts": {
          "items": {
            "$ref": "#/definitions/YearEndReportPost"
          },
          "type": "array"
        },
        "sumAmount": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "YearEndSubmissionResult": {
      "properties": {
        "failureCategory": {
          "enum": [
            "UNKNOWN",
            "INTERNAL_VALIDATION_FAILED",
            "EXTERNAL_SERVICE_UNREACHABLE",
            "EXTERNAL_SERVICE_API_ERROR",
            "UNEXPECTED_RESPONSE_CONTENT"
          ],
          "type": "string"
        },
        "failureMessage": {
          "maxLength": 255,
          "type": "string"
        },
        "failureStep": {
          "enum": [
            "DOWNLOADING_COMPLEMENTARY_DATA",
            "PREVALIDATING",
            "EXCHANGING_ACCESS_TOKEN",
            "CREATING_ALTINN_INSTANCE",
            "UPLOADING_MAIN_CONTENT_TO_ALTINN_INSTANCE",
            "CLOSING_ALTINN_INSTANCE",
            "APPROVING_ALTINN_INSTANCE_FOR_TRANSFER",
            "NONE"
          ],
          "type": "string"
        },
        "validationResult": {
          "$ref": "#/definitions/YearEndValidationResult",
          "readOnly": true
        }
      },
      "required": [
        "failureStep"
      ],
      "type": "object"
    },
    "YearEndValidationDeviation": {
      "properties": {
        "calculatedText": {
          "readOnly": true,
          "type": "string"
        },
        "calculatedValue": {
          "readOnly": true,
          "type": "number"
        },
        "deviationInValue": {
          "readOnly": true,
          "type": "number"
        },
        "deviationType": {
          "readOnly": true,
          "type": "string"
        },
        "occurrenceIdentifier": {
          "readOnly": true,
          "type": "string"
        },
        "otherInformation": {
          "readOnly": true,
          "type": "string"
        },
        "path": {
          "readOnly": true,
          "type": "string"
        },
        "receivedText": {
          "readOnly": true,
          "type": "string"
        },
        "receivedValue": {
          "readOnly": true,
          "type": "number"
        }
      },
      "type": "object"
    },
    "YearEndValidationGuidance": {
      "properties": {
        "guidanceType": {
          "readOnly": true,
          "type": "string"
        },
        "helpText": {
          "readOnly": true,
          "type": "string"
        },
        "occurrenceIdentifier": {
          "readOnly": true,
          "type": "string"
        },
        "path": {
          "readOnly": true,
          "type": "string"
        },
        "strategyOfService": {
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "YearEndValidationResult": {
      "properties": {
        "causesOfValidatedWithError": {
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "type": "array"
        },
        "deviationsAfterCalculation": {
          "items": {
            "$ref": "#/definitions/YearEndValidationDeviation"
          },
          "readOnly": true,
          "type": "array"
        },
        "deviationsAtValidation": {
          "items": {
            "$ref": "#/definitions/YearEndValidationDeviation"
          },
          "readOnly": true,
          "type": "array"
        },
        "guidancesAfterControl": {
          "items": {
            "$ref": "#/definitions/YearEndValidationGuidance"
          },
          "readOnly": true,
          "type": "array"
        },
        "resultFromValidation": {
          "enum": [
            "validatedOK",
            "validatedWithErrors"
          ],
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    },
    "ZendeskChatMetaDTO": {
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "isTripletexReseller": {
          "type": "boolean"
        },
        "locale": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ZendeskSearchResultDTO": {
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ZtlAccount": {
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "availableBalanceCurrency": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "bban": {
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "bookedBalanceCurrency": {
          "$ref": "#/definitions/TlxNumber",
          "readOnly": true
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "deletable": {
          "readOnly": true,
          "type": "boolean"
        },
        "iban": {
          "maxLength": 50,
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "lastUpdated": {
          "description": "Last time the account information was updated, mainly balance.",
          "readOnly": true,
          "type": "string"
        },
        "name": {
          "maxLength": 128,
          "minLength": 0,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ZtlConsent": {
      "properties": {
        "bank": {
          "$ref": "#/definitions/Bank"
        },
        "calledFromOnboarding": {
          "description": "Specify if this is called from the onboarding process",
          "type": "boolean"
        },
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "consentReference": {
          "maxLength": 255,
          "type": "string"
        },
        "consentUrl": {
          "readOnly": true,
          "type": "string"
        },
        "expirationDate": {
          "readOnly": true,
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "status": {
          "enum": [
            "UNKNOWN",
            "ACCEPTED",
            "REJECTED",
            "AUTHORIZATION_REQUIRED",
            "REVOKED_BY_USER",
            "REVOKED_BY_REMOVING_ACCESS",
            "REVOKED_BY_CREATING_NEW_CONSENT",
            "SCHEDULED_FOR_REVOKING",
            "EXPIRED"
          ],
          "readOnly": true,
          "type": "string"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "userIdOrSsn": {
          "description": "userId for DNB, socialSecurityNumber for other banks",
          "maxLength": 100,
          "type": "string"
        },
        "valid": {
          "readOnly": true,
          "type": "boolean"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        },
        "ztlAccounts": {
          "description": "Link to accounts this consent belongs to",
          "items": {
            "$ref": "#/definitions/ZtlAccount"
          },
          "type": "array"
        }
      },
      "required": [
        "bank"
      ],
      "type": "object"
    },
    "ZtlEmployee": {
      "properties": {
        "consent": {
          "$ref": "#/definitions/ZtlConsent",
          "readOnly": true
        },
        "id": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "name": {
          "readOnly": true,
          "type": "string"
        },
        "pictureId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ZtlOnboarding": {
      "properties": {
        "changes": {
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true,
          "type": "array"
        },
        "completedOnboarding": {
          "type": "boolean"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "onboardingUrl": {
          "maxLength": 255,
          "type": "string"
        },
        "pending": {
          "type": "boolean"
        },
        "url": {
          "readOnly": true,
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ZtlSettings": {
      "properties": {
        "data": {
          "items": {
            "$ref": "#/definitions/ZtlSettingsData"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    },
    "ZtlSettingsData": {
      "properties": {
        "accounts": {
          "items": {
            "$ref": "#/definitions/ZtlAccount"
          },
          "readOnly": true,
          "type": "array"
        },
        "bankId": {
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "bankName": {
          "readOnly": true,
          "type": "string"
        },
        "employees": {
          "items": {
            "$ref": "#/definitions/ZtlEmployee"
          },
          "readOnly": true,
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "host": "tripletex.no",
  "info": {
    "contact": {
      "name": "tripletex-api2 on GitHub",
      "url": "https://github.com/Tripletex/tripletex-api2"
    },
    "description": "## Usage\n\n- **Download the spec** [swagger.json](/v2/swagger.json) file, it is a [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification).\n\n- **Generating a client** can easily be done using tools like [swagger-codegen](https://github.com/swagger-api/swagger-codegen) or other that accepts [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) specs.\n    - For swagger codegen it is recommended to use the flag: **--removeOperationIdPrefix**. \n      Unique operation ids are about to be introduced to the spec, and this ensures forward compatibility - and results in less verbose generated code.\n\n\n## Overview\n\n- Partial resource updating is done using the `PUT` method with optional fields instead of the `PATCH` method.\n\n- **Actions** or **commands** are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`.\n\n- **Summaries** or **aggregated** results are represented in our RESTful path with a prefixed `>`. Example: `/v2/hours/>thisWeeksBillables`.\n\n- **Request ID** is a key found in all responses in the header with the name `x-tlx-request-id`. For validation and error responses it is also in the response body. If additional log information is absolutely necessary, our support division can locate the key value.\n\n- **version** This is a revision number found on all persisted resources. If included, it will prevent your PUT/POST from overriding any updates to the resource since your GET.\n\n- **Date** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DD`.\n\n- **DateTime** follows the **[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)** standard, meaning the format `YYYY-MM-DDThh:mm:ss`.\n\n- **Searching** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like.\n\n- **Missing fields** or even **no response data** can occur because result objects and fields are filtered on authorization.\n\n- **See [GitHub](https://github.com/Tripletex/tripletex-api2) for more documentation, examples, changelog and more.**\n\n- **See [FAQ](https://tripletex.no/execute/docViewer?articleId=906&language=0) for additional information.**\n\n\n## Authentication\n\n- **Tokens:** The Tripletex API uses 3 different tokens\n\n  - **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n\n  - **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=1505&languageId=0)\n\n  - **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header.\n\n- **Authentication** is done via [Basic access authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)\n\n  - **username** is used to specify what company to access.\n\n    - `0` or blank means the company of the employee.\n\n    - Any other value means accountant clients. Use `/company/>withLoginAccess` to get a list of those.\n\n  - **password** is the **sessionToken**.\n\n  - If you need to create the header yourself use `Authorization: Basic <encoded token>` where `encoded token` is the string `<target company id or 0>:<your session token>` Base64 encoded.\n\n\n## Tags\n\n- `[BETA]` This is a beta endpoint and can be subject to change.\n- `[DEPRECATED]` Deprecated means that we intend to remove/change this feature or capability in a future \"major\" API release. We therefore discourage all use of this feature/capability.\n\n\n## Fields\n\nUse the `fields` parameter to specify which fields should be returned. This also supports fields from sub elements, done via `<field>(<subResourceFields>)`. `*` means all fields for that resource. Example values:\n- `project,activity,hours`  returns `{project:..., activity:...., hours:...}`.\n- just `project` returns `\"project\" : { \"id\": 12345, \"url\": \"tripletex.no/v2/projects/12345\"  }`.\n- `project(*)` returns `\"project\" : { \"id\": 12345 \"name\":\"ProjectName\" \"number.....startDate\": \"2013-01-07\" }`.\n- `project(name)` returns `\"project\" : { \"name\":\"ProjectName\" }`.\n- All resources and some subResources :  `*,activity(name),employee(*)`.\n\n\n## Sorting\n\nUse the `sorting` parameter to specify sorting. It takes a comma separated list, where a `-` prefix denotes descending. You can sort by sub object with the following format: `<field>.<subObjectField>`. Example values:\n- `date`\n- `project.name`\n- `project.name, -date`\n\n\n## Changes\n\nTo get the changes for a resource, `changes` have to be explicitly specified as part of the `fields` parameter, e.g. `*,changes`.\nThere are currently two types of change available: \n- `CREATE` for when the resource was created\n- `UPDATE` for when the resource was updated\n\n**NOTE**\n> For objects created prior to October 24th 2018 the list may be incomplete, but will always contain the CREATE and the last change (if the object has been changed after creation).\n\n\n## Rate limiting\n\nRate limiting is performed on the API calls for an employee for each API consumer. Status regarding the rate limit is returned as headers:\n- `X-Rate-Limit-Limit` - The number of allowed requests in the current period.\n- `X-Rate-Limit-Remaining` - The number of remaining requests.\n- `X-Rate-Limit-Reset` - The number of seconds left in the current period.\n\nOnce the rate limit is hit, all requests will return HTTP status code `429` for the remainder of the current period.\n\n\n## Response envelope\n\n#### Multiple values\n\n```json\n{\n  \"fullResultSize\": ###, // {number} [DEPRECATED]\n  \"from\": ###, // {number} Paging starting from\n  \"count\": ###, // {number} Paging count\n  \"versionDigest\": \"###\", // {string} Hash of full result, null if no result\n  \"values\": [...{...object...},{...object...},{...object...}...]\n}\n```\n\n#### Single value\n\n```json\n{\n  \"value\": {...single object...}\n}\n```\n\n\n## WebHook envelope\n\n```json\n{\n  \"subscriptionId\": ###, // Subscription id\n  \"event\": \"object.verb\", // As listed from /v2/event/\n  \"id\": ###, // Id of object this event is for\n  \"value\": {... single object, null if object.deleted ...}\n}\n```\n\n\n## Error/warning envelope\n\n```json\n{\n  \"status\": ###, // {number} HTTP status code\n  \"code\": #####, // {number} internal status code of event\n  \"message\": \"###\", // {string} Basic feedback message in your language\n  \"link\": \"###\", // {string} Link to doc\n  \"developerMessage\": \"###\", // {string} More technical message\n  \"validationMessages\": [ // {array} List of validation messages, can be null\n    {\n      \"field\": \"###\", // {string} Name of field\n      \"message\": \"###\" // {string} Validation message for field\n    }\n  ],\n  \"requestId\": \"###\" // {string} Same as x-tlx-request-id \n}\n```\n\n\n## Status codes / Error codes\n\n- **200 OK**\n- **201 Created** - From POSTs that create something new.\n- **204 No Content** - When there is no answer, ex: \"/:anAction\" or DELETE.\n- **400 Bad request** -\n  -  **4000** Bad Request Exception\n  - **11000** Illegal Filter Exception\n  - **12000** Path Param Exception\n  - **24000** Cryptography Exception\n- **401 Unauthorized** - When authentication is required and has failed or has not yet been provided\n  -  **3000** Authentication Exception\n- **403 Forbidden** - When AuthorisationManager says no.\n  -  **9000** Security Exception\n- **404 Not Found** - For resources that does not exist.\n  -  **6000** Not Found Exception\n- **409 Conflict** - Such as an edit conflict between multiple simultaneous updates\n  -  **7000** Object Exists Exception\n  -  **8000** Revision Exception\n  - **10000** Locked Exception\n  - **14000** Duplicate entry\n- **422 Bad Request** - For Required fields or things like malformed payload.\n  - **15000** Value Validation Exception\n  - **16000** Mapping Exception\n  - **17000** Sorting Exception\n  - **18000** Validation Exception\n  - **21000** Param Exception\n  - **22000** Invalid JSON Exception\n  - **23000** Result Set Too Large Exception\n- **429 Too Many Requests** - Request rate limit hit\n- **500 Internal Error** - Unexpected condition was encountered and no more specific message is suitable\n  - **1000** Exception\n",
    "title": "Tripletex API",
    "version": "2.70.20"
  },
  "paths": {
    "/accountantClientAccess/requiresLevel4Authorization": {
      "get": {
        "description": "",
        "operationId": "AccountantClientAccessRequiresLevel4Authorization_getRequiresLevel4Authorization",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "customerIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBoolean"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Check if any of the employee ids requires level 4 authorizations to make changes",
        "tags": [
          "accountantClientAccess"
        ]
      }
    },
    "/activity": {
      "get": {
        "description": "",
        "operationId": "Activity_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isProjectActivity",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isGeneral",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isChargeable",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isTask",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find activities corresponding with sent data.",
        "tags": [
          "activity"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Activity_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Activity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add activity.",
        "tags": [
          "activity"
        ]
      }
    },
    "/activity/>forTimeSheet": {
      "get": {
        "description": "",
        "operationId": "ActivityForTimeSheet_getForTimeSheet",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find applicable time sheet activities for an employee on a specific day.",
        "tags": [
          "activity"
        ]
      }
    },
    "/activity/list": {
      "post": {
        "description": "",
        "operationId": "ActivityList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Activity"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add multiple activities.",
        "tags": [
          "activity"
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "description": "",
        "operationId": "Activity_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find activity by ID.",
        "tags": [
          "activity"
        ]
      }
    },
    "/asset": {
      "get": {
        "description": "",
        "operationId": "Asset_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find assets corresponding with sent data.",
        "tags": [
          "asset"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Asset_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create one asset.",
        "tags": [
          "asset"
        ]
      }
    },
    "/asset/canDelete/{id}": {
      "get": {
        "description": "",
        "operationId": "AssetCanDelete_canDelete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Validate delete asset",
        "tags": [
          "asset"
        ]
      }
    },
    "/asset/deleteImport": {
      "delete": {
        "description": "",
        "operationId": "AssetDeleteImport_deleteImport",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete most recent assets import.",
        "tags": [
          "asset"
        ]
      }
    },
    "/asset/duplicate/{id}": {
      "post": {
        "description": "",
        "operationId": "AssetDuplicate_postDuplicate",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create copy of one asset",
        "tags": [
          "asset"
        ]
      }
    },
    "/asset/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "AssetList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Asset"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create several assets.",
        "tags": [
          "asset"
        ]
      }
    },
    "/asset/upload": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "AssetUpload_upload",
        "parameters": [
          {
            "description": "The Excel file with assets",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Is the import a preview, or a real import.",
            "in": "query",
            "name": "isPreview",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Start date for assetregistry. Should always be on the first day of the year.",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAssetAccountRow"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload Excel file with Assets in the standard Tripletex defined format.",
        "tags": [
          "asset"
        ]
      }
    },
    "/asset/{id}": {
      "delete": {
        "description": "",
        "operationId": "Asset_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete asset.",
        "tags": [
          "asset"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Asset_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get asset by ID.",
        "tags": [
          "asset"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Asset_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAsset"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update asset.",
        "tags": [
          "asset"
        ]
      }
    },
    "/balanceSheet": {
      "get": {
        "description": "",
        "operationId": "BalanceSheet_search",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "accountNumberFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "accountNumberTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "default": false,
            "description": "Should sub projects of the given project be included",
            "in": "query",
            "name": "includeSubProjects",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Should active accounts with no movements be included",
            "in": "query",
            "name": "includeActiveAccountsWithoutMovements",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBalanceSheetAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get balance sheet (saldobalanse).",
        "tags": [
          "balanceSheet"
        ]
      }
    },
    "/bank": {
      "get": {
        "description": "",
        "operationId": "Bank_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Bank register number (four digits)",
            "in": "query",
            "name": "registerNumbers",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isBankReconciliationSupport",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isAutoPaySupported",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isZtlSupported",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBank"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find bank corresponding with sent data.",
        "tags": [
          "bank"
        ]
      }
    },
    "/bank/advice": {
      "get": {
        "description": "",
        "operationId": "BankAdvice_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankDashboardAdvice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find advices for the company context",
        "tags": [
          "bank/advice"
        ]
      }
    },
    "/bank/advice/{id}": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankAdvice_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankDashboardAdvice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankDashboardAdvice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update advice.",
        "tags": [
          "bank/advice"
        ]
      }
    },
    "/bank/reconciliation": {
      "get": {
        "description": "",
        "operationId": "BankReconciliation_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "accountingPeriodId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find bank reconciliation corresponding with sent data.",
        "tags": [
          "bank/reconciliation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Post a bank reconciliation.",
        "tags": [
          "bank/reconciliation"
        ]
      }
    },
    "/bank/reconciliation/>last": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationLast_last",
        "parameters": [
          {
            "description": "Account ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get the last created reconciliation by account ID.",
        "tags": [
          "bank/reconciliation"
        ]
      }
    },
    "/bank/reconciliation/>lastClosed": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationLastClosed_lastClosed",
        "parameters": [
          {
            "description": "Account ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Format is yyyy-MM-dd",
            "in": "query",
            "name": "after",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get last closed reconciliation by account ID.",
        "tags": [
          "bank/reconciliation"
        ]
      }
    },
    "/bank/reconciliation/closedWithUnmatchedTransactions": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationClosedWithUnmatchedTransactions_closedWithUnmatchedTransactions",
        "parameters": [
          {
            "description": "Account ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Format is yyyy-MM-dd",
            "in": "query",
            "name": "start",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get the last closed reconciliation with unmached transactions by account ID.",
        "tags": [
          "bank/reconciliation"
        ]
      }
    },
    "/bank/reconciliation/match": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationMatch_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of bank reconciliation IDs",
            "in": "query",
            "name": "bankReconciliationId",
            "required": false,
            "type": "string"
          },
          {
            "default": 5000,
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Approved or unapproved matches",
            "in": "query",
            "name": "approved",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find bank reconciliation match corresponding with sent data.",
        "tags": [
          "bank/reconciliation/match"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliationMatch_post",
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a bank reconciliation match.",
        "tags": [
          "bank/reconciliation/match"
        ]
      }
    },
    "/bank/reconciliation/match/:suggest": {
      "put": {
        "description": "",
        "operationId": "BankReconciliationMatchSuggest_suggest",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "bankReconciliationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Suggest matches for a bank reconciliation by ID.",
        "tags": [
          "bank/reconciliation/match"
        ]
      }
    },
    "/bank/reconciliation/match/count": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationMatchCount_count",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "bankReconciliationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInteger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get the total number of matches",
        "tags": [
          "bank/reconciliation/match"
        ]
      }
    },
    "/bank/reconciliation/match/query": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationMatchQuery_query",
        "parameters": [
          {
            "description": "The bank reconciliation id",
            "format": "int32",
            "in": "query",
            "name": "bankReconciliationId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Approved or unapproved matches",
            "in": "query",
            "name": "approved",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[INTERNAL] Wildcard search.",
        "tags": [
          "bank/reconciliation/match"
        ]
      }
    },
    "/bank/reconciliation/match/{id}": {
      "delete": {
        "description": "",
        "operationId": "BankReconciliationMatch_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete a bank reconciliation match by ID.",
        "tags": [
          "bank/reconciliation/match"
        ]
      },
      "get": {
        "description": "",
        "operationId": "BankReconciliationMatch_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get bank reconciliation match by ID.",
        "tags": [
          "bank/reconciliation/match"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliationMatch_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a bank reconciliation match by ID.",
        "tags": [
          "bank/reconciliation/match"
        ]
      }
    },
    "/bank/reconciliation/matches/counter": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationMatchesCounter_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "bankReconciliationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatchesCounter"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get number of matches since last page access.",
        "tags": [
          "bank/reconciliation/match"
        ]
      },
      "post": {
        "description": "",
        "operationId": "BankReconciliationMatchesCounter_post",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "bankReconciliationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Reset the number of matches after the page has been accessed.",
        "tags": [
          "bank/reconciliation/match"
        ]
      }
    },
    "/bank/reconciliation/paymentType": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationPaymentType_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find payment type corresponding with sent data.",
        "tags": [
          "bank/reconciliation/paymentType"
        ]
      }
    },
    "/bank/reconciliation/paymentType/{id}": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationPaymentType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get payment type by ID.",
        "tags": [
          "bank/reconciliation/paymentType"
        ]
      }
    },
    "/bank/reconciliation/settings": {
      "get": {
        "description": "",
        "operationId": "BankReconciliationSettings_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get bank reconciliation settings.",
        "tags": [
          "bank/reconciliation/settings"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliationSettings_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Post bank reconciliation settings.",
        "tags": [
          "bank/reconciliation/settings"
        ]
      }
    },
    "/bank/reconciliation/settings/{id}": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliationSettings_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliationSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update bank reconciliation settings.",
        "tags": [
          "bank/reconciliation/settings"
        ]
      }
    },
    "/bank/reconciliation/{id}": {
      "delete": {
        "description": "",
        "operationId": "BankReconciliation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete bank reconciliation by ID.",
        "tags": [
          "bank/reconciliation"
        ]
      },
      "get": {
        "description": "",
        "operationId": "BankReconciliation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get bank reconciliation.",
        "tags": [
          "bank/reconciliation"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliation_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a bank reconciliation.",
        "tags": [
          "bank/reconciliation"
        ]
      }
    },
    "/bank/reconciliation/{id}/:adjustment": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "BankReconciliationAdjustment_adjustment",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Adjustments",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/BankReconciliationAdjustment"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationAdjustment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add an adjustment to reconciliation by ID.",
        "tags": [
          "bank/reconciliation"
        ]
      }
    },
    "/bank/statement": {
      "get": {
        "description": "",
        "operationId": "BankStatement_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "description": "File format",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV",
              "CULTURA_BANK_TELEPAY",
              "SBANKEN_PRIVAT_CSV",
              "HAUGESUND_SPAREBANK_CSV",
              "VISMA_ACCOUNT_STATEMENT_PSD2",
              "SBANKEN_BEDRIFT_CSV",
              "LANDKREDITT_TELEPAY",
              "ZTL"
            ],
            "in": "query",
            "name": "fileFormat",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find bank statement corresponding with sent data.",
        "tags": [
          "bank/statement"
        ]
      }
    },
    "/bank/statement/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "BankStatementImport_importBankStatement",
        "parameters": [
          {
            "description": "Bank ID",
            "format": "int32",
            "in": "query",
            "name": "bankId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Account ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "fromDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "toDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "External ID",
            "in": "query",
            "name": "externalId",
            "required": false,
            "type": "string"
          },
          {
            "description": "File format",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "HANDELSBANKEN_TELEPAY",
              "SPAREBANKEN_VEST_TELEPAY",
              "NORDEA_CSV",
              "TRANSFERWISE",
              "SPAREBANKEN_SOR_TELEPAY",
              "SPAREBANKEN_OST_TELEPAY",
              "DANSKE_BANK_CSV",
              "CULTURA_BANK_TELEPAY",
              "SBANKEN_PRIVAT_CSV",
              "HAUGESUND_SPAREBANK_CSV",
              "VISMA_ACCOUNT_STATEMENT_PSD2",
              "SBANKEN_BEDRIFT_CSV",
              "LANDKREDITT_TELEPAY",
              "ZTL"
            ],
            "in": "query",
            "name": "fileFormat",
            "required": true,
            "type": "string"
          },
          {
            "description": "The bank statement file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload bank statement file.",
        "tags": [
          "bank/statement"
        ]
      }
    },
    "/bank/statement/transaction": {
      "get": {
        "description": "",
        "operationId": "BankStatementTransaction_search",
        "parameters": [
          {
            "description": "Bank statement ID",
            "format": "int32",
            "in": "query",
            "name": "bankStatementId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find bank transaction corresponding with sent data.",
        "tags": [
          "bank/statement/transaction"
        ]
      }
    },
    "/bank/statement/transaction/{id}": {
      "get": {
        "description": "",
        "operationId": "BankStatementTransaction_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get bank transaction by ID.",
        "tags": [
          "bank/statement/transaction"
        ]
      }
    },
    "/bank/statement/transaction/{id}/details": {
      "get": {
        "description": "",
        "operationId": "BankStatementTransactionDetails_getDetails",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperObject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get additional details about transaction by ID.",
        "tags": [
          "bank/statement/transaction"
        ]
      }
    },
    "/bank/statement/{id}": {
      "delete": {
        "description": "",
        "operationId": "BankStatement_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete bank statement by ID.",
        "tags": [
          "bank/statement"
        ]
      },
      "get": {
        "description": "",
        "operationId": "BankStatement_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get bank statement.",
        "tags": [
          "bank/statement"
        ]
      }
    },
    "/bank/{id}": {
      "get": {
        "description": "",
        "operationId": "Bank_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBank"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get bank.",
        "tags": [
          "bank"
        ]
      }
    },
    "/company": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Company_put",
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update company information.",
        "tags": [
          "company"
        ]
      }
    },
    "/company/>withLoginAccess": {
      "get": {
        "description": "",
        "operationId": "CompanyWithLoginAccess_getWithLoginAccess",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseClient"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
        "tags": [
          "company"
        ]
      }
    },
    "/company/divisions": {
      "get": {
        "description": "",
        "operationId": "CompanyDivisions_getDivisions",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[DEPRECATED] Find divisions.",
        "tags": [
          "company"
        ]
      }
    },
    "/company/salesmodules": {
      "get": {
        "description": "",
        "operationId": "CompanySalesmodules_get",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalesModuleDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get active sales modules.",
        "tags": [
          "company/salesmodules"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "CompanySalesmodules_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalesModuleDTO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalesModuleDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add (activate) a new sales module.",
        "tags": [
          "company/salesmodules"
        ]
      }
    },
    "/company/settings/altinn": {
      "get": {
        "description": "",
        "operationId": "CompanySettingsAltinn_search",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find Altinn id for login in company.",
        "tags": [
          "company/altinn"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "CompanySettingsAltinn_put",
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AltinnCompanyModule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update AltInn id and password.",
        "tags": [
          "company/altinn"
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "description": "",
        "operationId": "Company_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find company by ID.",
        "tags": [
          "company"
        ]
      }
    },
    "/contact": {
      "get": {
        "description": "",
        "operationId": "Contact_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "lastName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find contacts corresponding with sent data.",
        "tags": [
          "contact"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Contact_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create contact.",
        "tags": [
          "contact"
        ]
      }
    },
    "/contact/list": {
      "delete": {
        "description": "",
        "operationId": "ContactList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple contacts.",
        "tags": [
          "contact"
        ]
      }
    },
    "/contact/{id}": {
      "get": {
        "description": "",
        "operationId": "Contact_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get contact by ID.",
        "tags": [
          "contact"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Contact_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update contact.",
        "tags": [
          "contact"
        ]
      }
    },
    "/country": {
      "get": {
        "description": "",
        "operationId": "Country_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isDisabled",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCountry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find countries corresponding with sent data.",
        "tags": [
          "country"
        ]
      }
    },
    "/country/{id}": {
      "get": {
        "description": "",
        "operationId": "Country_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCountry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get country by ID.",
        "tags": [
          "country"
        ]
      }
    },
    "/crm/prospect": {
      "get": {
        "description": "",
        "operationId": "CrmProspect_search",
        "parameters": [
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "createdDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "createdDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "salesEmployeeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isClosed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "closedReason",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "closedDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "closedDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "competitor",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "prospectType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "projectOfferId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProspect"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find prospects corresponding with sent data.",
        "tags": [
          "crm/prospect"
        ]
      }
    },
    "/crm/prospect/{id}": {
      "get": {
        "description": "",
        "operationId": "CrmProspect_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProspect"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get prospect by ID.",
        "tags": [
          "crm/prospect"
        ]
      }
    },
    "/currency": {
      "get": {
        "description": "",
        "operationId": "Currency_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Currency codes",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCurrency"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find currencies corresponding with sent data.",
        "tags": [
          "currency"
        ]
      }
    },
    "/currency/{id}": {
      "get": {
        "description": "",
        "operationId": "Currency_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrency"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get currency by ID.",
        "tags": [
          "currency"
        ]
      }
    },
    "/currency/{id}/rate": {
      "get": {
        "description": "",
        "operationId": "CurrencyRate_getRate",
        "parameters": [
          {
            "description": "Currency id",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Format is yyyy-MM-dd",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrencyExchangeRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find currency exchange rate corresponding with sent data.",
        "tags": [
          "currency"
        ]
      }
    },
    "/customer": {
      "get": {
        "description": "",
        "operationId": "Customer_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "customerAccountNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "organizationNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "invoiceEmail",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "accountManagerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only return elements that have changed since this date and time",
            "in": "query",
            "name": "changedSince",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find customers corresponding with sent data.",
        "tags": [
          "customer"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Customer_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create customer. Related customer addresses may also be created.",
        "tags": [
          "customer"
        ]
      }
    },
    "/customer/category": {
      "get": {
        "description": "",
        "operationId": "CustomerCategory_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find customer/supplier categories corresponding with sent data.",
        "tags": [
          "customer/category"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "CustomerCategory_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new customer/supplier category.",
        "tags": [
          "customer/category"
        ]
      }
    },
    "/customer/category/{id}": {
      "get": {
        "description": "",
        "operationId": "CustomerCategory_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find customer/supplier category by ID.",
        "tags": [
          "customer/category"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "CustomerCategory_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update customer/supplier category.",
        "tags": [
          "customer/category"
        ]
      }
    },
    "/customer/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "CustomerList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
        "tags": [
          "customer"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "CustomerList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Customer"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
        "tags": [
          "customer"
        ]
      }
    },
    "/customer/{id}": {
      "delete": {
        "description": "",
        "operationId": "Customer_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete customer by ID",
        "tags": [
          "customer"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Customer_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get customer by ID.",
        "tags": [
          "customer"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Customer_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update customer. ",
        "tags": [
          "customer"
        ]
      }
    },
    "/deliveryAddress": {
      "get": {
        "description": "",
        "operationId": "DeliveryAddress_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "addressLine1",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "addressLine2",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "postalCode",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find addresses corresponding with sent data.",
        "tags": [
          "deliveryAddress"
        ]
      }
    },
    "/deliveryAddress/{id}": {
      "get": {
        "description": "",
        "operationId": "DeliveryAddress_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get address by ID.",
        "tags": [
          "deliveryAddress"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "DeliveryAddress_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeliveryAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeliveryAddress"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update address.",
        "tags": [
          "deliveryAddress"
        ]
      }
    },
    "/department": {
      "get": {
        "description": "",
        "operationId": "Department_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "departmentNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "departmentManagerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "true - return only inactive departments; false - return only active departments; unspecified - return both types",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find department corresponding with sent data.",
        "tags": [
          "department"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Department_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new department.",
        "tags": [
          "department"
        ]
      }
    },
    "/department/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "DepartmentList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Department"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Register new departments.",
        "tags": [
          "department"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "DepartmentList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Department"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple departments.",
        "tags": [
          "department"
        ]
      }
    },
    "/department/query": {
      "get": {
        "description": "",
        "operationId": "DepartmentQuery_query",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 25,
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": "id, name",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "description": "true - return only inactive departments; false - return only active departments; unspecified - return both types",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Wildcard search.",
        "tags": [
          "department"
        ]
      }
    },
    "/department/{id}": {
      "delete": {
        "description": "",
        "operationId": "Department_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete department by ID",
        "tags": [
          "department"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Department_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get department by ID.",
        "tags": [
          "department"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Department_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update department.",
        "tags": [
          "department"
        ]
      }
    },
    "/division": {
      "get": {
        "description": "",
        "operationId": "Division_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get divisions.",
        "tags": [
          "division"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Division_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create division.",
        "tags": [
          "division"
        ]
      }
    },
    "/division/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "DivisionList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Division"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create divisions.",
        "tags": [
          "division"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "DivisionList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Division"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple divisions.",
        "tags": [
          "division"
        ]
      }
    },
    "/division/{id}": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Division_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update division information.",
        "tags": [
          "division"
        ]
      }
    },
    "/document/{id}": {
      "get": {
        "description": "",
        "operationId": "Document_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocument"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get document by ID.",
        "tags": [
          "document"
        ]
      }
    },
    "/document/{id}/content": {
      "get": {
        "description": "",
        "operationId": "DocumentContent_downloadContent",
        "parameters": [
          {
            "description": "ID of document to download content from.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get content of document given by ID.",
        "tags": [
          "document"
        ]
      }
    },
    "/documentArchive/account/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveAccount_getAccount",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with account object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveAccount_accountPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Account Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/customer/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveCustomer_getCustomer",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with customer object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveCustomer_customerPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Customer Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/employee/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveEmployee_getEmployee",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with employee object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveEmployee_employeePost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Employee Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/product/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveProduct_getProduct",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with product object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveProduct_productPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Product Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/project/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveProject_getProject",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with project object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveProject_projectPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Project Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/prospect/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveProspect_getProspect",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with prospect object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveProspect_prospectPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Prospect Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/reception": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveReception_receptionPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload a file to the document archive reception. Send as multipart form.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/supplier/{id}": {
      "get": {
        "description": "",
        "operationId": "DocumentArchiveSupplier_getSupplier",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find documents archived associated with supplier object type.",
        "tags": [
          "documentArchive"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "DocumentArchiveSupplier_supplierPost",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload file to Supplier Document Archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/documentArchive/{id}": {
      "delete": {
        "description": "",
        "operationId": "DocumentArchive_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete document archive.",
        "tags": [
          "documentArchive"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "DocumentArchive_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DocumentArchive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update document archive.",
        "tags": [
          "documentArchive"
        ]
      }
    },
    "/employee": {
      "get": {
        "description": "",
        "operationId": "Employee_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "firstName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "lastName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "employeeNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "allowInformationRegistration",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "includeContacts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "onlyProjectManagers",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "onlyContacts",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "assignableProjectManagers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "periodStart",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "periodEnd",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "hasSystemAccess",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find employees corresponding with sent data.",
        "tags": [
          "employee"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Employee_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create one employee.",
        "tags": [
          "employee"
        ]
      }
    },
    "/employee/category": {
      "get": {
        "description": "",
        "operationId": "EmployeeCategory_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find employee category corresponding with sent data.",
        "tags": [
          "employee/category"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeCategory_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a new employee category.",
        "tags": [
          "employee/category"
        ]
      }
    },
    "/employee/category/list": {
      "delete": {
        "description": "",
        "operationId": "EmployeeCategoryList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete multiple employee categories",
        "tags": [
          "employee/category"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeCategoryList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/EmployeeCategory"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create new employee categories.",
        "tags": [
          "employee/category"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeCategoryList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/EmployeeCategory"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple employee categories.",
        "tags": [
          "employee/category"
        ]
      }
    },
    "/employee/category/{id}": {
      "delete": {
        "description": "",
        "operationId": "EmployeeCategory_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete employee category by ID",
        "tags": [
          "employee/category"
        ]
      },
      "get": {
        "description": "",
        "operationId": "EmployeeCategory_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get employee category by ID.",
        "tags": [
          "employee/category"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeCategory_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeeCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update employee category information.",
        "tags": [
          "employee/category"
        ]
      }
    },
    "/employee/employment": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmployment_search",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all employments for employee.",
        "tags": [
          "employee/employment"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmployment_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create employment.",
        "tags": [
          "employee/employment"
        ]
      }
    },
    "/employee/employment/details": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentDetails_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employmentId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all employmentdetails for employment.",
        "tags": [
          "employee/employment/details"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmploymentDetails_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create employment details.",
        "tags": [
          "employee/employment/details"
        ]
      }
    },
    "/employee/employment/details/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentDetails_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find employment details by ID.",
        "tags": [
          "employee/employment/details"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmploymentDetails_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update employment details. ",
        "tags": [
          "employee/employment/details"
        ]
      }
    },
    "/employee/employment/employmentType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentType_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all employment type IDs.",
        "tags": [
          "employee/employment/employmentType"
        ]
      }
    },
    "/employee/employment/employmentType/employmentEndReasonType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeEmploymentEndReasonType_getEmploymentEndReasonType",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all employment end reason type IDs.",
        "tags": [
          "employee/employment/employmentType"
        ]
      }
    },
    "/employee/employment/employmentType/employmentFormType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeEmploymentFormType_getEmploymentFormType",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all employment form type IDs.",
        "tags": [
          "employee/employment/employmentType"
        ]
      }
    },
    "/employee/employment/employmentType/maritimeEmploymentType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeMaritimeEmploymentType_getMaritimeEmploymentType",
        "parameters": [
          {
            "description": "maritimeEmploymentType",
            "enum": [
              "SHIP_REGISTER",
              "SHIP_TYPE",
              "TRADE_AREA"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all maritime employment type IDs.",
        "tags": [
          "employee/employment/employmentType"
        ]
      }
    },
    "/employee/employment/employmentType/salaryType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeSalaryType_getSalaryType",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all salary type IDs.",
        "tags": [
          "employee/employment/employmentType"
        ]
      }
    },
    "/employee/employment/employmentType/scheduleType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentEmploymentTypeScheduleType_getScheduleType",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all schedule type IDs.",
        "tags": [
          "employee/employment/employmentType"
        ]
      }
    },
    "/employee/employment/leaveOfAbsence": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employmentIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Must be between 0-100.",
            "format": "int32",
            "in": "query",
            "name": "minPercentage",
            "required": false,
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Must be between 0-100.",
            "format": "int32",
            "in": "query",
            "name": "maxPercentage",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all leave of absence corresponding with the sent data.",
        "tags": [
          "employee/employment/leaveOfAbsence"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create leave of absence.",
        "tags": [
          "employee/employment/leaveOfAbsence"
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/LeaveOfAbsence"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create multiple leave of absences.",
        "tags": [
          "employee/employment/leaveOfAbsence"
        ]
      }
    },
    "/employee/employment/leaveOfAbsence/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find leave of absence by ID.",
        "tags": [
          "employee/employment/leaveOfAbsence"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsence_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update leave of absence.",
        "tags": [
          "employee/employment/leaveOfAbsence"
        ]
      }
    },
    "/employee/employment/leaveOfAbsenceType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentLeaveOfAbsenceType_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsenceType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all leave of absence type IDs.",
        "tags": [
          "employee/employment/leaveOfAbsenceType"
        ]
      }
    },
    "/employee/employment/occupationCode": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentOccupationCode_search",
        "parameters": [
          {
            "description": "Element ID",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "nameNO",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOccupationCode"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all profession codes.",
        "tags": [
          "employee/employment/occupationCode"
        ]
      }
    },
    "/employee/employment/occupationCode/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentOccupationCode_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOccupationCode"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get occupation by ID.",
        "tags": [
          "employee/employment/occupationCode"
        ]
      }
    },
    "/employee/employment/remunerationType": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentRemunerationType_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseRemunerationType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all remuneration type IDs.",
        "tags": [
          "employee/employment/remunerationType"
        ]
      }
    },
    "/employee/employment/workingHoursScheme": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmploymentWorkingHoursScheme_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWorkingHoursScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find working hours scheme ID.",
        "tags": [
          "employee/employment/workingHoursScheme"
        ]
      }
    },
    "/employee/employment/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeEmployment_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find employment by ID.",
        "tags": [
          "employee/employment"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeEmployment_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update employemnt. ",
        "tags": [
          "employee/employment"
        ]
      }
    },
    "/employee/entitlement": {
      "get": {
        "description": "",
        "operationId": "EmployeeEntitlement_search",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all entitlements for user.",
        "tags": [
          "employee/entitlement"
        ]
      }
    },
    "/employee/entitlement/:grantClientEntitlementsByTemplate": {
      "put": {
        "description": "",
        "operationId": "EmployeeEntitlementGrantClientEntitlementsByTemplate_grantClientEntitlementsByTemplate",
        "parameters": [
          {
            "description": "Employee ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Client ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Template",
            "enum": [
              "NONE_PRIVILEGES",
              "STANDARD_PRIVILEGES_ACCOUNTANT",
              "STANDARD_PRIVILEGES_AUDITOR",
              "ALL_PRIVILEGES",
              "AGRO_READ_ONLY",
              "AGRO_READ_APPROVE",
              "AGRO_READ_WRITE",
              "AGRO_READ_WRITE_APPROVE",
              "MAMUT_PAYROLL_ADMIN",
              "MAMUT_PAYROLL_CLERK",
              "AGRO_PAYROLL_ADMIN",
              "AGRO_PAYROLL_CLERK",
              "AGRO_INVOICE_ADMIN",
              "AGRO_INVOICE_CLERK"
            ],
            "in": "query",
            "name": "template",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Add template to existing entitlements",
            "in": "query",
            "name": "addToExisting",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update employee entitlements in client account.",
        "tags": [
          "employee/entitlement"
        ]
      }
    },
    "/employee/entitlement/:grantEntitlementsByTemplate": {
      "put": {
        "description": "The user will only receive the entitlements which are possible with the registered user type",
        "operationId": "EmployeeEntitlementGrantEntitlementsByTemplate_grantEntitlementsByTemplate",
        "parameters": [
          {
            "description": "Employee ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Template",
            "enum": [
              "NONE_PRIVILEGES",
              "ALL_PRIVILEGES",
              "INVOICING_MANAGER",
              "PERSONELL_MANAGER",
              "ACCOUNTANT",
              "AUDITOR",
              "DEPARTMENT_LEADER",
              "MAMUT_USER_ADMIN",
              "MAMUT_USER"
            ],
            "in": "query",
            "name": "template",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update employee entitlements.",
        "tags": [
          "employee/entitlement"
        ]
      }
    },
    "/employee/entitlement/client": {
      "get": {
        "description": "",
        "operationId": "EmployeeEntitlementClient_client",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Client ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find all entitlements at client for user.",
        "tags": [
          "employee/entitlement"
        ]
      }
    },
    "/employee/entitlement/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeEntitlement_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEntitlement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get entitlement by ID.",
        "tags": [
          "employee/entitlement"
        ]
      }
    },
    "/employee/hourlyCostAndRate": {
      "get": {
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_search",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all hourly cost and rates for employee.",
        "tags": [
          "employee/hourlyCostAndRate"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyCostAndRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create hourly cost and rate.",
        "tags": [
          "employee/hourlyCostAndRate"
        ]
      }
    },
    "/employee/hourlyCostAndRate/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find hourly cost and rate by ID.",
        "tags": [
          "employee/hourlyCostAndRate"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeHourlyCostAndRate_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyCostAndRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperHourlyCostAndRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update hourly cost and rate. ",
        "tags": [
          "employee/hourlyCostAndRate"
        ]
      }
    },
    "/employee/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Employee"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create several employees.",
        "tags": [
          "employee"
        ]
      }
    },
    "/employee/logininfo/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeLogininfo_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeLoginInfo"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get employee login info.",
        "tags": [
          "employee/logininfo"
        ]
      }
    },
    "/employee/nextOfKin": {
      "get": {
        "description": "",
        "operationId": "EmployeeNextOfKin_search",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all next of kin for employee.",
        "tags": [
          "employee/nextOfKin"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeNextOfKin_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create next of kin.",
        "tags": [
          "employee/nextOfKin"
        ]
      }
    },
    "/employee/nextOfKin/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeNextOfKin_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find next of kin by ID.",
        "tags": [
          "employee/nextOfKin"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeNextOfKin_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update next of kin. ",
        "tags": [
          "employee/nextOfKin"
        ]
      }
    },
    "/employee/preferences": {
      "get": {
        "description": "",
        "operationId": "EmployeePreferences_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeePreferences"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find employee preferences corresponding with sent data.",
        "tags": [
          "employee/preferences"
        ]
      }
    },
    "/employee/preferences/>loggedInEmployeePreferences": {
      "get": {
        "description": "",
        "operationId": "EmployeePreferencesLoggedInEmployeePreferences_loggedInEmployeePreferences",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeePreferences"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get employee preferences for current user",
        "tags": [
          "employee/preferences"
        ]
      }
    },
    "/employee/preferences/list": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeePreferencesList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/EmployeePreferences"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployeePreferences"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple employee preferences.",
        "tags": [
          "employee/preferences"
        ]
      }
    },
    "/employee/preferences/{id}": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeePreferences_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmployeePreferences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeePreferences"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update employee preferences information.",
        "tags": [
          "employee/preferences"
        ]
      }
    },
    "/employee/standardTime": {
      "get": {
        "description": "",
        "operationId": "EmployeeStandardTime_search",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all standard times for employee.",
        "tags": [
          "employee/standardTime"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeStandardTime_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create standard time.",
        "tags": [
          "employee/standardTime"
        ]
      }
    },
    "/employee/standardTime/byDate": {
      "get": {
        "description": "",
        "operationId": "EmployeeStandardTimeByDate_getByDate",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find standard time for employee by date.",
        "tags": [
          "employee/standardTime"
        ]
      }
    },
    "/employee/standardTime/{id}": {
      "get": {
        "description": "",
        "operationId": "EmployeeStandardTime_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find standard time by ID.",
        "tags": [
          "employee/standardTime"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EmployeeStandardTime_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update standard time. ",
        "tags": [
          "employee/standardTime"
        ]
      }
    },
    "/employee/{id}": {
      "get": {
        "description": "",
        "operationId": "Employee_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get employee by ID.",
        "tags": [
          "employee"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Employee_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update employee.",
        "tags": [
          "employee"
        ]
      }
    },
    "/event": {
      "get": {
        "description": "",
        "operationId": "Event_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMapStringEventInfoDescription"
            }
          }
        },
        "summary": "[BETA] Get all (WebHook) event keys.",
        "tags": [
          "event"
        ]
      }
    },
    "/event/subscription": {
      "get": {
        "description": "",
        "operationId": "EventSubscription_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find all ongoing subscriptions.",
        "tags": [
          "event/subscription"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EventSubscription_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create a new subscription for current EmployeeToken.",
        "tags": [
          "event/subscription"
        ]
      }
    },
    "/event/subscription/list": {
      "delete": {
        "description": "",
        "operationId": "EventSubscriptionList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple subscriptions.",
        "tags": [
          "event/subscription"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EventSubscriptionList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple subscriptions for current EmployeeToken.",
        "tags": [
          "event/subscription"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "EventSubscriptionList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Subscription"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple subscription.",
        "tags": [
          "event/subscription"
        ]
      }
    },
    "/event/subscription/{id}": {
      "delete": {
        "description": "",
        "operationId": "EventSubscription_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete the given subscription.",
        "tags": [
          "event/subscription"
        ]
      },
      "get": {
        "description": "",
        "operationId": "EventSubscription_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get subscription by ID.",
        "tags": [
          "event/subscription"
        ]
      },
      "put": {
        "description": "",
        "operationId": "EventSubscription_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Change a current subscription, based on id.",
        "tags": [
          "event/subscription"
        ]
      }
    },
    "/event/{eventType}": {
      "get": {
        "description": "",
        "operationId": "Event_example",
        "parameters": [
          {
            "description": "Event type, from /event endpoint",
            "in": "path",
            "name": "eventType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEventInfoDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get example webhook payload",
        "tags": [
          "event"
        ]
      }
    },
    "/internal/auth/config": {
      "get": {
        "description": "",
        "operationId": "InternalAuthConfig_getConfig",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAuthConfigDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get auth config",
        "tags": [
          "auth/internal"
        ]
      }
    },
    "/internal/favorites": {
      "get": {
        "description": "",
        "operationId": "InternalFavorites_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperFavoriteMenu"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get favorite menu",
        "tags": [
          "favorites/internal"
        ]
      },
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "",
        "operationId": "InternalFavorites_post",
        "parameters": [
          {
            "description": "Equals",
            "in": "formData",
            "name": "pageUrl",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "formData",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInteger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new favorite",
        "tags": [
          "favorites/internal"
        ]
      }
    },
    "/internal/favorites/{id}": {
      "delete": {
        "description": "",
        "operationId": "InternalFavorites_delete",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete a favorite",
        "tags": [
          "favorites/internal"
        ]
      },
      "put": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "",
        "operationId": "InternalFavorites_put",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Equals",
            "in": "formData",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "formData",
            "name": "rank",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a favorite",
        "tags": [
          "favorites/internal"
        ]
      }
    },
    "/internal/segmentation": {
      "get": {
        "description": "",
        "operationId": "InternalSegmentation_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSegmentationData"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get segmentation data",
        "tags": [
          "segmentation/internal"
        ]
      }
    },
    "/inventory": {
      "get": {
        "description": "",
        "operationId": "Inventory_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isMainInventory",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find inventory corresponding with sent data.",
        "tags": [
          "inventory"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Inventory_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create new inventory.",
        "tags": [
          "inventory"
        ]
      }
    },
    "/inventory/inventories": {
      "get": {
        "description": "",
        "operationId": "InventoryInventories_search",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "inventoryId",
            "required": false,
            "type": "integer"
          },
          {
            "default": false,
            "in": "query",
            "name": "onlyProductWithChangedStatus",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventories"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find inventories corresponding with sent data.",
        "tags": [
          "inventory/inventories"
        ]
      }
    },
    "/inventory/location": {
      "get": {
        "description": "",
        "operationId": "InventoryLocation_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "warehouseId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find inventory locations by inventory ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryLocation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InventoryLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      }
    },
    "/inventory/location/list": {
      "delete": {
        "description": "",
        "operationId": "InventoryLocationList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryLocationList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/InventoryLocation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add multiple inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryLocationList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/InventoryLocation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      }
    },
    "/inventory/location/{id}": {
      "delete": {
        "description": "",
        "operationId": "InventoryLocation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      },
      "get": {
        "description": "",
        "operationId": "InventoryLocation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get inventory location by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryLocation_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InventoryLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "inventory/location"
        ]
      }
    },
    "/inventory/stocktaking": {
      "get": {
        "description": "",
        "operationId": "InventoryStocktaking_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isCompleted",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "inventoryId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find stocktaking corresponding with sent data.",
        "tags": [
          "inventory/stocktaking"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryStocktaking_post",
        "parameters": [
          {
            "description": "[DEPRECATED]",
            "enum": [
              "ALL_PRODUCTS_WITH_INVENTORIES",
              "INCLUDE_PRODUCTS",
              "NO_PRODUCTS"
            ],
            "in": "query",
            "name": "typeOfStocktaking",
            "required": false,
            "type": "string"
          },
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Stocktaking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new stocktaking.",
        "tags": [
          "inventory/stocktaking"
        ]
      }
    },
    "/inventory/stocktaking/productline": {
      "get": {
        "description": "",
        "operationId": "InventoryStocktakingProductline_search",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "stocktakingId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "productGroupIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "locationIds",
            "required": false,
            "type": "string"
          },
          {
            "default": "ALL_PRODUCTS",
            "description": "Productline status",
            "enum": [
              "ALL_PRODUCTS",
              "COUNTED_PRODUCTS",
              "NOT_COUNTED_PRODUCTS"
            ],
            "in": "query",
            "name": "productLineStatus",
            "required": false,
            "type": "string"
          },
          {
            "default": 10000,
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find all product lines by stocktaking ID.",
        "tags": [
          "inventory/stocktaking/productline"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryStocktakingProductline_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create product line. When creating several product lines, use /list for better performance.",
        "tags": [
          "inventory/stocktaking/productline"
        ]
      }
    },
    "/inventory/stocktaking/productline/{id}": {
      "delete": {
        "description": "",
        "operationId": "InventoryStocktakingProductline_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete product line.",
        "tags": [
          "inventory/stocktaking/productline"
        ]
      },
      "get": {
        "description": "",
        "operationId": "InventoryStocktakingProductline_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get product line by ID.",
        "tags": [
          "inventory/stocktaking/productline"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryStocktakingProductline_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update product line.",
        "tags": [
          "inventory/stocktaking/productline"
        ]
      }
    },
    "/inventory/stocktaking/{id}": {
      "delete": {
        "description": "",
        "operationId": "InventoryStocktaking_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete stocktaking.",
        "tags": [
          "inventory/stocktaking"
        ]
      },
      "get": {
        "description": "",
        "operationId": "InventoryStocktaking_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get stocktaking by ID.",
        "tags": [
          "inventory/stocktaking"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InventoryStocktaking_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Stocktaking"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStocktaking"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update stocktaking.",
        "tags": [
          "inventory/stocktaking"
        ]
      }
    },
    "/inventory/{id}": {
      "delete": {
        "description": "",
        "operationId": "Inventory_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete inventory.",
        "tags": [
          "inventory"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Inventory_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get inventory by ID.",
        "tags": [
          "inventory"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Inventory_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Inventory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update inventory.",
        "tags": [
          "inventory"
        ]
      }
    },
    "/invoice": {
      "get": {
        "description": "",
        "operationId": "Invoice_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "invoiceDateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "invoiceDateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "invoiceNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "kid",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "voucherId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
        "tags": [
          "invoice"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Invoice_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          {
            "default": true,
            "description": "Equals",
            "in": "query",
            "name": "sendToCustomer",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "format": "int32",
            "in": "query",
            "name": "paymentTypeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "in": "query",
            "name": "paidAmount",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create invoice. Related Order and OrderLines can be created first, or included as new objects inside the Invoice.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/details": {
      "get": {
        "description": "",
        "operationId": "InvoiceDetails_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "invoiceDateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "invoiceDateTo",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectInvoiceDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
        "tags": [
          "invoice/details"
        ]
      }
    },
    "/invoice/details/{id}": {
      "get": {
        "description": "",
        "operationId": "InvoiceDetails_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectInvoiceDetails"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get ProjectInvoiceDetails by ID.",
        "tags": [
          "invoice/details"
        ]
      }
    },
    "/invoice/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "InvoiceList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Invoice"
              },
              "type": "array"
            }
          },
          {
            "default": true,
            "description": "Equals",
            "in": "query",
            "name": "sendToCustomer",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple invoices. Max 100 at a time.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/paymentType": {
      "get": {
        "description": "",
        "operationId": "InvoicePaymentType_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find payment type corresponding with sent data.",
        "tags": [
          "invoice/paymentType"
        ]
      }
    },
    "/invoice/paymentType/{id}": {
      "get": {
        "description": "",
        "operationId": "InvoicePaymentType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get payment type by ID.",
        "tags": [
          "invoice/paymentType"
        ]
      }
    },
    "/invoice/{id}": {
      "get": {
        "description": "",
        "operationId": "Invoice_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get invoice by ID.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/{id}/:createCreditNote": {
      "put": {
        "description": "",
        "operationId": "InvoiceCreateCreditNote_createCreditNote",
        "parameters": [
          {
            "description": "Invoice id",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Credit note date",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comment",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          },
          {
            "description": "The credit note will not be sent if the customer send type is email and this field is empty",
            "in": "query",
            "name": "creditNoteEmail",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "description": "Equals",
            "in": "query",
            "name": "sendToCustomer",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/{id}/:createReminder": {
      "put": {
        "description": "",
        "operationId": "InvoiceCreateReminder_createReminder",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "type",
            "enum": [
              "SOFT_REMINDER",
              "REMINDER",
              "NOTICE_OF_DEBT_COLLECTION",
              "DEBT_COLLECTION"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "includeCharge",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "includeInterest",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "dispatchType",
            "enum": [
              "NETS_PRINT",
              "EMAIL",
              "SMS"
            ],
            "in": "query",
            "name": "dispatchType",
            "required": true,
            "type": "string"
          },
          {
            "description": "SMS number (must be a valid Norwegian telephone number)",
            "in": "query",
            "name": "smsNumber",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/{id}/:payment": {
      "put": {
        "description": "",
        "operationId": "InvoicePayment_payment",
        "parameters": [
          {
            "description": "Invoice id",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Payment date",
            "in": "query",
            "name": "paymentDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "PaymentType id",
            "format": "int32",
            "in": "query",
            "name": "paymentTypeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Amount paid by customer in the company currency, typically NOK.",
            "in": "query",
            "name": "paidAmount",
            "required": true,
            "type": "number"
          },
          {
            "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
            "in": "query",
            "name": "paidAmountCurrency",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice’s currency.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/{id}/:send": {
      "put": {
        "description": "",
        "operationId": "InvoiceSend_send",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "SendType",
            "enum": [
              "EMAIL",
              "EHF",
              "AVTALEGIRO",
              "EFAKTURA",
              "VIPPS",
              "PAPER",
              "MANUAL"
            ],
            "in": "query",
            "name": "sendType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Will override email address if sendType = EMAIL",
            "in": "query",
            "name": "overrideEmailAddress",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Send invoice by ID and sendType. Optionally override email recipient.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoice/{invoiceId}/pdf": {
      "get": {
        "description": "",
        "operationId": "InvoicePdf_downloadPdf",
        "parameters": [
          {
            "description": "Invoice ID from which PDF is downloaded.",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "default": true,
            "description": "Equals",
            "in": "query",
            "name": "download",
            "required": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get invoice document by invoice ID.",
        "tags": [
          "invoice"
        ]
      }
    },
    "/invoiceRemark/{id}": {
      "get": {
        "description": "",
        "operationId": "InvoiceRemark_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoiceRemark"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get invoice remark by ID.",
        "tags": [
          "invoiceRemark"
        ]
      }
    },
    "/ledger": {
      "get": {
        "description": "",
        "operationId": "Ledger_search",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Deprecated",
            "in": "query",
            "name": "openPostings",
            "required": false,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get ledger (hovedbok).",
        "tags": [
          "ledger"
        ]
      }
    },
    "/ledger/account": {
      "get": {
        "description": "",
        "operationId": "LedgerAccount_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isBankAccount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isApplicableForSupplierInvoice",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Ledger type",
            "enum": [
              "GENERAL",
              "CUSTOMER",
              "VENDOR",
              "EMPLOYEE",
              "ASSET"
            ],
            "in": "query",
            "name": "ledgerType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Balance account",
            "in": "query",
            "name": "isBalanceAccount",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "SAF-T code",
            "in": "query",
            "name": "saftCode",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find accounts corresponding with sent data.",
        "tags": [
          "ledger/account"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerAccount_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a new account.",
        "tags": [
          "ledger/account"
        ]
      }
    },
    "/ledger/account/list": {
      "delete": {
        "description": "",
        "operationId": "LedgerAccountList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete multiple accounts.",
        "tags": [
          "ledger/account"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerAccountList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Account"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create several accounts.",
        "tags": [
          "ledger/account"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerAccountList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Account"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple accounts.",
        "tags": [
          "ledger/account"
        ]
      }
    },
    "/ledger/account/{id}": {
      "delete": {
        "description": "",
        "operationId": "LedgerAccount_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete account.",
        "tags": [
          "ledger/account"
        ]
      },
      "get": {
        "description": "",
        "operationId": "LedgerAccount_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get account by ID.",
        "tags": [
          "ledger/account"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerAccount_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update account.",
        "tags": [
          "ledger/account"
        ]
      }
    },
    "/ledger/accountingPeriod": {
      "get": {
        "description": "",
        "operationId": "LedgerAccountingPeriod_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "numberFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "numberTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "startFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "startTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "endFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "endTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 1400,
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccountingPeriod"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find accounting periods corresponding with sent data.",
        "tags": [
          "ledger/accountingPeriod"
        ]
      }
    },
    "/ledger/accountingPeriod/{id}": {
      "get": {
        "description": "",
        "operationId": "LedgerAccountingPeriod_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccountingPeriod"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get accounting period by ID.",
        "tags": [
          "ledger/accountingPeriod"
        ]
      }
    },
    "/ledger/annualAccount": {
      "get": {
        "description": "",
        "operationId": "LedgerAnnualAccount_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "yearFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "yearTo",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAnnualAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find annual accounts corresponding with sent data.",
        "tags": [
          "ledger/annualAccount"
        ]
      }
    },
    "/ledger/annualAccount/{id}": {
      "get": {
        "description": "",
        "operationId": "LedgerAnnualAccount_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAnnualAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get annual account by ID.",
        "tags": [
          "ledger/annualAccount"
        ]
      }
    },
    "/ledger/closeGroup": {
      "get": {
        "description": "",
        "operationId": "LedgerCloseGroup_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCloseGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find close groups corresponding with sent data.",
        "tags": [
          "ledger/closeGroup"
        ]
      }
    },
    "/ledger/closeGroup/{id}": {
      "get": {
        "description": "",
        "operationId": "LedgerCloseGroup_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCloseGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get close group by ID.",
        "tags": [
          "ledger/closeGroup"
        ]
      }
    },
    "/ledger/openPost": {
      "get": {
        "description": "",
        "operationId": "LedgerOpenPost_openPost",
        "parameters": [
          {
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find open posts corresponding with sent data.",
        "tags": [
          "ledger"
        ]
      }
    },
    "/ledger/paymentTypeOut": {
      "get": {
        "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
        "operationId": "LedgerPaymentTypeOut_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Gets payment types for outgoing payments",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerPaymentTypeOut_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new payment type for outgoing payments",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      }
    },
    "/ledger/paymentTypeOut/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerPaymentTypeOutList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple payment types for outgoing payments at once",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerPaymentTypeOutList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple payment types for outgoing payments at once",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      }
    },
    "/ledger/paymentTypeOut/{id}": {
      "delete": {
        "description": "",
        "operationId": "LedgerPaymentTypeOut_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete payment type for outgoing payments by ID.",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      },
      "get": {
        "description": "",
        "operationId": "LedgerPaymentTypeOut_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get payment type for outgoing payments by ID.",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerPaymentTypeOut_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update existing payment type for outgoing payments",
        "tags": [
          "ledger/paymentTypeOut"
        ]
      }
    },
    "/ledger/posting": {
      "get": {
        "description": "",
        "operationId": "LedgerPosting_search",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Deprecated",
            "in": "query",
            "name": "openPostings",
            "required": false,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountNumberFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountNumberTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "enum": [
              "INCOMING_PAYMENT",
              "INCOMING_PAYMENT_OPPOSITE",
              "INVOICE_EXPENSE",
              "OUTGOING_INVOICE_CUSTOMER_POSTING",
              "WAGE"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find postings corresponding with sent data.",
        "tags": [
          "ledger/posting"
        ]
      }
    },
    "/ledger/posting/openPost": {
      "get": {
        "description": "",
        "operationId": "LedgerPostingOpenPost_openPost",
        "parameters": [
          {
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountNumberFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "accountNumberTo",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find open posts corresponding with sent data.",
        "tags": [
          "ledger/posting"
        ]
      }
    },
    "/ledger/posting/{id}": {
      "get": {
        "description": "",
        "operationId": "LedgerPosting_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPosting"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find postings by ID.",
        "tags": [
          "ledger/posting"
        ]
      }
    },
    "/ledger/vatType": {
      "get": {
        "description": "",
        "operationId": "LedgerVatType_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Type of VAT",
            "enum": [
              "OUTGOING",
              "INCOMING",
              "INCOMING_INVOICE",
              "PROJECT"
            ],
            "in": "query",
            "name": "typeOfVat",
            "required": false,
            "type": "string"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today. Note that this is only used in combination with typeOfVat-parameter. Only valid vatTypes on the given date are returned.",
            "in": "query",
            "name": "vatDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "shouldIncludeSpecificationTypes",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find vat types corresponding with sent data.",
        "tags": [
          "ledger/vatType"
        ]
      }
    },
    "/ledger/vatType/createRelativeVatType": {
      "put": {
        "description": "",
        "operationId": "LedgerVatTypeCreateRelativeVatType_createRelativeVatType",
        "parameters": [
          {
            "description": "VAT type name, max 8 characters.",
            "in": "query",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "VAT type ID. The relative VAT type will behave like this VAT type, except for the basis for calculating the VAT deduction, which is decided by the basis percentage.",
            "format": "int32",
            "in": "query",
            "name": "vatTypeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Basis percentage. This percentage will be multiplied with the transaction amount to find the amount that will be the basis for calculating the deduction amount.",
            "in": "query",
            "name": "percentage",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a new relative VAT Type. These are used if the company has 'forholdsmessig fradrag for inngående MVA'.",
        "tags": [
          "ledger/vatType"
        ]
      }
    },
    "/ledger/vatType/{id}": {
      "get": {
        "description": "",
        "operationId": "LedgerVatType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVatType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get vat type by ID.",
        "tags": [
          "ledger/vatType"
        ]
      }
    },
    "/ledger/voucher": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucher_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "numberFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "numberTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "typeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherSearchResponse"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find vouchers corresponding with sent data.",
        "tags": [
          "ledger/voucher"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerVoucher_post",
        "parameters": [
          {
            "default": true,
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "in": "query",
            "name": "sendToLedger",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/>externalVoucherNumber": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherExternalVoucherNumber_externalVoucherNumber",
        "parameters": [
          {
            "description": "The external voucher number, when voucher is created from import.",
            "in": "query",
            "name": "externalVoucherNumber",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find vouchers based on the external voucher number.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/>nonPosted": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherNonPosted_nonPosted",
        "parameters": [
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Include non-approved vouchers in the result.",
            "in": "query",
            "name": "includeNonApproved",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Only return elements that have changed since this date and time",
            "in": "query",
            "name": "changedSince",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find non-posted vouchers.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/>voucherReception": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherVoucherReception_voucherReception",
        "parameters": [
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Search",
            "in": "query",
            "name": "searchText",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find vouchers in voucher reception.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/historical/:closePostings": {
      "put": {
        "description": "",
        "operationId": "LedgerVoucherHistoricalClosePostings_closePostings",
        "parameters": [
          {
            "description": "[Deprecated] List of Posting IDs to close separated by comma. The postings should have the same customer, supplier or employee. The sum of amount for all postings MUST be 0.0, otherwise an exception will be thrown.",
            "in": "query",
            "name": "postingIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of Posting IDs to close separated by comma. The postings should have the same customer, supplier or employee. The sum of amount for all postings MUST be 0.0, otherwise an exception will be thrown.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Close postings.",
        "tags": [
          "ledger/voucher/historical"
        ]
      }
    },
    "/ledger/voucher/historical/:reverseHistoricalVouchers": {
      "put": {
        "description": "",
        "operationId": "LedgerVoucherHistoricalReverseHistoricalVouchers_reverseHistoricalVouchers",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Deletes all historical vouchers. Requires the \"All vouchers\" and \"Advanced Voucher\" permissions.",
        "tags": [
          "ledger/voucher/historical"
        ]
      }
    },
    "/ledger/voucher/historical/employee": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerVoucherHistoricalEmployee_postEmployee",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create one employee, based on import from external system. Validation is less strict, ie. employee department isn't required.",
        "tags": [
          "ledger/voucher/historical"
        ]
      }
    },
    "/ledger/voucher/historical/historical": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerVoucherHistoricalHistorical_postHistorical",
        "parameters": [
          {
            "description": "List of vouchers and related postings to import. Max 500.  ",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/HistoricalVoucher"
              },
              "type": "array"
            }
          },
          {
            "description": "Import comment, include the name and version of the source system.",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          },
          {
            "description": "Use custom number series (true), or use default number series for historical vouchers (false).",
            "in": "query",
            "name": "useCustomNumberSeries",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseHistoricalVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "API endpoint for creating historical vouchers. These are vouchers created outside Tripletex, and should be from closed accounting years. The intended usage is to get access to historical transcations in Tripletex. Also creates postings. All amount fields in postings will be used. VAT postings must be included, these are not generated automatically like they are for normal vouchers in Tripletex. Requires the \\\"All vouchers\\\" and \\\"Advanced Voucher\\\" permissions.",
        "tags": [
          "ledger/voucher/historical"
        ]
      }
    },
    "/ledger/voucher/historical/{voucherId}/attachment": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "LedgerVoucherHistoricalAttachment_uploadAttachment",
        "parameters": [
          {
            "description": "Voucher ID to upload attachment to.",
            "format": "int32",
            "in": "path",
            "name": "voucherId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
        "tags": [
          "ledger/voucher/historical"
        ]
      }
    },
    "/ledger/voucher/importDocument": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "LedgerVoucherImportDocument_importDocument",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Optional description to use for the voucher(s). If omitted the file name will be used.",
            "in": "formData",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "If the document consists of several pages, should the document be split into one voucher per page?",
            "in": "query",
            "name": "split",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/importGbat10": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "LedgerVoucherImportGbat10_importGbat10",
        "parameters": [
          {
            "description": "If the import should generate VAT postings",
            "in": "formData",
            "name": "generateVatPostings",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "default": "utf-8",
            "description": "The file encoding",
            "in": "formData",
            "name": "encoding",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Import GBAT10. Send as multipart form.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/list": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerVoucherList_putList",
        "parameters": [
          {
            "default": true,
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "in": "query",
            "name": "sendToLedger",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Voucher"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/openingBalance": {
      "delete": {
        "description": "",
        "operationId": "LedgerVoucherOpeningBalance_delete",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete the opening balance. The correction voucher will also be deleted",
        "tags": [
          "ledger/voucher/openingBalance"
        ]
      },
      "get": {
        "description": "",
        "operationId": "LedgerVoucherOpeningBalance_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get the voucher for the opening balance.",
        "tags": [
          "ledger/voucher/openingBalance"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerVoucherOpeningBalance_post",
        "parameters": [
          {
            "description": "dto",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OpeningBalance"
            }
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add an opening balance on the given date.  All movements before this date will be 'zeroed out' in a separate correction voucher. The opening balance must have the first day of a month as the date, and it's also recommended to have the first day of the year as the date. If the postings provided don't balance the voucher, the difference will automatically be posted to a help account",
        "tags": [
          "ledger/voucher/openingBalance"
        ]
      }
    },
    "/ledger/voucher/openingBalance/>correctionVoucher": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherOpeningBalanceCorrectionVoucher_correctionVoucher",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get the correction voucher for the opening balance.",
        "tags": [
          "ledger/voucher/openingBalance"
        ]
      }
    },
    "/ledger/voucher/{id}": {
      "delete": {
        "description": "",
        "operationId": "LedgerVoucher_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete voucher by ID.",
        "tags": [
          "ledger/voucher"
        ]
      },
      "get": {
        "description": "",
        "operationId": "LedgerVoucher_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get voucher by ID.",
        "tags": [
          "ledger/voucher"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "LedgerVoucher_put",
        "parameters": [
          {
            "default": true,
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "in": "query",
            "name": "sendToLedger",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{id}/:reverse": {
      "put": {
        "description": "",
        "operationId": "LedgerVoucherReverse_reverse",
        "parameters": [
          {
            "description": "ID of voucher that should be reversed.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Reverse voucher date",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToInbox": {
      "put": {
        "description": "",
        "operationId": "LedgerVoucherSendToInbox_sendToInbox",
        "parameters": [
          {
            "description": "ID of voucher that should be sent to inbox.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version of voucher that should be sent to inbox.",
            "format": "int32",
            "in": "query",
            "minimum": 0,
            "name": "version",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Send voucher to inbox.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{id}/:sendToLedger": {
      "put": {
        "description": "",
        "operationId": "LedgerVoucherSendToLedger_sendToLedger",
        "parameters": [
          {
            "description": "ID of voucher that should be sent to ledger.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version of voucher that should be sent to ledger.",
            "format": "int32",
            "in": "query",
            "minimum": 0,
            "name": "version",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
            "format": "int32",
            "in": "query",
            "minimum": 0,
            "name": "number",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Send voucher to ledger.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{id}/options": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherOptions_options",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherOptions"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Returns a data structure containing meta information about operations that are available for this voucher. Currently only implemented for DELETE: It is possible to check if the voucher is deletable.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{voucherId}/attachment": {
      "delete": {
        "description": "",
        "operationId": "LedgerVoucherAttachment_deleteAttachment",
        "parameters": [
          {
            "description": "ID of voucher containing the attachment to delete.",
            "format": "int32",
            "in": "path",
            "name": "voucherId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version of voucher containing the attachment to delete.",
            "format": "int32",
            "in": "query",
            "minimum": 0,
            "name": "version",
            "required": false,
            "type": "integer"
          },
          {
            "default": false,
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "in": "query",
            "name": "sendToInbox",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "in": "query",
            "name": "split",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete attachment.",
        "tags": [
          "ledger/voucher"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "LedgerVoucherAttachment_uploadAttachment",
        "parameters": [
          {
            "description": "Voucher ID to upload attachment to.",
            "format": "int32",
            "in": "path",
            "name": "voucherId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload attachment to voucher. If the voucher already has an attachment the content will be appended to the existing attachment as new PDF page(s). Valid document formats are PDF, PNG, JPEG and TIFF. Non PDF formats will be converted to PDF. Send as multipart form.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherPdf_downloadPdf",
        "parameters": [
          {
            "description": "Voucher ID from which PDF is downloaded.",
            "format": "int32",
            "in": "path",
            "name": "voucherId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get PDF representation of voucher by ID.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucher/{voucherId}/pdf/{fileName}": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "LedgerVoucherPdf_uploadPdf",
        "parameters": [
          {
            "description": "Voucher ID to upload PDF to.",
            "format": "int32",
            "in": "path",
            "name": "voucherId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
            "in": "path",
            "name": "fileName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[DEPRECATED] Use POST ledger/voucher/{voucherId}/attachment instead.",
        "tags": [
          "ledger/voucher"
        ]
      }
    },
    "/ledger/voucherType": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherType_search",
        "parameters": [
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find voucher types corresponding with sent data.",
        "tags": [
          "ledger/voucherType"
        ]
      }
    },
    "/ledger/voucherType/{id}": {
      "get": {
        "description": "",
        "operationId": "LedgerVoucherType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get voucher type by ID.",
        "tags": [
          "ledger/voucherType"
        ]
      }
    },
    "/municipality": {
      "get": {
        "description": "",
        "operationId": "Municipality_search",
        "parameters": [
          {
            "default": true,
            "description": "Equals",
            "in": "query",
            "name": "includePayrollTaxZones",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMunicipality"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get municipalities.",
        "tags": [
          "municipality"
        ]
      }
    },
    "/municipality/query": {
      "get": {
        "description": "",
        "operationId": "MunicipalityQuery_query",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": "id, name, number",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMunicipality"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Wildcard search.",
        "tags": [
          "municipality"
        ]
      }
    },
    "/order": {
      "get": {
        "description": "",
        "operationId": "Order_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "orderDateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "orderDateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isClosed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isSubscription",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find orders corresponding with sent data.",
        "tags": [
          "order"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Order_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create order.",
        "tags": [
          "order"
        ]
      }
    },
    "/order/:invoiceMultipleOrders": {
      "put": {
        "description": "",
        "operationId": "OrderInvoiceMultipleOrders_invoiceMultipleOrders",
        "parameters": [
          {
            "description": "List of Order IDs - to the same customer, separated by comma.",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The invoice date",
            "in": "query",
            "name": "invoiceDate",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Send invoice to customer",
            "in": "query",
            "name": "sendToCustomer",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Create a backorder for all any orders that delivers less than ordered amount",
            "in": "query",
            "name": "createBackorders",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Charges a single customer invoice from multiple orders. The orders must be to the same customer, currency, due date, receiver email, attn. and smsNotificationNumber",
        "tags": [
          "order"
        ]
      }
    },
    "/order/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "OrderList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Order"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple Orders with OrderLines. Max 100 at a time.",
        "tags": [
          "order"
        ]
      }
    },
    "/order/orderGroup": {
      "get": {
        "description": "",
        "operationId": "OrderOrderGroup_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "orderIds",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find orderGroups corresponding with sent data.",
        "tags": [
          "order/orderGroup"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "OrderOrderGroup_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderGroup"
            }
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "orderLineIds",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[Beta] Post orderGroup.",
        "tags": [
          "order/orderGroup"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "OrderOrderGroup_put",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderGroup"
            }
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "OrderLineIds",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Should existing orderLines be removed from this orderGroup",
            "in": "query",
            "name": "removeExistingOrderLines",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[Beta] Put orderGroup.",
        "tags": [
          "order/orderGroup"
        ]
      }
    },
    "/order/orderGroup/{id}": {
      "delete": {
        "description": "",
        "operationId": "OrderOrderGroup_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[Beta] Delete orderGroup by ID.",
        "tags": [
          "order/orderGroup"
        ]
      },
      "get": {
        "description": "",
        "operationId": "OrderOrderGroup_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[Beta] Get orderGroup by ID. A orderGroup is a way to group orderLines, and add comments and subtotals",
        "tags": [
          "order/orderGroup"
        ]
      }
    },
    "/order/orderline": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "OrderOrderline_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create order line. When creating several order lines, use /list for better performance.",
        "tags": [
          "order/orderline"
        ]
      }
    },
    "/order/orderline/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "OrderOrderlineList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderLine"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create multiple order lines.",
        "tags": [
          "order/orderline"
        ]
      }
    },
    "/order/orderline/{id}": {
      "delete": {
        "description": "",
        "operationId": "OrderOrderline_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete order line by ID.",
        "tags": [
          "order/orderline"
        ]
      },
      "get": {
        "description": "",
        "operationId": "OrderOrderline_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get order line by ID.",
        "tags": [
          "order/orderline"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "OrderOrderline_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Put order line",
        "tags": [
          "order/orderline"
        ]
      }
    },
    "/order/{id}": {
      "get": {
        "description": "",
        "operationId": "Order_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get order by ID.",
        "tags": [
          "order"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Order_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update order.",
        "tags": [
          "order"
        ]
      }
    },
    "/order/{id}/:approveSubscriptionInvoice": {
      "put": {
        "description": "",
        "operationId": "OrderApproveSubscriptionInvoice_approveSubscriptionInvoice",
        "parameters": [
          {
            "description": "ID of order to approve for subscription invoicing.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The approval date for the subscription.",
            "in": "query",
            "name": "invoiceDate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "To create a subscription invoice, first create a order with the subscription enabled, then approve it with this method. This approves the order for subscription invoicing.",
        "tags": [
          "order"
        ]
      }
    },
    "/order/{id}/:attach": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "OrderAttach_attach",
        "parameters": [
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocumentArchive"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Attach document to specified order ID.",
        "tags": [
          "order"
        ]
      }
    },
    "/order/{id}/:invoice": {
      "put": {
        "description": "",
        "operationId": "OrderInvoice_invoice",
        "parameters": [
          {
            "description": "ID of order to invoice.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The invoice date",
            "in": "query",
            "name": "invoiceDate",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Send invoice to customer",
            "in": "query",
            "name": "sendToCustomer",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Send type used for sending the invoice",
            "enum": [
              "EMAIL",
              "EHF",
              "AVTALEGIRO",
              "EFAKTURA",
              "VIPPS",
              "PAPER",
              "MANUAL"
            ],
            "in": "query",
            "name": "sendType",
            "required": false,
            "type": "string"
          },
          {
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. The payment type must be related to an account with the same currency as the invoice.",
            "format": "int32",
            "in": "query",
            "name": "paymentTypeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid. This amount is in the invoice currency.",
            "in": "query",
            "name": "paidAmount",
            "required": false,
            "type": "number"
          },
          {
            "description": "Amount paid in payment type currency",
            "in": "query",
            "name": "paidAmountAccountCurrency",
            "required": false,
            "type": "number"
          },
          {
            "description": "Payment type of rest amount. It is possible to have two prepaid payments when invoicing. If paymentTypeIdRestAmount > 0, this second payment will be calculated as invoice amount - paidAmount",
            "format": "int32",
            "in": "query",
            "name": "paymentTypeIdRestAmount",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Amount rest in payment type currency",
            "in": "query",
            "name": "paidAmountAccountCurrencyRest",
            "required": false,
            "type": "number"
          },
          {
            "description": "Create on account(a konto)",
            "enum": [
              "NONE",
              "WITH_VAT",
              "WITHOUT_VAT"
            ],
            "in": "query",
            "name": "createOnAccount",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Amount on account",
            "in": "query",
            "name": "amountOnAccount",
            "required": false,
            "type": "number"
          },
          {
            "description": "On account comment",
            "in": "query",
            "name": "onAccountComment",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Create a backorder for this order, available only for pilot users",
            "in": "query",
            "name": "createBackorder",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "Id of the invoice a credit note refers to",
            "format": "int32",
            "in": "query",
            "name": "invoiceIdIfIsCreditNote",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Will override email address if sendType = EMAIL",
            "in": "query",
            "name": "overrideEmailAddress",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create new invoice from order.",
        "tags": [
          "order"
        ]
      }
    },
    "/order/{id}/:unApproveSubscriptionInvoice": {
      "put": {
        "description": "",
        "operationId": "OrderUnApproveSubscriptionInvoice_unApproveSubscriptionInvoice",
        "parameters": [
          {
            "description": "ID of order to unapprove for subscription invoicing.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Unapproves the order for subscription invoicing.",
        "tags": [
          "order"
        ]
      }
    },
    "/pickupPoint": {
      "get": {
        "description": "",
        "operationId": "PickupPoint_search",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Valid ids.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "supplierId",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Valid TransportType ids.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "transportTypeId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePickupPoint"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Search pickup points.",
        "tags": [
          "pickupPoint"
        ]
      }
    },
    "/pickupPoint/{id}": {
      "get": {
        "description": "",
        "operationId": "PickupPoint_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPickupPoint"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find pickup point by ID.",
        "tags": [
          "pickupPoint"
        ]
      }
    },
    "/product": {
      "get": {
        "description": "",
        "operationId": "Product_search",
        "parameters": [
          {
            "description": "DEPRECATED. List of product numbers (Integer only)",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "List of valid product numbers",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "productNumber",
            "required": false,
            "type": "array"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "ean",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isStockItem",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isSupplierProduct",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "currencyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "vatTypeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "productUnitId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "accountId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "costExcludingVatCurrencyFrom",
            "required": false,
            "type": "number"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "costExcludingVatCurrencyTo",
            "required": false,
            "type": "number"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "priceExcludingVatCurrencyFrom",
            "required": false,
            "type": "number"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "priceExcludingVatCurrencyTo",
            "required": false,
            "type": "number"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "priceIncludingVatCurrencyFrom",
            "required": false,
            "type": "number"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "priceIncludingVatCurrencyTo",
            "required": false,
            "type": "number"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find products corresponding with sent data.",
        "tags": [
          "product"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Product_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create new product.",
        "tags": [
          "product"
        ]
      }
    },
    "/product/discountGroup": {
      "get": {
        "description": "",
        "operationId": "ProductDiscountGroup_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDiscountGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find discount groups corresponding with sent data.",
        "tags": [
          "product/discountGroup"
        ]
      }
    },
    "/product/discountGroup/{id}": {
      "get": {
        "description": "",
        "operationId": "ProductDiscountGroup_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDiscountGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get discount group by ID.",
        "tags": [
          "product/discountGroup"
        ]
      }
    },
    "/product/external": {
      "get": {
        "description": "",
        "operationId": "ProductExternal_search",
        "parameters": [
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wholesaler",
            "enum": [
              "AHLSELL",
              "BROEDRENE_DAHL",
              "ELEKTROSKANDIA",
              "HEIDENREICH",
              "ONNINEN",
              "SONEPAR",
              "SOLAR",
              "BERGAARD_AMUNDSEN",
              "BERGAARD_AMUNDSEN_STAVANGER",
              "SORLANDET_ELEKTRO",
              "ETMAN_DISTRIBUSJON",
              "ETM_OST",
              "CENIKA",
              "EP_ENGROS",
              "BETEK",
              "DGROUP",
              "FAGERHULT",
              "GLAMOX",
              "SCHNEIDER",
              "STOKKAN",
              "WURTH",
              "ELEKTROIMPORTOEREN",
              "THERMOFLOOR",
              "LYSKOMPONENTER",
              "NORDESIGN"
            ],
            "in": "query",
            "name": "wholesaler",
            "required": false,
            "type": "string"
          },
          {
            "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
            "in": "query",
            "name": "organizationNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of valid el numbers",
            "in": "query",
            "name": "elNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of valid nrf numbers",
            "in": "query",
            "name": "nrfNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseExternalProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find external products corresponding with sent data. The sorting-field is not in use on this endpoint.",
        "tags": [
          "product/external"
        ]
      }
    },
    "/product/external/{id}": {
      "get": {
        "description": "",
        "operationId": "ProductExternal_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperExternalProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get external product by ID.",
        "tags": [
          "product/external"
        ]
      }
    },
    "/product/group": {
      "get": {
        "description": "",
        "operationId": "ProductGroup_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find product group with sent data",
        "tags": [
          "product/group"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductGroup_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new product group.",
        "tags": [
          "product/group"
        ]
      }
    },
    "/product/group/list": {
      "delete": {
        "description": "",
        "operationId": "ProductGroupList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple product groups.",
        "tags": [
          "product/group"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductGroupList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductGroup"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add multiple products groups.",
        "tags": [
          "product/group"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductGroupList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductGroup"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a list of product groups.",
        "tags": [
          "product/group"
        ]
      }
    },
    "/product/group/query": {
      "get": {
        "description": "",
        "operationId": "ProductGroupQuery_query",
        "parameters": [
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": "id, name",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Wildcard search.",
        "tags": [
          "product/group"
        ]
      }
    },
    "/product/group/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProductGroup_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete product group.",
        "tags": [
          "product/group"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProductGroup_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find product group by ID.",
        "tags": [
          "product/group"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductGroup_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update product group.",
        "tags": [
          "product/group"
        ]
      }
    },
    "/product/groupRelation": {
      "get": {
        "description": "",
        "operationId": "ProductGroupRelation_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "productGroupId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find product group relation with sent data.",
        "tags": [
          "product/groupRelation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductGroupRelation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductGroupRelation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new product group relation.",
        "tags": [
          "product/groupRelation"
        ]
      }
    },
    "/product/groupRelation/list": {
      "delete": {
        "description": "",
        "operationId": "ProductGroupRelationList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple product group relations.",
        "tags": [
          "product/groupRelation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductGroupRelationList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductGroupRelation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add multiple products group relations.",
        "tags": [
          "product/groupRelation"
        ]
      }
    },
    "/product/groupRelation/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProductGroupRelation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete product group relation.",
        "tags": [
          "product/groupRelation"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProductGroupRelation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductGroupRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find product group relation by ID.",
        "tags": [
          "product/groupRelation"
        ]
      }
    },
    "/product/inventoryLocation": {
      "get": {
        "description": "",
        "operationId": "ProductInventoryLocation_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "inventoryId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isMainLocation",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find inventory locations by product ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductInventoryLocation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductInventoryLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      }
    },
    "/product/inventoryLocation/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductInventoryLocationList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductInventoryLocation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add multiple product inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductInventoryLocationList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductInventoryLocation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple product inventory locations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      }
    },
    "/product/inventoryLocation/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProductInventoryLocation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProductInventoryLocation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get inventory location by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductInventoryLocation_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductInventoryLocation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductInventoryLocation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update product inventory location. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "product/inventoryLocation"
        ]
      }
    },
    "/product/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add multiple products.",
        "tags": [
          "product"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Product"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a list of products.",
        "tags": [
          "product"
        ]
      }
    },
    "/product/logisticsSettings": {
      "get": {
        "description": "",
        "operationId": "ProductLogisticsSettings_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLogisticsSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get logistics settings of logged in company.",
        "tags": [
          "product/logisticsSettings"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductLogisticsSettings_put",
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LogisticsSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLogisticsSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update logistics settings of logged in company.",
        "tags": [
          "product/logisticsSettings"
        ]
      }
    },
    "/product/productPrice": {
      "get": {
        "description": "",
        "operationId": "ProductProductPrice_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "fromDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "toDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "If showOnlyLastPrice is true, fromDate and toDate are ignored and only last price of the product is send back.",
            "in": "query",
            "name": "showOnlyLastPrice",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductPrice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find prices for a product. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'.",
        "tags": [
          "product/productPrice"
        ]
      }
    },
    "/product/supplierProduct": {
      "get": {
        "description": "",
        "operationId": "ProductSupplierProduct_search",
        "parameters": [
          {
            "description": "Id of product to find supplier products for.",
            "format": "int32",
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Id of vendor to find supplier products for.",
            "format": "int32",
            "in": "query",
            "name": "vendorId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "productGroupId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": "id, name, number",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find products corresponding with sent data.",
        "tags": [
          "product/supplierProduct"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductSupplierProduct_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SupplierProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create new supplierProduct.",
        "tags": [
          "product/supplierProduct"
        ]
      }
    },
    "/product/supplierProduct/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductSupplierProductList_postList",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/SupplierProduct"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create list of new supplierProduct.",
        "tags": [
          "product/supplierProduct"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductSupplierProductList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/SupplierProduct"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a list of supplierProduct.",
        "tags": [
          "product/supplierProduct"
        ]
      }
    },
    "/product/supplierProduct/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProductSupplierProduct_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete supplierProduct.",
        "tags": [
          "product/supplierProduct"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProductSupplierProduct_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get supplierProduct by ID.",
        "tags": [
          "product/supplierProduct"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductSupplierProduct_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SupplierProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update supplierProduct.",
        "tags": [
          "product/supplierProduct"
        ]
      }
    },
    "/product/unit": {
      "get": {
        "description": "",
        "operationId": "ProductUnit_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Names",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Short names",
            "in": "query",
            "name": "nameShort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Common codes",
            "in": "query",
            "name": "commonCode",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find product units corresponding with sent data.",
        "tags": [
          "product/unit"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductUnit_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new product unit.",
        "tags": [
          "product/unit"
        ]
      }
    },
    "/product/unit/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductUnitList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductUnit"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple product units.",
        "tags": [
          "product/unit"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductUnitList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProductUnit"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update list of product units.",
        "tags": [
          "product/unit"
        ]
      }
    },
    "/product/unit/master": {
      "get": {
        "description": "",
        "operationId": "ProductUnitMaster_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Names",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Short names",
            "in": "query",
            "name": "nameShort",
            "required": false,
            "type": "string"
          },
          {
            "description": "Common codes",
            "in": "query",
            "name": "commonCode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Peppol names",
            "in": "query",
            "name": "peppolName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Peppol symbols",
            "in": "query",
            "name": "peppolSymbol",
            "required": false,
            "type": "string"
          },
          {
            "description": "Inactive units",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 2400,
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnitMaster"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find product units master corresponding with sent data.",
        "tags": [
          "product/unit/master"
        ]
      }
    },
    "/product/unit/master/{id}": {
      "get": {
        "description": "",
        "operationId": "ProductUnitMaster_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnitMaster"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get product unit master by ID.",
        "tags": [
          "product/unit/master"
        ]
      }
    },
    "/product/unit/query": {
      "get": {
        "description": "",
        "operationId": "ProductUnitQuery_query",
        "parameters": [
          {
            "description": "Containing",
            "in": "query",
            "name": "query",
            "required": false,
            "type": "string"
          },
          {
            "default": 25,
            "description": "Number of elements to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "default": "id, name",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Wildcard search.",
        "tags": [
          "product/unit"
        ]
      }
    },
    "/product/unit/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProductUnit_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete product unit by ID.",
        "tags": [
          "product/unit"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProductUnit_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get product unit by ID.",
        "tags": [
          "product/unit"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProductUnit_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProductUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update product unit.",
        "tags": [
          "product/unit"
        ]
      }
    },
    "/product/{id}": {
      "delete": {
        "description": "",
        "operationId": "Product_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete product.",
        "tags": [
          "product"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Product_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get product by ID.",
        "tags": [
          "product"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Product_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update product.",
        "tags": [
          "product"
        ]
      }
    },
    "/product/{id}/image": {
      "delete": {
        "description": "",
        "operationId": "ProductImage_deleteImage",
        "parameters": [
          {
            "description": "ID of Product containing the image to delete.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete image.",
        "tags": [
          "product"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "ProductImage_uploadImage",
        "parameters": [
          {
            "description": "Product ID to upload image to.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload image to Product. Existing image on product will be replaced if exists",
        "tags": [
          "product"
        ]
      }
    },
    "/project": {
      "delete": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Project_deleteList",
        "parameters": [
          {
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Project"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple projects.",
        "tags": [
          "project"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Project_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isOffer",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectManagerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeInProjectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "startDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "startDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "endDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "endDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isClosed",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isFixedPrice",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "externalAccountsNumber",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "If isClosed is false, include projects that have been closed within the last 3 months. Equals",
            "in": "query",
            "name": "includeRecentlyClosed",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find projects corresponding with sent data.",
        "tags": [
          "project"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Project_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add new project.",
        "tags": [
          "project"
        ]
      }
    },
    "/project/>forTimeSheet": {
      "get": {
        "description": "",
        "operationId": "ProjectForTimeSheet_getForTimeSheet",
        "parameters": [
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "includeProjectOffers",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find projects applicable for time sheet registration on a specific day.",
        "tags": [
          "project"
        ]
      }
    },
    "/project/category": {
      "get": {
        "description": "",
        "operationId": "ProjectCategory_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project categories corresponding with sent data.",
        "tags": [
          "project/category"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectCategory_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new project category.",
        "tags": [
          "project/category"
        ]
      }
    },
    "/project/category/{id}": {
      "get": {
        "description": "",
        "operationId": "ProjectCategory_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project category by ID.",
        "tags": [
          "project/category"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectCategory_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update project category.",
        "tags": [
          "project/category"
        ]
      }
    },
    "/project/controlForm": {
      "get": {
        "description": "",
        "operationId": "ProjectControlForm_search",
        "parameters": [
          {
            "description": "Project ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectControlForm"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get project control forms by project ID.",
        "tags": [
          "project/controlForm"
        ]
      }
    },
    "/project/controlForm/{id}": {
      "get": {
        "description": "",
        "operationId": "ProjectControlForm_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectControlForm"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get project control form by ID.",
        "tags": [
          "project/controlForm"
        ]
      }
    },
    "/project/controlFormType": {
      "get": {
        "description": "",
        "operationId": "ProjectControlFormType_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectControlFormType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get project control form types",
        "tags": [
          "project/controlFormType"
        ]
      }
    },
    "/project/controlFormType/{id}": {
      "get": {
        "description": "",
        "operationId": "ProjectControlFormType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectControlFormType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get project control form type by ID.",
        "tags": [
          "project/controlFormType"
        ]
      }
    },
    "/project/hourlyRates": {
      "get": {
        "description": "",
        "operationId": "ProjectHourlyRates_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "TYPE_PREDEFINED_HOURLY_RATES",
              "TYPE_PROJECT_SPECIFIC_HOURLY_RATES",
              "TYPE_FIXED_HOURLY_RATE"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "startDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "startDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "showInProjectOrder",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project hourly rates corresponding with sent data.",
        "tags": [
          "project/hourlyRates"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRates_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectHourlyRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a project hourly rate. ",
        "tags": [
          "project/hourlyRates"
        ]
      }
    },
    "/project/hourlyRates/deleteByProjectIds": {
      "delete": {
        "description": "",
        "operationId": "ProjectHourlyRatesDeleteByProjectIds_deleteByProjectIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete project hourly rates by project id.",
        "tags": [
          "project/hourlyRates"
        ]
      }
    },
    "/project/hourlyRates/list": {
      "delete": {
        "description": "",
        "operationId": "ProjectHourlyRatesList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete project hourly rates.",
        "tags": [
          "project/hourlyRates"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRatesList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectHourlyRate"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create multiple project hourly rates.",
        "tags": [
          "project/hourlyRates"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRatesList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectHourlyRate"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple project hourly rates.",
        "tags": [
          "project/hourlyRates"
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates": {
      "get": {
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectHourlyRateId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "activityId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project specific rates corresponding with sent data.",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSpecificRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create new project specific rate. ",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/list": {
      "delete": {
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete project specific rates.",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectSpecificRate"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create multiple new project specific rates.",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRatesList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectSpecificRate"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple project specific rates.",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      }
    },
    "/project/hourlyRates/projectSpecificRates/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete project specific rate ",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project specific rate by ID.",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRatesProjectSpecificRates_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSpecificRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSpecificRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a project specific rate.",
        "tags": [
          "project/hourlyRates/projectSpecificRates"
        ]
      }
    },
    "/project/hourlyRates/updateOrAddHourRates": {
      "put": {
        "description": "",
        "operationId": "ProjectHourlyRatesUpdateOrAddHourRates_updateOrAddHourRates",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/HourlyRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update or add the same project hourly rate from project overview.",
        "tags": [
          "project/hourlyRates"
        ]
      }
    },
    "/project/hourlyRates/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProjectHourlyRates_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete Project Hourly Rate ",
        "tags": [
          "project/hourlyRates"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProjectHourlyRates_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project hourly rate by ID.",
        "tags": [
          "project/hourlyRates"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectHourlyRates_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectHourlyRate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectHourlyRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a project hourly rate.",
        "tags": [
          "project/hourlyRates"
        ]
      }
    },
    "/project/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "ProjectImport_importProjectStatement",
        "parameters": [
          {
            "description": "File format",
            "enum": [
              "XLS",
              "CSV"
            ],
            "in": "query",
            "name": "fileFormat",
            "required": true,
            "type": "string"
          },
          {
            "description": "Encoding",
            "in": "query",
            "name": "encoding",
            "required": false,
            "type": "string"
          },
          {
            "description": "Delimiter",
            "in": "query",
            "name": "delimiter",
            "required": false,
            "type": "string"
          },
          {
            "description": "Ignore first row",
            "in": "query",
            "name": "ignoreFirstRow",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "The project import file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload project import file.",
        "tags": [
          "project/import"
        ]
      }
    },
    "/project/list": {
      "delete": {
        "description": "",
        "operationId": "ProjectList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete projects.",
        "tags": [
          "project"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Project"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
        "tags": [
          "project"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Project"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple projects.",
        "tags": [
          "project"
        ]
      }
    },
    "/project/orderline": {
      "get": {
        "description": "",
        "operationId": "ProjectOrderline_search",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find all order lines for project.",
        "tags": [
          "project/orderline"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectOrderline_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
        "tags": [
          "project/orderline"
        ]
      }
    },
    "/project/orderline/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectOrderlineList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectOrderLine"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple order lines.",
        "tags": [
          "project/orderline"
        ]
      }
    },
    "/project/orderline/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProjectOrderline_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete order line by ID.",
        "tags": [
          "project/orderline"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProjectOrderline_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get order line by ID.",
        "tags": [
          "project/orderline"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectOrderline_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update project orderline.",
        "tags": [
          "project/orderline"
        ]
      }
    },
    "/project/participant": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectParticipant_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add new project participant.",
        "tags": [
          "project/participant"
        ]
      }
    },
    "/project/participant/list": {
      "delete": {
        "description": "",
        "operationId": "ProjectParticipantList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete project participants.",
        "tags": [
          "project/participant"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectParticipantList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/ProjectParticipant"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Add new project participant. Multiple project participants can be sent in the same request.",
        "tags": [
          "project/participant"
        ]
      }
    },
    "/project/participant/{id}": {
      "get": {
        "description": "",
        "operationId": "ProjectParticipant_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find project participant by ID.",
        "tags": [
          "project/participant"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectParticipant_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update project participant.",
        "tags": [
          "project/participant"
        ]
      }
    },
    "/project/projectActivity": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectProjectActivity_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectActivity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add project activity.",
        "tags": [
          "project/projectActivity"
        ]
      }
    },
    "/project/projectActivity/list": {
      "delete": {
        "description": "",
        "operationId": "ProjectProjectActivityList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete project activities",
        "tags": [
          "project/projectActivity"
        ]
      }
    },
    "/project/projectActivity/{id}": {
      "delete": {
        "description": "",
        "operationId": "ProjectProjectActivity_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete project activity",
        "tags": [
          "project/projectActivity"
        ]
      },
      "get": {
        "description": "",
        "operationId": "ProjectProjectActivity_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project activity by id",
        "tags": [
          "project/projectActivity"
        ]
      }
    },
    "/project/resourcePlanBudget": {
      "get": {
        "description": "",
        "operationId": "ProjectResourcePlanBudget_get",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "periodStart",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "periodEnd",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "HOUR",
              "DAY",
              "WEEK",
              "MONTH"
            ],
            "in": "query",
            "name": "periodType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperResourcePlanBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get resource plan entries in the specified period.",
        "tags": [
          "project/resourceplan"
        ]
      }
    },
    "/project/settings": {
      "get": {
        "description": "",
        "operationId": "ProjectSettings_get",
        "parameters": [
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "useNkode",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get project settings of logged in company.",
        "tags": [
          "project/settings"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "ProjectSettings_put",
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ProjectSettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update project settings for company",
        "tags": [
          "project/settings"
        ]
      }
    },
    "/project/task": {
      "get": {
        "description": "",
        "operationId": "ProjectTask_search",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTask"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find all tasks for project.",
        "tags": [
          "project/task"
        ]
      }
    },
    "/project/template/{id}": {
      "get": {
        "description": "",
        "operationId": "ProjectTemplate_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectTemplate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get project template by ID.",
        "tags": [
          "project/template"
        ]
      }
    },
    "/project/{id}": {
      "delete": {
        "description": "",
        "operationId": "Project_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete project.",
        "tags": [
          "project"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Project_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find project by ID.",
        "tags": [
          "project"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Project_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update project.",
        "tags": [
          "project"
        ]
      }
    },
    "/project/{id}/period/budgetStatus": {
      "get": {
        "description": "",
        "operationId": "ProjectPeriodBudgetStatus_getBudgetStatus",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectBudgetStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get the budget status for the project period",
        "tags": [
          "project/period"
        ]
      }
    },
    "/project/{id}/period/hourlistReport": {
      "get": {
        "description": "",
        "operationId": "ProjectPeriodHourlistReport_hourlistReport",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodHourlyReport"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find hourlist report by project period.",
        "tags": [
          "project/period"
        ]
      }
    },
    "/project/{id}/period/invoiced": {
      "get": {
        "description": "",
        "operationId": "ProjectPeriodInvoiced_invoiced",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodInvoiced"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find invoiced info by project period.",
        "tags": [
          "project/period"
        ]
      }
    },
    "/project/{id}/period/invoicingReserve": {
      "get": {
        "description": "",
        "operationId": "ProjectPeriodInvoicingReserve_invoicingReserve",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodInvoicingReserve"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find invoicing reserve by project period.",
        "tags": [
          "project/period"
        ]
      }
    },
    "/project/{id}/period/monthlyStatus": {
      "get": {
        "description": "",
        "operationId": "ProjectPeriodMonthlyStatus_monthlyStatus",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectPeriodMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find overall status by project period.",
        "tags": [
          "project/period"
        ]
      }
    },
    "/project/{id}/period/overallStatus": {
      "get": {
        "description": "",
        "operationId": "ProjectPeriodOverallStatus_overallStatus",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectPeriodOverallStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find overall status by project period.",
        "tags": [
          "project/period"
        ]
      }
    },
    "/purchaseOrder": {
      "get": {
        "description": "",
        "operationId": "PurchaseOrder_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "deliveryDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "in": "query",
            "name": "deliveryDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "creationDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "in": "query",
            "name": "creationDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isClosed",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "withDeviationOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find purchase orders with send data",
        "tags": [
          "purchaseOrder"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrder_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Creates a new purchase order",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/deviation": {
      "get": {
        "description": "",
        "operationId": "PurchaseOrderDeviation_search",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "purchaseOrderId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find handled deviations for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Deviation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register deviation on goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      }
    },
    "/purchaseOrder/deviation/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviationList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Deviation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviationList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Deviation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      }
    },
    "/purchaseOrder/deviation/{id}": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderDeviation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      },
      "get": {
        "description": "",
        "operationId": "PurchaseOrderDeviation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Get deviation by order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviation_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Deviation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDeviation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update deviation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:approve": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviationApprove_approve",
        "parameters": [
          {
            "description": "Purchase Order ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Approve deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:deliver": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviationDeliver_deliver",
        "parameters": [
          {
            "description": "Purchase Order ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Send deviations to approval. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      }
    },
    "/purchaseOrder/deviation/{id}/:undeliver": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderDeviationUndeliver_undeliver",
        "parameters": [
          {
            "description": "Purchase Order ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Undeliver the deviations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/deviation"
        ]
      }
    },
    "/purchaseOrder/goodsReceipt": {
      "get": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_search",
        "parameters": [
          {
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "in": "query",
            "name": "receivedDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and incl.).",
            "in": "query",
            "name": "receivedDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "STATUS_OPEN",
              "STATUS_CONFIRMED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "withoutPurchase",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceipt"
            }
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register goods receipt without an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/list": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/GoodsReceipt"
              },
              "type": "array"
            }
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register multiple goods receipt without an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete goods receipt by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      },
      "get": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get goods receipt by purchase order ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceipt_put",
        "parameters": [
          {
            "description": "Goods Receipt ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceipt"
            }
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:confirm": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptConfirm_confirm",
        "parameters": [
          {
            "description": "Purchase Order ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": false,
            "description": "Create restorder if quantity received is less than ordered",
            "in": "query",
            "name": "createRestOrder",
            "required": false,
            "type": "boolean"
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Confirm goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:receiveAndConfirm": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptReceiveAndConfirm_receiveAndConfirm",
        "parameters": [
          {
            "description": "Purchase Order ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The approval date for the subscription.",
            "in": "query",
            "name": "receivedDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of inventory. Main inventory is set as default",
            "format": "int32",
            "in": "query",
            "name": "inventoryId",
            "required": false,
            "type": "integer"
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA]  Receive all ordered products and approve goods receipt. Only available for users that have activated the Logistics/Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      }
    },
    "/purchaseOrder/goodsReceipt/{id}/:registerGoodsReceipt": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptRegisterGoodsReceipt_registerGoodsReceipt",
        "parameters": [
          {
            "description": "Purchase Order ID.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "registrationDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of inventory. Main inventory is set as default",
            "format": "int32",
            "in": "query",
            "name": "inventoryId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceipt"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register goods receipt. Quantity received on the products is set to the same as quantity ordered. To update the quantity received, use PUT /purchaseOrder/goodsReceiptLine/{id}. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceipt"
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine": {
      "get": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_search",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "purchaseOrderId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find goods receipt lines for purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceiptLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register new goods receipt; new product on an existing purchase order. When registration of several goods receipt, use /list for better performance. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/list": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineList_deleteList",
        "parameters": [
          {
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete goods receipt lines by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Register multiple new goods receipt on an existing purchase order. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLineList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/GoodsReceiptLine"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update goods receipt lines on a goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      }
    },
    "/purchaseOrder/goodsReceiptLine/{id}": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete goods receipt line by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      },
      "get": {
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get goods receipt line by purchase order line ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderGoodsReceiptLine_put",
        "parameters": [
          {
            "description": "Goods receipt Line ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoodsReceiptLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperGoodsReceiptLine"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a goods receipt line on a goods receipt. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/goodsReceiptLine"
        ]
      }
    },
    "/purchaseOrder/orderline": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderOrderline_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Creates purchase order line.",
        "tags": [
          "purchaseOrder/orderline"
        ]
      }
    },
    "/purchaseOrder/orderline/list": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderOrderlineList_deleteList",
        "parameters": [
          {
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PurchaseOrderline"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete purchase order lines by ID.",
        "tags": [
          "purchaseOrder/orderline"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderOrderlineList_postList",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PurchaseOrderline"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create list of new purchase order lines.",
        "tags": [
          "purchaseOrder/orderline"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderOrderlineList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PurchaseOrderline"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a list of purchase order lines.",
        "tags": [
          "purchaseOrder/orderline"
        ]
      }
    },
    "/purchaseOrder/orderline/{id}": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderOrderline_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Delete purchase order line.",
        "tags": [
          "purchaseOrder/orderline"
        ]
      },
      "get": {
        "description": "",
        "operationId": "PurchaseOrderOrderline_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Find purchase order line by ID.",
        "tags": [
          "purchaseOrder/orderline"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderOrderline_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderline"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderline"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Updates purchase order line",
        "tags": [
          "purchaseOrder/orderline"
        ]
      }
    },
    "/purchaseOrder/purchaseOrderIncomingInvoiceRelation": {
      "get": {
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "orderOutId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "voucherId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find purchase order relation to voucher with sent data. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create new relation between purchase order and a voucher. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
        ]
      }
    },
    "/purchaseOrder/purchaseOrderIncomingInvoiceRelation/list": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelationList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete multiple purchase order voucher relations. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelationList_postList",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PurchaseOrderIncomingInvoiceRelation"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create a new list of relations between purchase order and voucher. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
        ]
      }
    },
    "/purchaseOrder/purchaseOrderIncomingInvoiceRelation/{id}": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete purchase order voucher relation. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
        ]
      },
      "get": {
        "description": "",
        "operationId": "PurchaseOrderPurchaseOrderIncomingInvoiceRelation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrderIncomingInvoiceRelation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find purchase order relation to voucher by ID. Only available for users that have activated the Logistics Plus Beta-program in 'Our customer account'",
        "tags": [
          "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
        ]
      }
    },
    "/purchaseOrder/{id}": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrder_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Delete purchase order.",
        "tags": [
          "purchaseOrder"
        ]
      },
      "get": {
        "description": "",
        "operationId": "PurchaseOrder_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Find purchase order by ID.",
        "tags": [
          "purchaseOrder"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "PurchaseOrder_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseOrder"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Update purchase order.",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/{id}/:send": {
      "put": {
        "description": "",
        "operationId": "PurchaseOrderSend_send",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": "DEFAULT",
            "description": "Send type.DEFAULT will determine the send parameter based on the supplier type.If supplier is not wholesaler, receiverEmail from the PO will be used if it's specified.If receiverEmail empty it will take the vendor email.",
            "enum": [
              "DEFAULT",
              "EMAIL",
              "FTP"
            ],
            "in": "query",
            "name": "sendType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Send purchase order by id and sendType.",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/{id}/:sendByEmail": {
      "put": {
        "description": "",
        "operationId": "PurchaseOrderSendByEmail_sendByEmail",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Email address",
            "in": "query",
            "name": "emailAddress",
            "required": true,
            "type": "string"
          },
          {
            "description": "Subject",
            "in": "query",
            "name": "subject",
            "required": true,
            "type": "string"
          },
          {
            "description": "Message",
            "in": "query",
            "name": "message",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Send purchase order by customisable email.",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/{id}/attachment": {
      "delete": {
        "description": "",
        "operationId": "PurchaseOrderAttachment_deleteAttachment",
        "parameters": [
          {
            "description": "ID of purchase order containing the attachment to delete.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete attachment.",
        "tags": [
          "purchaseOrder"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "PurchaseOrderAttachment_uploadAttachment",
        "parameters": [
          {
            "description": "Purchase Order ID to upload attachment to.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "default": "*",
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Upload attachment to Purchase Order.",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/{id}/attachment/list": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "PurchaseOrderAttachmentList_uploadAttachments",
        "parameters": [
          {
            "description": "Purchase Order ID to upload attachment to.",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Multipart files",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormDataMultiPart"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPurchaseOrder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload multiple attachments to Purchase Order.",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/reminder": {
      "get": {
        "description": "",
        "operationId": "Reminder_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "termOfPaymentTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "termOfPaymentFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "invoiceId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "customerId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseReminder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find reminders corresponding with sent data.",
        "tags": [
          "reminder"
        ]
      }
    },
    "/reminder/{id}": {
      "get": {
        "description": "",
        "operationId": "Reminder_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperReminder"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get reminder by ID.",
        "tags": [
          "reminder"
        ]
      }
    },
    "/reminder/{reminderId}/pdf": {
      "get": {
        "description": "",
        "operationId": "ReminderPdf_downloadPdf",
        "parameters": [
          {
            "description": "Reminder ID from which PDF is downloaded.",
            "format": "int32",
            "in": "path",
            "name": "reminderId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get reminder document by reminder ID.",
        "tags": [
          "reminder"
        ]
      }
    },
    "/resultbudget/company": {
      "get": {
        "description": "",
        "operationId": "ResultbudgetCompany_getCompanyResultBudget",
        "parameters": [
          {
            "description": "Must be between 1900-2100. Defaults to current year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get result budget for company",
        "tags": [
          "resultbudget"
        ]
      }
    },
    "/resultbudget/department/{id}": {
      "get": {
        "description": "",
        "operationId": "ResultbudgetDepartment_getDepartmentResultBudget",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Must be between 1900-2100. Defaults to current year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get result budget associated with a departmentId",
        "tags": [
          "resultbudget"
        ]
      }
    },
    "/resultbudget/employee/{id}": {
      "get": {
        "description": "",
        "operationId": "ResultbudgetEmployee_getEmployeeResultBudget",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Must be between 1900-2100. Defaults to current year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get result budget associated with an employeeId",
        "tags": [
          "resultbudget"
        ]
      }
    },
    "/resultbudget/product/{id}": {
      "get": {
        "description": "",
        "operationId": "ResultbudgetProduct_getProductResultBudget",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Must be between 1900-2100. Defaults to current year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get result budget associated with a productId",
        "tags": [
          "resultbudget"
        ]
      }
    },
    "/resultbudget/project/{id}": {
      "get": {
        "description": "",
        "operationId": "ResultbudgetProject_getProjectResultBudget",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Must be between 1900-2100. Defaults to current year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseResultBudget"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get result budget associated with a projectId",
        "tags": [
          "resultbudget"
        ]
      }
    },
    "/saft/exportSAFT": {
      "get": {
        "description": "",
        "operationId": "SaftExportSAFT_exportSAFT",
        "parameters": [
          {
            "description": "Year to export",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create SAF-T export for the Tripletex account.",
        "tags": [
          "saft"
        ]
      }
    },
    "/saft/importSAFT": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "SaftImportSAFT_importSAFT",
        "parameters": [
          {
            "description": "The SAF-T file (XML)",
            "in": "formData",
            "name": "saftFile",
            "required": true,
            "type": "file"
          },
          {
            "description": "Mapping of chart of accounts (Excel). See https://tripletex.no/resources/examples/saft_account_mapping.xls",
            "in": "formData",
            "name": "mappingFile",
            "required": true,
            "type": "file"
          },
          {
            "description": "Create customers and suppliers",
            "in": "formData",
            "name": "importCustomerVendors",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create new accounts",
            "in": "formData",
            "name": "createMissingAccounts",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create an opening balance from the import file's starting balance.",
            "in": "formData",
            "name": "importStartBalanceFromOpening",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create an opening balance from the import file's outgoing balance.",
            "in": "formData",
            "name": "importStartBalanceFromClosing",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create vouchers",
            "in": "formData",
            "name": "importVouchers",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create departments",
            "in": "formData",
            "name": "importDepartments",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create projects",
            "in": "formData",
            "name": "importProjects",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Let Tripletex create customer and supplier numbers and ignore the numbers in the import file.",
            "in": "formData",
            "name": "tripletexGeneratesCustomerNumbers",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create an opening balance on accounts receivable from customers",
            "in": "formData",
            "name": "createCustomerIB",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Overwrite existing names on accounts",
            "in": "formData",
            "name": "updateAccountNames",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Create an opening balance on accounts payable",
            "in": "formData",
            "name": "createVendorIB",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Overwrite transaction date on period discrepancies.",
            "in": "formData",
            "name": "overrideVoucherDateOnDiscrepancy",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Overwrite existing customers/contacts",
            "in": "formData",
            "name": "overwriteCustomersContacts",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Only active customers",
            "in": "formData",
            "name": "onlyActiveCustomers",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Only active accounts",
            "in": "formData",
            "name": "onlyActiveAccounts",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Update the opening balance of main ledger accounts from the import file by import before the opening balance.",
            "in": "formData",
            "name": "updateStartBalance",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Import SAF-T. Send XML file as multipart form.",
        "tags": [
          "saft"
        ]
      }
    },
    "/salary/compilation": {
      "get": {
        "description": "",
        "operationId": "SalaryCompilation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryCompilation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find salary compilation by employee.",
        "tags": [
          "salary/compilation"
        ]
      }
    },
    "/salary/compilation/pdf": {
      "get": {
        "description": "",
        "operationId": "SalaryCompilationPdf_downloadPdf",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Must be between 1900-2100. Defaults to previous year.",
            "format": "int32",
            "in": "query",
            "name": "year",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find salary compilation (PDF document) by employee.",
        "tags": [
          "salary/compilation"
        ]
      }
    },
    "/salary/payslip": {
      "get": {
        "description": "",
        "operationId": "SalaryPayslip_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "wageTransactionId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "activityId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "yearFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "yearTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "monthFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "monthTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "voucherDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "voucherDateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePayslip"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find payslips corresponding with sent data.",
        "tags": [
          "salary/payslip"
        ]
      }
    },
    "/salary/payslip/{id}": {
      "get": {
        "description": "",
        "operationId": "SalaryPayslip_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPayslip"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find payslip by ID.",
        "tags": [
          "salary/payslip"
        ]
      }
    },
    "/salary/payslip/{id}/pdf": {
      "get": {
        "description": "",
        "operationId": "SalaryPayslipPdf_downloadPdf",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find payslip (PDF document) by ID.",
        "tags": [
          "salary/payslip"
        ]
      }
    },
    "/salary/settings": {
      "get": {
        "description": "",
        "operationId": "SalarySettings_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get salary settings of logged in company.",
        "tags": [
          "salary/settings"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettings_put",
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalarySettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update settings of logged in company.",
        "tags": [
          "salary/settings"
        ]
      }
    },
    "/salary/settings/holiday": {
      "get": {
        "description": "",
        "operationId": "SalarySettingsHoliday_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find holiday settings of current logged in company.",
        "tags": [
          "salary/settings/holiday"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsHoliday_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a holiday setting of current logged in company.",
        "tags": [
          "salary/settings/holiday"
        ]
      }
    },
    "/salary/settings/holiday/list": {
      "delete": {
        "description": "",
        "operationId": "SalarySettingsHolidayList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete multiple holiday settings of current logged in company.",
        "tags": [
          "salary/settings/holiday"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsHolidayList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create multiple holiday settings of current logged in company.",
        "tags": [
          "salary/settings/holiday"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsHolidayList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple holiday settings of current logged in company.",
        "tags": [
          "salary/settings/holiday"
        ]
      }
    },
    "/salary/settings/holiday/{id}": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsHoliday_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a holiday setting of current logged in company.",
        "tags": [
          "salary/settings/holiday"
        ]
      }
    },
    "/salary/settings/pensionScheme": {
      "get": {
        "description": "",
        "operationId": "SalarySettingsPensionScheme_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find pension schemes.",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      },
      "post": {
        "description": "",
        "operationId": "SalarySettingsPensionScheme_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PensionScheme"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a Pension Scheme.",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      }
    },
    "/salary/settings/pensionScheme/list": {
      "delete": {
        "description": "",
        "operationId": "SalarySettingsPensionSchemeList_deleteByIds",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete multiple Pension Schemes.",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsPensionSchemeList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PensionScheme"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create multiple Pension Schemes.",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsPensionSchemeList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/PensionScheme"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update multiple Pension Schemes.",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      }
    },
    "/salary/settings/pensionScheme/{id}": {
      "delete": {
        "description": "",
        "operationId": "SalarySettingsPensionScheme_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete a Pension Scheme",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      },
      "get": {
        "description": "",
        "operationId": "SalarySettingsPensionScheme_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get Pension Scheme for a specific ID",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      },
      "put": {
        "description": "",
        "operationId": "SalarySettingsPensionScheme_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PensionScheme"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPensionScheme"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update a Pension Scheme",
        "tags": [
          "salary/settings/pensionScheme"
        ]
      }
    },
    "/salary/settings/standardTime": {
      "get": {
        "description": "",
        "operationId": "SalarySettingsStandardTime_search",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get all standard times.",
        "tags": [
          "salary/settings/standardTime"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsStandardTime_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyStandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create standard time.",
        "tags": [
          "salary/settings/standardTime"
        ]
      }
    },
    "/salary/settings/standardTime/byDate": {
      "get": {
        "description": "",
        "operationId": "SalarySettingsStandardTimeByDate_getByDate",
        "parameters": [
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find standard time by date",
        "tags": [
          "salary/settings/standardTime"
        ]
      }
    },
    "/salary/settings/standardTime/{id}": {
      "get": {
        "description": "",
        "operationId": "SalarySettingsStandardTime_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find standard time by ID.",
        "tags": [
          "salary/settings/standardTime"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalarySettingsStandardTime_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyStandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyStandardTime"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update standard time. ",
        "tags": [
          "salary/settings/standardTime"
        ]
      }
    },
    "/salary/transaction": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SalaryTransaction_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SalaryTransaction"
            }
          },
          {
            "default": false,
            "description": "Generate tax deduction",
            "in": "query",
            "name": "generateTaxDeduction",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create a new salary transaction.",
        "tags": [
          "salary/transaction"
        ]
      }
    },
    "/salary/transaction/{id}": {
      "delete": {
        "description": "",
        "operationId": "SalaryTransaction_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete salary transaction by ID.",
        "tags": [
          "salary/transaction"
        ]
      },
      "get": {
        "description": "",
        "operationId": "SalaryTransaction_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find salary transaction by ID.",
        "tags": [
          "salary/transaction"
        ]
      }
    },
    "/salary/type": {
      "get": {
        "description": "",
        "operationId": "SalaryType_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "number",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "showInTimesheet",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalaryType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find salary type corresponding with sent data.",
        "tags": [
          "salary/type"
        ]
      }
    },
    "/salary/type/{id}": {
      "get": {
        "description": "",
        "operationId": "SalaryType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find salary type by ID.",
        "tags": [
          "salary/type"
        ]
      }
    },
    "/subscription/additionalOrderLines": {
      "get": {
        "description": "",
        "operationId": "SubscriptionAdditionalOrderLines_getAdditionalOrderLines",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAdditionalServiceOrderLineDTO[]"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Returns the additional order lines for an account.",
        "tags": [
          "subscription"
        ]
      }
    },
    "/subscription/invoiceHistory": {
      "get": {
        "description": "",
        "operationId": "SubscriptionInvoiceHistory_getInvoiceHistory",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoiceOrderLineDTO[]"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Returns the invoice history for an account.",
        "tags": [
          "subscription"
        ]
      }
    },
    "/subscription/packages": {
      "get": {
        "description": "",
        "operationId": "SubscriptionPackages_getPackages",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMySubscriptionModuleDTO[]"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Returns the packages that can exist for an account.",
        "tags": [
          "subscription"
        ]
      }
    },
    "/subscription/services": {
      "get": {
        "description": "",
        "operationId": "SubscriptionServices_getServices",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMySubscriptionModuleDTO[]"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Returns the services that are available for an account.",
        "tags": [
          "subscription"
        ]
      }
    },
    "/supplier": {
      "get": {
        "description": "",
        "operationId": "Supplier_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "supplierNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "organizationNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "email",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "invoiceEmail",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "accountManagerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Only return elements that have changed since this date and time",
            "in": "query",
            "name": "changedSince",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isWholesaler",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "showProducts",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find suppliers corresponding with sent data.",
        "tags": [
          "supplier"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Supplier_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create supplier. Related supplier addresses may also be created.",
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplier/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SupplierList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Supplier"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
        "tags": [
          "supplier"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SupplierList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Supplier"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplier/{id}": {
      "delete": {
        "description": "",
        "operationId": "Supplier_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete supplier by ID",
        "tags": [
          "supplier"
        ]
      },
      "get": {
        "description": "",
        "operationId": "Supplier_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get supplier by ID.",
        "tags": [
          "supplier"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "Supplier_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update supplier. ",
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplierInvoice": {
      "get": {
        "description": "",
        "operationId": "SupplierInvoice_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "invoiceDateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "invoiceDateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "invoiceNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "kid",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "voucherId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "supplierId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find supplierInvoices corresponding with sent data.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/:addRecipient": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceAddRecipient_addRecipientToMany",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "invoiceIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "comment",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add recipient.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/:approve": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceApprove_approveMany",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "invoiceIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "comment",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Approve supplier invoices.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/:reject": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceReject_rejectMany",
        "parameters": [
          {
            "in": "query",
            "name": "comment",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "invoiceIds",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "reject supplier invoices.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/forApproval": {
      "get": {
        "description": "",
        "operationId": "SupplierInvoiceForApproval_getApprovalInvoices",
        "parameters": [
          {
            "description": "Search for department, employee, project and more",
            "in": "query",
            "name": "searchText",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Show all or just your own",
            "in": "query",
            "name": "showAll",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Default is logged in employee",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get supplierInvoices for approval",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/voucher/{id}/postings": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "SupplierInvoiceVoucherPostings_putPostings",
        "parameters": [
          {
            "description": "Voucher id",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Postings",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderLinePostingDTO"
              },
              "type": "array"
            }
          },
          {
            "default": false,
            "description": "Equals",
            "in": "query",
            "name": "sendToLedger",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If set, the date of the voucher and the supplier invoice will be changed to this date. If empty, date will not be changed",
            "in": "query",
            "name": "voucherDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Put debit postings.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{id}": {
      "get": {
        "description": "",
        "operationId": "SupplierInvoice_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get supplierInvoice by ID.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:addPayment": {
      "post": {
        "description": "",
        "operationId": "SupplierInvoiceAddPayment_addPayment",
        "parameters": [
          {
            "description": "Invoice ID.",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "paymentType",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "amount",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "kidOrReceiverReference",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "bban",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "paymentDate",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "Set paymentType to last type for vendor, autopay, nets or first available other type",
            "in": "query",
            "name": "useDefaultPaymentType",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "Set to true to allow multiple payments registered.",
            "in": "query",
            "name": "partialPayment",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Register payment, paymentType == 0 finds the last paymentType for this vendor",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:addRecipient": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceAddRecipient_addRecipient",
        "parameters": [
          {
            "description": "Invoice ID.",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the elements",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "comment",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add recipient to supplier invoices.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:approve": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceApprove_approve",
        "parameters": [
          {
            "description": "ID of the elements",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "comment",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Approve supplier invoice.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:changeDimension": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceChangeDimension_changeDimensionMany",
        "parameters": [
          {
            "description": "Invoice ID.",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "debitPostingIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "Dimension",
            "enum": [
              "PROJECT",
              "DEPARTMENT",
              "EMPLOYEE",
              "PRODUCT"
            ],
            "in": "query",
            "name": "dimension",
            "required": true,
            "type": "string"
          },
          {
            "description": "DimensionID",
            "format": "int32",
            "in": "query",
            "name": "dimensionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Change dimension on a supplier invoice.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/:reject": {
      "put": {
        "description": "",
        "operationId": "SupplierInvoiceReject_reject",
        "parameters": [
          {
            "description": "Invoice ID.",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "comment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplierInvoice"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "reject supplier invoice.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/supplierInvoice/{invoiceId}/pdf": {
      "get": {
        "description": "",
        "operationId": "SupplierInvoicePdf_downloadPdf",
        "parameters": [
          {
            "description": "Invoice ID from which document is downloaded.",
            "format": "int32",
            "in": "path",
            "name": "invoiceId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get supplierInvoice document by invoice ID.",
        "tags": [
          "supplierInvoice"
        ]
      }
    },
    "/timesheet/allocated": {
      "get": {
        "description": "",
        "operationId": "TimesheetAllocated_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "activityIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find allocated hour entries corresponding with sent data.",
        "tags": [
          "timesheet/allocated"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetAllocated_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetAllocated"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new allocated hour entry. Only one entry per employee/date/activity/project combination is supported. Only holiday/vacation hours can receive comments. A notification will be sent to the entry's employee if the entry has a comment.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/allocated/:approveList": {
      "put": {
        "description": "",
        "operationId": "TimesheetAllocatedApproveList_approveList",
        "parameters": [
          {
            "description": "List of allocated hour entry IDs.",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Comment to be added to all approved hour entries.",
            "in": "query",
            "name": "managerComment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry/entries as approved. The hours will be copied to the time sheet. Notifications will be sent to the entries' employees if the entries' approval statuses or comments have changed. If IDs are provided, the other args are ignored.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/allocated/:unapproveList": {
      "put": {
        "description": "",
        "operationId": "TimesheetAllocatedUnapproveList_unapproveList",
        "parameters": [
          {
            "description": "List of allocated hour entry IDs.",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Comment to be added to all unapproved hour entries.",
            "in": "query",
            "name": "managerComment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry/entries as unapproved. Notifications will be sent to the entries' employees if the entries' approval statuses or comments have changed. If IDs are provided, the other args are ignored.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/allocated/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetAllocatedList_postList",
        "parameters": [
          {
            "description": "JSON representing a list of new objects to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/TimesheetAllocated"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new allocated hour entry. Multiple objects for several users can be sent in the same request. Only holiday/vacation hours can receive comments. Notifications will be sent to the entries' employees if the entries have comments.",
        "tags": [
          "timesheet/allocated"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetAllocatedList_putList",
        "parameters": [
          {
            "description": "List of allocated hour entry objects to update. Should have ID set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/TimesheetAllocated"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update allocated hour entry. Multiple objects for different users can be sent in the same request. Note: Allocated hour entry object fields which are present but not set, or set to 0, will be nulled. Only holiday/vacation hours can receive comments. Notifications will be sent to the entries' employees if the entries' comments have changed.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/allocated/{id}": {
      "delete": {
        "description": "",
        "operationId": "TimesheetAllocated_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Number of current version",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete allocated hour entry by ID.",
        "tags": [
          "timesheet/allocated"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TimesheetAllocated_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find allocated hour entry by ID.",
        "tags": [
          "timesheet/allocated"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetAllocated_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetAllocated"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update allocated hour entry by ID. Note: Allocated hour entry object fields which are present but not set, or set to 0, will be nulled. Only holiday/vacation hours can receive comments. A notification will be sent to the entry's employee if the entry's comment has changed.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/allocated/{id}/:approve": {
      "put": {
        "description": "",
        "operationId": "TimesheetAllocatedApprove_approve",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment to be added to the approved hour entry.",
            "in": "query",
            "name": "managerComment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry as approved. The hours will be copied to the time sheet. A notification will be sent to the entry's employee if the entry's approval status or comment has changed.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/allocated/{id}/:unapprove": {
      "put": {
        "description": "",
        "operationId": "TimesheetAllocatedUnapprove_unapprove",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comment to be added to the unapproved hour entry.",
            "in": "query",
            "name": "managerComment",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetAllocated"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Only for allocated hours on the company's internal holiday/vacation activity. Mark the allocated hour entry as unapproved. A notification will be sent to the entry's employee if the entry's approval status or comment has changed.",
        "tags": [
          "timesheet/allocated"
        ]
      }
    },
    "/timesheet/companyHoliday": {
      "get": {
        "description": "",
        "operationId": "TimesheetCompanyHoliday_search",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "A year `2020` for instance",
            "in": "query",
            "name": "years",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHolidays"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Search for company holidays by id or year.",
        "tags": [
          "timesheet/companyHoliday"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetCompanyHoliday_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHolidays"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHolidays"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create a company holiday",
        "tags": [
          "timesheet/companyHoliday"
        ]
      }
    },
    "/timesheet/companyHoliday/{id}": {
      "delete": {
        "description": "",
        "operationId": "TimesheetCompanyHoliday_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete a company holiday",
        "tags": [
          "timesheet/companyHoliday"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TimesheetCompanyHoliday_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHolidays"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get company holiday by its ID",
        "tags": [
          "timesheet/companyHoliday"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetCompanyHoliday_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CompanyHolidays"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHolidays"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a company holiday",
        "tags": [
          "timesheet/companyHoliday"
        ]
      }
    },
    "/timesheet/entry": {
      "get": {
        "description": "",
        "operationId": "TimesheetEntry_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "activityId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": true,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "comment",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimesheetEntrySearchResponse"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find timesheet entry corresponding with sent data.",
        "tags": [
          "timesheet/entry"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetEntry_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
        "tags": [
          "timesheet/entry"
        ]
      }
    },
    "/timesheet/entry/>recentActivities": {
      "get": {
        "description": "",
        "operationId": "TimesheetEntryRecentActivities_getRecentActivities",
        "parameters": [
          {
            "description": "ID of employee to find activities for. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ID of project to find activities for",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find recently used timesheet activities.",
        "tags": [
          "timesheet/entry"
        ]
      }
    },
    "/timesheet/entry/>recentProjects": {
      "get": {
        "description": "",
        "operationId": "TimesheetEntryRecentProjects_getRecentProjects",
        "parameters": [
          {
            "description": "ID of employee with recent project hours Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find projects with recent activities (timesheet entry registered).",
        "tags": [
          "timesheet/entry"
        ]
      }
    },
    "/timesheet/entry/>totalHours": {
      "get": {
        "description": "",
        "operationId": "TimesheetEntryTotalHours_getTotalHours",
        "parameters": [
          {
            "description": "ID of employee to find hours for. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBigDecimal"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find total hours registered on an employee in a specific period.",
        "tags": [
          "timesheet/entry"
        ]
      }
    },
    "/timesheet/entry/list": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetEntryList_postList",
        "parameters": [
          {
            "description": "List of timesheet entry objects",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
        "tags": [
          "timesheet/entry"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetEntryList_putList",
        "parameters": [
          {
            "description": "List of timesheet entry objects to update",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
        "tags": [
          "timesheet/entry"
        ]
      }
    },
    "/timesheet/entry/{id}": {
      "delete": {
        "description": "",
        "operationId": "TimesheetEntry_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Number of current version",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete timesheet entry by ID.",
        "tags": [
          "timesheet/entry"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TimesheetEntry_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find timesheet entry by ID.",
        "tags": [
          "timesheet/entry"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetEntry_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
        "tags": [
          "timesheet/entry"
        ]
      }
    },
    "/timesheet/month/:approve": {
      "put": {
        "description": "",
        "operationId": "TimesheetMonthApprove_approve",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "2020-01",
            "in": "query",
            "name": "monthYear",
            "required": false,
            "type": "string"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.. Defaults to end of month",
            "in": "query",
            "name": "approvedUntilDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "approve month(s).  If id is provided the other args are ignored",
        "tags": [
          "timesheet/month"
        ]
      }
    },
    "/timesheet/month/:complete": {
      "put": {
        "description": "",
        "operationId": "TimesheetMonthComplete_complete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "2020-01",
            "in": "query",
            "name": "monthYear",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "complete month(s).  If id is provided the other args are ignored",
        "tags": [
          "timesheet/month"
        ]
      }
    },
    "/timesheet/month/:reopen": {
      "put": {
        "description": "",
        "operationId": "TimesheetMonthReopen_reopen",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "2020-01",
            "in": "query",
            "name": "monthYear",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "reopen month(s).  If id is provided the other args are ignored",
        "tags": [
          "timesheet/month"
        ]
      }
    },
    "/timesheet/month/:unapprove": {
      "put": {
        "description": "",
        "operationId": "TimesheetMonthUnapprove_unapprove",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "2020-01",
            "in": "query",
            "name": "monthYear",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "unapprove month(s).  If id is provided the other args are ignored",
        "tags": [
          "timesheet/month"
        ]
      }
    },
    "/timesheet/month/byMonthNumber": {
      "get": {
        "description": "",
        "operationId": "TimesheetMonthByMonthNumber_getByMonthNumber",
        "parameters": [
          {
            "description": "List of IDs. Defaults to ID of token owner.",
            "in": "query",
            "name": "employeeIds",
            "required": true,
            "type": "string"
          },
          {
            "description": "2020-01",
            "in": "query",
            "name": "monthYear",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find monthly status for given month.",
        "tags": [
          "timesheet/month"
        ]
      }
    },
    "/timesheet/month/{id}": {
      "get": {
        "description": "",
        "operationId": "TimesheetMonth_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMonthlyStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find monthly status entry by ID.",
        "tags": [
          "timesheet/month"
        ]
      }
    },
    "/timesheet/salaryProjectTypeSpecification": {
      "get": {
        "description": "",
        "operationId": "TimesheetSalaryProjectTypeSpecification_search",
        "parameters": [
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetProjectSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get list of timesheet ProjectSalaryType Specifications (PILOT USERS ONLY)",
        "tags": [
          "timesheet/salaryProjectTypeSpecification"
        ]
      },
      "post": {
        "description": "",
        "operationId": "TimesheetSalaryProjectTypeSpecification_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetProjectSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetProjectSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create a timesheet ProjectSalaryType Specification. (PILOT USERS ONLY)",
        "tags": [
          "timesheet/salaryProjectTypeSpecification"
        ]
      }
    },
    "/timesheet/salaryProjectTypeSpecification/{id}": {
      "delete": {
        "description": "",
        "operationId": "TimesheetSalaryProjectTypeSpecification_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete a timesheet SalaryType Specification (PILOT USERS ONLY)",
        "tags": [
          "timesheet/salaryProjectTypeSpecification"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TimesheetSalaryProjectTypeSpecification_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetProjectSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get timesheet ProjectSalaryType Specification for a specific ID (PILOT USERS ONLY)",
        "tags": [
          "timesheet/salaryProjectTypeSpecification"
        ]
      },
      "put": {
        "description": "",
        "operationId": "TimesheetSalaryProjectTypeSpecification_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetProjectSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetProjectSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a timesheet ProjectSalaryType Specification (PILOT USERS ONLY)",
        "tags": [
          "timesheet/salaryProjectTypeSpecification"
        ]
      }
    },
    "/timesheet/salaryTypeSpecification": {
      "get": {
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_search",
        "parameters": [
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get list of timesheet SalaryType Specifications",
        "tags": [
          "timesheet/salaryTypeSpecification"
        ]
      },
      "post": {
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Create a timesheet SalaryType Specification. Only one entry per employee/date/SalaryType",
        "tags": [
          "timesheet/salaryTypeSpecification"
        ]
      }
    },
    "/timesheet/salaryTypeSpecification/{id}": {
      "delete": {
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Delete a timesheet SalaryType Specification",
        "tags": [
          "timesheet/salaryTypeSpecification"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get timesheet SalaryType Specification for a specific ID",
        "tags": [
          "timesheet/salaryTypeSpecification"
        ]
      },
      "put": {
        "description": "",
        "operationId": "TimesheetSalaryTypeSpecification_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimesheetSalaryTypeSpecification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSalaryTypeSpecification"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Update a timesheet SalaryType Specification",
        "tags": [
          "timesheet/salaryTypeSpecification"
        ]
      }
    },
    "/timesheet/settings": {
      "get": {
        "description": "",
        "operationId": "TimesheetSettings_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Get timesheet settings of logged in company.",
        "tags": [
          "timesheet/settings"
        ]
      }
    },
    "/timesheet/timeClock": {
      "get": {
        "description": "",
        "operationId": "TimesheetTimeClock_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "activityId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "hourId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isRunning",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find time clock entries corresponding with sent data.",
        "tags": [
          "timesheet/timeClock"
        ]
      }
    },
    "/timesheet/timeClock/:start": {
      "put": {
        "description": "",
        "operationId": "TimesheetTimeClockStart_start",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Project ID",
            "format": "int32",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Activity ID",
            "format": "int32",
            "in": "query",
            "name": "activityId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional. Default is today’s date",
            "in": "query",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "minimum": 0,
            "name": "lunchBreakDuration",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Start time clock.",
        "tags": [
          "timesheet/timeClock"
        ]
      }
    },
    "/timesheet/timeClock/present": {
      "get": {
        "description": "",
        "operationId": "TimesheetTimeClockPresent_getPresent",
        "parameters": [
          {
            "description": "Employee ID. Defaults to ID of token owner.",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find a user’s present running time clock.",
        "tags": [
          "timesheet/timeClock"
        ]
      }
    },
    "/timesheet/timeClock/{id}": {
      "get": {
        "description": "",
        "operationId": "TimesheetTimeClock_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find time clock entry by ID.",
        "tags": [
          "timesheet/timeClock"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TimesheetTimeClock_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TimeClock"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update time clock by ID.",
        "tags": [
          "timesheet/timeClock"
        ]
      }
    },
    "/timesheet/timeClock/{id}/:stop": {
      "put": {
        "description": "",
        "operationId": "TimesheetTimeClockStop_stop",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Number of current version",
            "format": "int32",
            "in": "query",
            "name": "version",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Stop time clock.",
        "tags": [
          "timesheet/timeClock"
        ]
      }
    },
    "/timesheet/week": {
      "get": {
        "description": "",
        "operationId": "TimesheetWeek_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "employeeIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "ISO-8601 week-year",
            "in": "query",
            "name": "weekYear",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "approvedBy",
            "required": false,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find weekly status By ID, week/year combination, employeeId. or an approver",
        "tags": [
          "timesheet/week"
        ]
      }
    },
    "/timesheet/week/:approve": {
      "put": {
        "description": "",
        "operationId": "TimesheetWeekApprove_approve",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ISO-8601 week-year",
            "in": "query",
            "name": "weekYear",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Approve week. By ID or (ISO-8601 week and employeeId combination).",
        "tags": [
          "timesheet/week"
        ]
      }
    },
    "/timesheet/week/:complete": {
      "put": {
        "description": "",
        "operationId": "TimesheetWeekComplete_complete",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ISO-8601 week-year",
            "in": "query",
            "name": "weekYear",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Complete week. By ID or (ISO-8601 week and employeeId combination).",
        "tags": [
          "timesheet/week"
        ]
      }
    },
    "/timesheet/week/:reopen": {
      "put": {
        "description": "",
        "operationId": "TimesheetWeekReopen_reopen",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ISO-8601 week-year",
            "in": "query",
            "name": "weekYear",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Reopen week. By ID or (ISO-8601 week and employeeId combination).",
        "tags": [
          "timesheet/week"
        ]
      }
    },
    "/timesheet/week/:unapprove": {
      "put": {
        "description": "",
        "operationId": "TimesheetWeekUnapprove_unapprove",
        "parameters": [
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "ISO-8601 week-year",
            "in": "query",
            "name": "weekYear",
            "required": false,
            "type": "string",
            "x-example": "2018-12"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperWeek"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Unapprove week. By ID or (ISO-8601 week and employeeId combination).",
        "tags": [
          "timesheet/week"
        ]
      }
    },
    "/token/consumer/byToken": {
      "get": {
        "description": "",
        "operationId": "TokenConsumerByToken_getByToken",
        "parameters": [
          {
            "description": "Element ID",
            "in": "query",
            "name": "token",
            "required": true,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperConsumerToken"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get consumer token by token string.",
        "tags": [
          "token/consumer"
        ]
      }
    },
    "/token/employee/:create": {
      "put": {
        "description": "",
        "operationId": "TokenEmployeeCreate_create",
        "parameters": [
          {
            "description": "A user defined name for the new token",
            "in": "query",
            "name": "tokenName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the consumer",
            "in": "query",
            "name": "consumerName",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the employee",
            "format": "int32",
            "in": "query",
            "name": "employeeId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Is the key company owned",
            "in": "query",
            "name": "companyOwned",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Expiration date for the employeeToken",
            "in": "query",
            "name": "expirationDate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeToken"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create an employee token. Only selected consumers are allowed",
        "tags": [
          "token/employee"
        ]
      }
    },
    "/token/session/:create": {
      "put": {
        "description": "",
        "operationId": "TokenSessionCreate_create",
        "parameters": [
          {
            "description": "Token of the API consumer",
            "in": "query",
            "name": "consumerToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "The employee's token",
            "in": "query",
            "name": "employeeToken",
            "required": true,
            "type": "string"
          },
          {
            "description": "Expiration date for the combined token",
            "in": "query",
            "name": "expirationDate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSessionToken"
            }
          }
        },
        "summary": "Create session token.",
        "tags": [
          "token/session"
        ]
      }
    },
    "/token/session/>whoAmI": {
      "get": {
        "description": "",
        "operationId": "TokenSessionWhoAmI_whoAmI",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLoggedInUserInfoDTO"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find information about the current user.",
        "tags": [
          "token/session"
        ]
      }
    },
    "/token/session/{token}": {
      "delete": {
        "description": "",
        "operationId": "TokenSession_delete",
        "parameters": [
          {
            "description": "The login token string to delete",
            "in": "path",
            "name": "token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete session token.",
        "tags": [
          "token/session"
        ]
      }
    },
    "/transportType": {
      "get": {
        "description": "",
        "operationId": "TransportType_search",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "List of valid suppliers ids.",
            "in": "query",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "name": "supplierId",
            "required": false,
            "type": "array"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTransportType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Search transport type.",
        "tags": [
          "transportType"
        ]
      }
    },
    "/transportType/{id}": {
      "get": {
        "description": "",
        "operationId": "TransportType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTransportType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " [BETA] Find transport type by ID.",
        "tags": [
          "transportType"
        ]
      }
    },
    "/travelExpense": {
      "get": {
        "description": "",
        "operationId": "TravelExpense_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "employeeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "departmentId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "projectId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "projectManagerId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "departureDateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "returnDateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": "ALL",
            "description": "category",
            "enum": [
              "ALL",
              "OPEN",
              "APPROVED",
              "SALARY_PAID",
              "DELIVERED",
              "REJECTED"
            ],
            "in": "query",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find travel expenses corresponding with sent data.",
        "tags": [
          "travelExpense"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpense_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create travel expense.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/:approve": {
      "put": {
        "description": "",
        "operationId": "TravelExpenseApprove_approve",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Approve travel expenses.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/:copy": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseCopy_copy",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Copy travel expense.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/:createVouchers": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseCreateVouchers_createVouchers",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "yyyy-MM-dd. Defaults to today.",
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create vouchers",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/:deliver": {
      "put": {
        "description": "",
        "operationId": "TravelExpenseDeliver_deliver",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Deliver travel expenses.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/:unapprove": {
      "put": {
        "description": "",
        "operationId": "TravelExpenseUnapprove_unapprove",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Unapprove travel expenses.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/:undeliver": {
      "put": {
        "description": "",
        "operationId": "TravelExpenseUndeliver_undeliver",
        "parameters": [
          {
            "description": "ID of the elements",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Undeliver travel expenses.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/accommodationAllowance": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "travelExpenseId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "rateTypeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "rateCategoryId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "rateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "rateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "countFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "countTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "amountFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "amountTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "location",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "address",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find accommodation allowances corresponding with sent data.",
        "tags": [
          "travelExpense/accommodationAllowance"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create accommodation allowance.",
        "tags": [
          "travelExpense/accommodationAllowance"
        ]
      }
    },
    "/travelExpense/accommodationAllowance/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete accommodation allowance.",
        "tags": [
          "travelExpense/accommodationAllowance"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel accommodation allowance by ID.",
        "tags": [
          "travelExpense/accommodationAllowance"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseAccommodationAllowance_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update accommodation allowance.",
        "tags": [
          "travelExpense/accommodationAllowance"
        ]
      }
    },
    "/travelExpense/cost": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseCost_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "travelExpenseId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "vatTypeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "currencyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "rateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "rateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "countFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "countTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "amountFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "amountTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "location",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "address",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find costs corresponding with sent data.",
        "tags": [
          "travelExpense/cost"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseCost_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create cost.",
        "tags": [
          "travelExpense/cost"
        ]
      }
    },
    "/travelExpense/cost/list": {
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseCostList_putList",
        "parameters": [
          {
            "description": "JSON representing updates to objects. Should have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/Cost"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update costs.",
        "tags": [
          "travelExpense/cost"
        ]
      }
    },
    "/travelExpense/cost/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpenseCost_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete cost.",
        "tags": [
          "travelExpense/cost"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpenseCost_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get cost by ID.",
        "tags": [
          "travelExpense/cost"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseCost_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update cost.",
        "tags": [
          "travelExpense/cost"
        ]
      }
    },
    "/travelExpense/costCategory": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseCostCategory_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "showOnEmployeeExpenses",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelCostCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find cost category corresponding with sent data.",
        "tags": [
          "travelExpense/costCategory"
        ]
      }
    },
    "/travelExpense/costCategory/{id}": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseCostCategory_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelCostCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get cost category by ID.",
        "tags": [
          "travelExpense/costCategory"
        ]
      }
    },
    "/travelExpense/drivingStop": {
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseDrivingStop_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DrivingStop"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDrivingStop"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create mileage allowance driving stop.",
        "tags": [
          "travelExpense/drivingStop"
        ]
      }
    },
    "/travelExpense/drivingStop/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpenseDrivingStop_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete mileage allowance stops.",
        "tags": [
          "travelExpense/drivingStop"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpenseDrivingStop_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDrivingStop"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get driving stop by ID.",
        "tags": [
          "travelExpense/drivingStop"
        ]
      }
    },
    "/travelExpense/mileageAllowance": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "travelExpenseId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "rateTypeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "rateCategoryId",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "kmFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "kmTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "rateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "rateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "amountFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "amountTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "departureLocation",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "destination",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isCompanyCar",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find mileage allowances corresponding with sent data.",
        "tags": [
          "travelExpense/mileageAllowance"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create mileage allowance.",
        "tags": [
          "travelExpense/mileageAllowance"
        ]
      }
    },
    "/travelExpense/mileageAllowance/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete mileage allowance.",
        "tags": [
          "travelExpense/mileageAllowance"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get mileage allowance by ID.",
        "tags": [
          "travelExpense/mileageAllowance"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpenseMileageAllowance_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update mileage allowance.",
        "tags": [
          "travelExpense/mileageAllowance"
        ]
      }
    },
    "/travelExpense/passenger": {
      "get": {
        "description": "",
        "operationId": "TravelExpensePassenger_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "mileageAllowance",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find passengers corresponding with sent data.",
        "tags": [
          "travelExpense/passenger"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpensePassenger_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create passenger.",
        "tags": [
          "travelExpense/passenger"
        ]
      }
    },
    "/travelExpense/passenger/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpensePassenger_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete passenger.",
        "tags": [
          "travelExpense/passenger"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpensePassenger_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get passenger by ID.",
        "tags": [
          "travelExpense/passenger"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpensePassenger_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update passenger.",
        "tags": [
          "travelExpense/passenger"
        ]
      }
    },
    "/travelExpense/paymentType": {
      "get": {
        "description": "",
        "operationId": "TravelExpensePaymentType_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "description",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isInactive",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "showOnEmployeeExpenses",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find payment type corresponding with sent data.",
        "tags": [
          "travelExpense/paymentType"
        ]
      }
    },
    "/travelExpense/paymentType/{id}": {
      "get": {
        "description": "",
        "operationId": "TravelExpensePaymentType_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelPaymentType"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get payment type by ID.",
        "tags": [
          "travelExpense/paymentType"
        ]
      }
    },
    "/travelExpense/perDiemCompensation": {
      "get": {
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "travelExpenseId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "rateTypeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "rateCategoryId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "NONE",
              "HOTEL",
              "BOARDING_HOUSE_WITHOUT_COOKING",
              "BOARDING_HOUSE_WITH_COOKING"
            ],
            "in": "query",
            "name": "overnightAccommodation",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "format": "int32",
            "in": "query",
            "name": "countFrom",
            "required": false,
            "type": "integer"
          },
          {
            "description": "To and excluding",
            "format": "int32",
            "in": "query",
            "name": "countTo",
            "required": false,
            "type": "integer"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "rateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "rateTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "amountFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "amountTo",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "location",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "address",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isDeductionForBreakfast",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isLunchDeduction",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isDinnerDeduction",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find per diem compensations corresponding with sent data.",
        "tags": [
          "travelExpense/perDiemCompensation"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Create per diem compensation.",
        "tags": [
          "travelExpense/perDiemCompensation"
        ]
      }
    },
    "/travelExpense/perDiemCompensation/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete per diem compensation.",
        "tags": [
          "travelExpense/perDiemCompensation"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get per diem compensation by ID.",
        "tags": [
          "travelExpense/perDiemCompensation"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpensePerDiemCompensation_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update per diem compensation.",
        "tags": [
          "travelExpense/perDiemCompensation"
        ]
      }
    },
    "/travelExpense/rate": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseRate_search",
        "parameters": [
          {
            "description": "Equals",
            "in": "query",
            "name": "rateCategoryId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidDayTrip",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidAccommodation",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidDomestic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidForeignTravel",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "requiresZone",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "requiresOvernightAccommodation",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find rates corresponding with sent data.",
        "tags": [
          "travelExpense/rate"
        ]
      }
    },
    "/travelExpense/rate/{id}": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseRate_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRate"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel expense rate by ID.",
        "tags": [
          "travelExpense/rate"
        ]
      }
    },
    "/travelExpense/rateCategory": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseRateCategory_search",
        "parameters": [
          {
            "description": "Equals",
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "format": "int32",
            "in": "query",
            "name": "travelReportRateCategoryGroupId",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Containing",
            "in": "query",
            "name": "ameldingWageCode",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "wageCodeNumber",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidDayTrip",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidAccommodation",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isValidDomestic",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "requiresZone",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isRequiresOvernightAccommodation",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find rate categories corresponding with sent data.",
        "tags": [
          "travelExpense/rateCategory"
        ]
      }
    },
    "/travelExpense/rateCategory/{id}": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseRateCategory_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategory"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel expense rate category by ID.",
        "tags": [
          "travelExpense/rateCategory"
        ]
      }
    },
    "/travelExpense/rateCategoryGroup": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseRateCategoryGroup_search",
        "parameters": [
          {
            "description": "Containing",
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isForeignTravel",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "From and including",
            "in": "query",
            "name": "dateFrom",
            "required": false,
            "type": "string"
          },
          {
            "description": "To and excluding",
            "in": "query",
            "name": "dateTo",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategoryGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find rate categoriy groups corresponding with sent data.",
        "tags": [
          "travelExpense/rateCategoryGroup"
        ]
      }
    },
    "/travelExpense/rateCategoryGroup/{id}": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseRateCategoryGroup_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategoryGroup"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel report rate category group by ID.",
        "tags": [
          "travelExpense/rateCategoryGroup"
        ]
      }
    },
    "/travelExpense/settings": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseSettings_get",
        "parameters": [
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseSettings"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel expense settings of logged in company.",
        "tags": [
          "travelExpense/settings"
        ]
      }
    },
    "/travelExpense/zone": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseZone_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "id",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "in": "query",
            "name": "isDisabled",
            "required": false,
            "type": "boolean"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseZone"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find travel expense zones corresponding with sent data.",
        "tags": [
          "travelExpensezone"
        ]
      }
    },
    "/travelExpense/zone/{id}": {
      "get": {
        "description": "",
        "operationId": "TravelExpenseZone_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseZone"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel expense zone by ID.",
        "tags": [
          "travelExpensezone"
        ]
      }
    },
    "/travelExpense/{id}": {
      "delete": {
        "description": "",
        "operationId": "TravelExpense_delete",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete travel expense.",
        "tags": [
          "travelExpense"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpense_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get travel expense by ID.",
        "tags": [
          "travelExpense"
        ]
      },
      "put": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "TravelExpense_put",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Partial object describing what should be updated",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Update travel expense.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment": {
      "delete": {
        "description": "",
        "operationId": "TravelExpenseAttachment_deleteAttachment",
        "parameters": [
          {
            "description": "ID of attachment containing the attachment to delete.",
            "format": "int32",
            "in": "path",
            "name": "travelExpenseId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version of voucher containing the attachment to delete.",
            "format": "int32",
            "in": "query",
            "minimum": 0,
            "name": "version",
            "required": false,
            "type": "integer"
          },
          {
            "default": false,
            "description": "Should the attachment be sent to inbox rather than deleted?",
            "in": "query",
            "name": "sendToInbox",
            "required": false,
            "type": "boolean"
          },
          {
            "default": false,
            "description": "If sendToInbox is true, should the attachment be split into one voucher per page?",
            "in": "query",
            "name": "split",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Delete attachment.",
        "tags": [
          "travelExpense"
        ]
      },
      "get": {
        "description": "",
        "operationId": "TravelExpenseAttachment_downloadAttachment",
        "parameters": [
          {
            "description": "Travel Expense ID from which PDF is downloaded.",
            "format": "int32",
            "in": "path",
            "name": "travelExpenseId",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "format": "byte",
              "type": "string"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get attachment by travel expense ID.",
        "tags": [
          "travelExpense"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "TravelExpenseAttachment_uploadAttachment",
        "parameters": [
          {
            "description": "Travel Expense ID to upload attachment to.",
            "format": "int32",
            "in": "path",
            "name": "travelExpenseId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The file",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "default": false,
            "description": "Create new cost row when you add the attachment",
            "in": "query",
            "name": "createNewCost",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload attachment to travel expense.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/travelExpense/{travelExpenseId}/attachment/list": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "",
        "operationId": "TravelExpenseAttachmentList_uploadAttachments",
        "parameters": [
          {
            "description": "Travel Expense ID to upload attachment to.",
            "format": "int32",
            "in": "path",
            "name": "travelExpenseId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Multipart files",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FormDataMultiPart"
            }
          },
          {
            "default": false,
            "description": "Create new cost row when you add the attachment",
            "in": "query",
            "name": "createNewCost",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Upload multiple attachments to travel expense.",
        "tags": [
          "travelExpense"
        ]
      }
    },
    "/vatReturns/comment": {
      "get": {
        "description": "",
        "operationId": "VatReturnsComment_query",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVatReturnsVatCodeComment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] - Get all structured comments related to a given vatCode",
        "tags": [
          "vatReturnscomment"
        ]
      }
    },
    "/vatReturns/comment/>all": {
      "get": {
        "description": "",
        "operationId": "VatReturnsCommentAll_all",
        "parameters": [
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVatReturnsComment"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] - Get all structured comments available",
        "tags": [
          "vatReturnscomment"
        ]
      }
    },
    "/voucherApprovalListElement/{id}": {
      "get": {
        "description": "",
        "operationId": "VoucherApprovalListElement_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherApprovalListElement"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get by ID.",
        "tags": [
          "voucherApprovalListElement"
        ]
      }
    },
    "/voucherMessage": {
      "get": {
        "description": "",
        "operationId": "VoucherMessage_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "voucherIds",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherMessage"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Find voucherMessage (or a comment) put on a voucher by inputting voucher ids",
        "tags": [
          "voucherMessage"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "VoucherMessage_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VoucherMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherMessage"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "[BETA] Post new voucherMessage.",
        "tags": [
          "voucherMessage"
        ]
      }
    },
    "/voucherStatus": {
      "get": {
        "description": "",
        "operationId": "VoucherStatus_search",
        "parameters": [
          {
            "description": "List of IDs",
            "in": "query",
            "name": "ids",
            "required": false,
            "type": "string"
          },
          {
            "description": "List of IDs",
            "in": "query",
            "name": "voucherIds",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "WAITING",
              "DONE",
              "SKIPPED",
              "ERROR",
              "NONE",
              "PROCESSING",
              "RECLAIMED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "Equals",
            "enum": [
              "TRIPLETEX",
              "SUPPLIERINVOICE_EXTERNAL",
              "DEBT_COLLECTION"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "From index",
            "in": "query",
            "name": "from",
            "required": false,
            "type": "integer"
          },
          {
            "default": 1000,
            "description": "Number of elements to return",
            "in": "query",
            "name": "count",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Sorting pattern",
            "in": "query",
            "name": "sorting",
            "required": false,
            "type": "string"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Find voucherStatus corresponding with sent data. The voucherStatus is used to coordinate integration processes. Requires setup done by Tripletex, currently supports debt collection.",
        "tags": [
          "voucherStatus"
        ]
      },
      "post": {
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "description": "",
        "operationId": "VoucherStatus_post",
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VoucherStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Post new voucherStatus.",
        "tags": [
          "voucherStatus"
        ]
      }
    },
    "/voucherStatus/{id}": {
      "get": {
        "description": "",
        "operationId": "VoucherStatus_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherStatus"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": "Get voucherStatus by ID.",
        "tags": [
          "voucherStatus"
        ]
      }
    },
    "/yearEnd/note/{id}": {
      "get": {
        "description": "",
        "operationId": "YearEndNote_get",
        "parameters": [
          {
            "description": "Element ID",
            "format": "int32",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Fields filter pattern",
            "in": "query",
            "name": "fields",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperYearEndReportNote"
            }
          }
        },
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "summary": " ",
        "tags": [
          "yearEnd/note"
        ]
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "tokenAuthScheme": {
      "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
      "type": "basic"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "activity"
    },
    {
      "name": "addon"
    },
    {
      "name": "deliveryAddress"
    },
    {
      "name": "address"
    },
    {
      "name": "internalautoPayIncomingFileSimulator"
    },
    {
      "name": "internalscheduling"
    },
    {
      "name": "internalsystemMessage"
    },
    {
      "name": "altinninstance"
    },
    {
      "name": "integrationfactoringaprila"
    },
    {
      "name": "asset"
    },
    {
      "name": "internalauth"
    },
    {
      "name": "auth/internal"
    },
    {
      "name": "balanceSheet"
    },
    {
      "name": "balanceSheet2"
    },
    {
      "name": "bank"
    },
    {
      "name": "bankadvice"
    },
    {
      "name": "bank/advice"
    },
    {
      "name": "bankagreements"
    },
    {
      "name": "bankonboarding"
    },
    {
      "name": "bankreconciliation"
    },
    {
      "name": "bank/reconciliation"
    },
    {
      "name": "bankreconciliationfileIdsForIncomingPayments"
    },
    {
      "name": "bankreconciliationmatch"
    },
    {
      "name": "bank/reconciliation/match"
    },
    {
      "name": "bankreconciliationmatchescounter"
    },
    {
      "name": "bankreconciliationpaymentType"
    },
    {
      "name": "bank/reconciliation/paymentType"
    },
    {
      "name": "bankreconciliationsettings"
    },
    {
      "name": "bank/reconciliation/settings"
    },
    {
      "name": "banksettings"
    },
    {
      "name": "bankstatement"
    },
    {
      "name": "bank/statement"
    },
    {
      "name": "bankstatementbalanceestimation"
    },
    {
      "name": "bankstatementtransaction"
    },
    {
      "name": "bank/statement/transaction"
    },
    {
      "name": "upsaleMetric"
    },
    {
      "name": "bringCredentials"
    },
    {
      "name": "checkout"
    },
    {
      "name": "accountantClientAccess"
    },
    {
      "name": "accountantClientAccesstemplate"
    },
    {
      "name": "clientTasks"
    },
    {
      "name": "todoList"
    },
    {
      "name": "todoListComment"
    },
    {
      "name": "exceptiontest"
    },
    {
      "name": "apiConsumer"
    },
    {
      "name": "tokenconsumer"
    },
    {
      "name": "token/consumer"
    },
    {
      "name": "tokenemployee"
    },
    {
      "name": "token/employee"
    },
    {
      "name": "tokenlogin"
    },
    {
      "name": "loginconnect"
    },
    {
      "name": "tokensession"
    },
    {
      "name": "token/session"
    },
    {
      "name": "company"
    },
    {
      "name": "companysettingsaltinn"
    },
    {
      "name": "company/altinn"
    },
    {
      "name": "companybrreg"
    },
    {
      "name": "companymodules"
    },
    {
      "name": "companysalesmodules"
    },
    {
      "name": "company/salesmodules"
    },
    {
      "name": "contact"
    },
    {
      "name": "country"
    },
    {
      "name": "currency"
    },
    {
      "name": "customer"
    },
    {
      "name": "customercategory"
    },
    {
      "name": "customer/category"
    },
    {
      "name": "dashboard"
    },
    {
      "name": "department"
    },
    {
      "name": "distributionKey"
    },
    {
      "name": "division"
    },
    {
      "name": "document"
    },
    {
      "name": "documentArchive"
    },
    {
      "name": "signingEmail"
    },
    {
      "name": "employee"
    },
    {
      "name": "employeecategory"
    },
    {
      "name": "employee/category"
    },
    {
      "name": "employeeemployment"
    },
    {
      "name": "employee/employment"
    },
    {
      "name": "employeeemploymentdetails"
    },
    {
      "name": "employee/employment/details"
    },
    {
      "name": "employeeemploymentemploymentType"
    },
    {
      "name": "employee/employment/employmentType"
    },
    {
      "name": "employeeemploymentleaveOfAbsence"
    },
    {
      "name": "employee/employment/leaveOfAbsence"
    },
    {
      "name": "employeeemploymentleaveOfAbsenceType"
    },
    {
      "name": "employee/employment/leaveOfAbsenceType"
    },
    {
      "name": "employeeemploymentoccupationCode"
    },
    {
      "name": "employee/employment/occupationCode"
    },
    {
      "name": "employeeemploymentremunerationType"
    },
    {
      "name": "employee/employment/remunerationType"
    },
    {
      "name": "employeeemploymentworkingHoursScheme"
    },
    {
      "name": "employee/employment/workingHoursScheme"
    },
    {
      "name": "employeehourlyCostAndRate"
    },
    {
      "name": "employee/hourlyCostAndRate"
    },
    {
      "name": "employeelogininfo"
    },
    {
      "name": "employee/logininfo"
    },
    {
      "name": "employeenextOfKin"
    },
    {
      "name": "employee/nextOfKin"
    },
    {
      "name": "employeepreferences"
    },
    {
      "name": "employee/preferences"
    },
    {
      "name": "employeestandardTime"
    },
    {
      "name": "employee/standardTime"
    },
    {
      "name": "enhetsregisteret"
    },
    {
      "name": "employeeentitlement"
    },
    {
      "name": "employee/entitlement"
    },
    {
      "name": "event"
    },
    {
      "name": "eventexecute"
    },
    {
      "name": "eventtrigger"
    },
    {
      "name": "eventnotification"
    },
    {
      "name": "eventsubscription"
    },
    {
      "name": "event/subscription"
    },
    {
      "name": "feedback"
    },
    {
      "name": "fundingpartner"
    },
    {
      "name": "fundingpartnerqualify"
    },
    {
      "name": "idporten"
    },
    {
      "name": "idportenloginstatus"
    },
    {
      "name": "integrationautopaymessages"
    },
    {
      "name": "bankpayment"
    },
    {
      "name": "integrationlinkmobilityreport"
    },
    {
      "name": "integrationpg2callback"
    },
    {
      "name": "integrationsendgridparse"
    },
    {
      "name": "integrationsendgridevent"
    },
    {
      "name": "inventory"
    },
    {
      "name": "inventoryinventories"
    },
    {
      "name": "inventory/inventories"
    },
    {
      "name": "inventorylocation"
    },
    {
      "name": "inventory/location"
    },
    {
      "name": "inventorystocktaking"
    },
    {
      "name": "inventory/stocktaking"
    },
    {
      "name": "inventorystocktakingproductline"
    },
    {
      "name": "inventory/stocktaking/productline"
    },
    {
      "name": "invoice"
    },
    {
      "name": "invoiceRemark"
    },
    {
      "name": "integrationmaventastatus"
    },
    {
      "name": "invoicepaymentType"
    },
    {
      "name": "invoice/paymentType"
    },
    {
      "name": "invoicedetails"
    },
    {
      "name": "invoice/details"
    },
    {
      "name": "customerinvoiceSendType"
    },
    {
      "name": "invoicesettings"
    },
    {
      "name": "internalinvoiceOverview"
    },
    {
      "name": "killSwitch"
    },
    {
      "name": "ledger"
    },
    {
      "name": "ledgeraccount"
    },
    {
      "name": "ledger/account"
    },
    {
      "name": "ledgeraccountingPeriod"
    },
    {
      "name": "ledger/accountingPeriod"
    },
    {
      "name": "ledgerannualAccount"
    },
    {
      "name": "ledger/annualAccount"
    },
    {
      "name": "ledgercloseGroup"
    },
    {
      "name": "ledger/closeGroup"
    },
    {
      "name": "ledgerpaymentTypeOut"
    },
    {
      "name": "ledger/paymentTypeOut"
    },
    {
      "name": "ledgerposting"
    },
    {
      "name": "ledger/posting"
    },
    {
      "name": "ledgerpostinghistorical"
    },
    {
      "name": "ledgervatType"
    },
    {
      "name": "ledger/vatType"
    },
    {
      "name": "ledgervoucheropeningBalance"
    },
    {
      "name": "ledger/voucher/openingBalance"
    },
    {
      "name": "ledgervoucher"
    },
    {
      "name": "ledger/voucher"
    },
    {
      "name": "ledgervoucherhistorical"
    },
    {
      "name": "ledger/voucher/historical"
    },
    {
      "name": "ledgervoucherinternal"
    },
    {
      "name": "ledgervoucherType"
    },
    {
      "name": "ledger/voucherType"
    },
    {
      "name": "license"
    },
    {
      "name": "lookup"
    },
    {
      "name": "download-app"
    },
    {
      "name": "mobileapp"
    },
    {
      "name": "municipality"
    },
    {
      "name": "subscription"
    },
    {
      "name": "openid"
    },
    {
      "name": "order"
    },
    {
      "name": "orderoffer"
    },
    {
      "name": "orderorderGroup"
    },
    {
      "name": "order/orderGroup"
    },
    {
      "name": "orderorderline"
    },
    {
      "name": "order/orderline"
    },
    {
      "name": "stockoutgoing"
    },
    {
      "name": "bankpaymentWidget"
    },
    {
      "name": "pilotFeature"
    },
    {
      "name": "productexternal"
    },
    {
      "name": "product/external"
    },
    {
      "name": "product"
    },
    {
      "name": "productsupplierProduct"
    },
    {
      "name": "product/supplierProduct"
    },
    {
      "name": "productdiscountGroup"
    },
    {
      "name": "product/discountGroup"
    },
    {
      "name": "productinventoryLocation"
    },
    {
      "name": "product/inventoryLocation"
    },
    {
      "name": "productlogisticsSettings"
    },
    {
      "name": "product/logisticsSettings"
    },
    {
      "name": "productgroup"
    },
    {
      "name": "product/group"
    },
    {
      "name": "productgroupRelation"
    },
    {
      "name": "product/groupRelation"
    },
    {
      "name": "productproductPrice"
    },
    {
      "name": "product/productPrice"
    },
    {
      "name": "productsettings"
    },
    {
      "name": "productImport"
    },
    {
      "name": "productImportFields"
    },
    {
      "name": "productImportimportHeaders"
    },
    {
      "name": "productImportFieldsRelation"
    },
    {
      "name": "productunit"
    },
    {
      "name": "product/unit"
    },
    {
      "name": "productunitmaster"
    },
    {
      "name": "product/unit/master"
    },
    {
      "name": "project"
    },
    {
      "name": "project/import"
    },
    {
      "name": "projectaccess"
    },
    {
      "name": "projectcategory"
    },
    {
      "name": "project/category"
    },
    {
      "name": "projectonboarding"
    },
    {
      "name": "projectorderline"
    },
    {
      "name": "project/orderline"
    },
    {
      "name": "projectoverview"
    },
    {
      "name": "projectparticipant"
    },
    {
      "name": "project/participant"
    },
    {
      "name": "project{id}period"
    },
    {
      "name": "project/period"
    },
    {
      "name": "projectprojectActivity"
    },
    {
      "name": "project/projectActivity"
    },
    {
      "name": "projectcontrolForm"
    },
    {
      "name": "project/controlForm"
    },
    {
      "name": "projectcontrolFormType"
    },
    {
      "name": "project/controlFormType"
    },
    {
      "name": "projecthourlyRates"
    },
    {
      "name": "project/hourlyRates"
    },
    {
      "name": "projecthourlyRatesprojectSpecificRates"
    },
    {
      "name": "project/hourlyRates/projectSpecificRates"
    },
    {
      "name": "projectresourcePlanBudget"
    },
    {
      "name": "project/resourceplan"
    },
    {
      "name": "projectsettings"
    },
    {
      "name": "project/settings"
    },
    {
      "name": "projecttask"
    },
    {
      "name": "project/task"
    },
    {
      "name": "projecttemplate"
    },
    {
      "name": "project/template"
    },
    {
      "name": "crmprospect"
    },
    {
      "name": "crm/prospect"
    },
    {
      "name": "pickupPoint"
    },
    {
      "name": "purchaseOrder"
    },
    {
      "name": "purchaseOrderAddress"
    },
    {
      "name": "transportType"
    },
    {
      "name": "purchaseOrderdeviation"
    },
    {
      "name": "purchaseOrder/deviation"
    },
    {
      "name": "purchaseOrdergoodsReceipt"
    },
    {
      "name": "purchaseOrder/goodsReceipt"
    },
    {
      "name": "purchaseOrdergoodsReceiptLine"
    },
    {
      "name": "purchaseOrder/goodsReceiptLine"
    },
    {
      "name": "purchaseOrderpurchaseOrderIncomingInvoiceRelation"
    },
    {
      "name": "purchaseOrder/purchaseOrderIncomingInvoiceRelation"
    },
    {
      "name": "purchaseOrderorderline"
    },
    {
      "name": "purchaseOrder/orderline"
    },
    {
      "name": "reminder"
    },
    {
      "name": "report"
    },
    {
      "name": "reportauthorization"
    },
    {
      "name": "reportreeldomain"
    },
    {
      "name": "reportreelfunction"
    },
    {
      "name": "reportresult"
    },
    {
      "name": "reportsystem"
    },
    {
      "name": "resourceMessages"
    },
    {
      "name": "resourcePlan"
    },
    {
      "name": "internalresourcePlan2permissions"
    },
    {
      "name": "internalresourcePlan2employee"
    },
    {
      "name": "internalresourcePlan2project"
    },
    {
      "name": "internalresourcePlan2employeejob"
    },
    {
      "name": "internalresourcePlan2modaljobs"
    },
    {
      "name": "internalresourcePlan2projectjob"
    },
    {
      "name": "internalresourcePlan2totalTime"
    },
    {
      "name": "resultbudget"
    },
    {
      "name": "saft"
    },
    {
      "name": "salarytype"
    },
    {
      "name": "salary/type"
    },
    {
      "name": "tsksalaryv2employee"
    },
    {
      "name": "tsksalaryv2payment"
    },
    {
      "name": "tsksalaryv2settings"
    },
    {
      "name": "tsksalaryv2specification"
    },
    {
      "name": "tsksalaryv2specificationsupplement"
    },
    {
      "name": "tsksalaryv2transaction"
    },
    {
      "name": "tsksalaryv2travelExpense"
    },
    {
      "name": "tsksalaryv2type"
    },
    {
      "name": "tsksalaryv2voucher"
    },
    {
      "name": "salarytskinternaltaxcard"
    },
    {
      "name": "salarytskinternalphonePrefixCountry"
    },
    {
      "name": "salarytskinternalreportingCompany"
    },
    {
      "name": "salarytskinternaltaxcardcontact"
    },
    {
      "name": "salarycompilation"
    },
    {
      "name": "salary/compilation"
    },
    {
      "name": "salarypayslip"
    },
    {
      "name": "salary/payslip"
    },
    {
      "name": "salarysettings"
    },
    {
      "name": "salary/settings"
    },
    {
      "name": "salarysettingsholiday"
    },
    {
      "name": "salary/settings/holiday"
    },
    {
      "name": "salarysettingspensionScheme"
    },
    {
      "name": "salary/settings/pensionScheme"
    },
    {
      "name": "salarysettingsstandardTime"
    },
    {
      "name": "salary/settings/standardTime"
    },
    {
      "name": "salaryspecification"
    },
    {
      "name": "salarytransaction"
    },
    {
      "name": "salary/transaction"
    },
    {
      "name": "signatureCombination"
    },
    {
      "name": "snowplow"
    },
    {
      "name": "sse"
    },
    {
      "name": "storebrandonboarding"
    },
    {
      "name": "storebrandonboardingqualify"
    },
    {
      "name": "supplier"
    },
    {
      "name": "supplierInvoice"
    },
    {
      "name": "voucherApprovalListElement"
    },
    {
      "name": "supplierInvoiceAutomation"
    },
    {
      "name": "supportAccessrequestread"
    },
    {
      "name": "testaccountdata"
    },
    {
      "name": "timesheetallocated"
    },
    {
      "name": "timesheet/allocated"
    },
    {
      "name": "timesheetcompanyHoliday"
    },
    {
      "name": "timesheet/companyHoliday"
    },
    {
      "name": "timesheetentry"
    },
    {
      "name": "timesheet/entry"
    },
    {
      "name": "timesheetmonth"
    },
    {
      "name": "timesheet/month"
    },
    {
      "name": "timesheetsalaryProjectTypeSpecification"
    },
    {
      "name": "timesheet/salaryProjectTypeSpecification"
    },
    {
      "name": "timesheetsalaryTypeSpecification"
    },
    {
      "name": "timesheet/salaryTypeSpecification"
    },
    {
      "name": "timesheetsettings"
    },
    {
      "name": "timesheet/settings"
    },
    {
      "name": "timesheettimeClock"
    },
    {
      "name": "timesheet/timeClock"
    },
    {
      "name": "timesheetweek"
    },
    {
      "name": "timesheet/week"
    },
    {
      "name": "travelExpenseaccommodationAllowance"
    },
    {
      "name": "travelExpense/accommodationAllowance"
    },
    {
      "name": "travelExpensecost"
    },
    {
      "name": "travelExpense/cost"
    },
    {
      "name": "travelExpensedrivingStop"
    },
    {
      "name": "travelExpense/drivingStop"
    },
    {
      "name": "travelExpensemileageAllowance"
    },
    {
      "name": "travelExpense/mileageAllowance"
    },
    {
      "name": "travelExpensepassenger"
    },
    {
      "name": "travelExpense/passenger"
    },
    {
      "name": "travelExpenseperDiemCompensation"
    },
    {
      "name": "travelExpense/perDiemCompensation"
    },
    {
      "name": "travelExpense"
    },
    {
      "name": "travelExpenserate"
    },
    {
      "name": "travelExpense/rate"
    },
    {
      "name": "travelExpenserateCategory"
    },
    {
      "name": "travelExpense/rateCategory"
    },
    {
      "name": "travelExpenserateCategoryGroup"
    },
    {
      "name": "travelExpense/rateCategoryGroup"
    },
    {
      "name": "travelExpensecostCategory"
    },
    {
      "name": "travelExpense/costCategory"
    },
    {
      "name": "travelExpensepaymentType"
    },
    {
      "name": "travelExpense/paymentType"
    },
    {
      "name": "travelExpensesettings"
    },
    {
      "name": "travelExpense/settings"
    },
    {
      "name": "travelExpensezone"
    },
    {
      "name": "tripletexAccount"
    },
    {
      "name": "tripletexAccountcompanyModules"
    },
    {
      "name": "tripletexAccountPrices"
    },
    {
      "name": "tripletexAccountsalesForceAccountInfo"
    },
    {
      "name": "tripletexAccountsalesForceAccountantConnection"
    },
    {
      "name": "tripletexAccountsalesForceEmployeeRole"
    },
    {
      "name": "tripletexAccountsalesForceTripletexSalesModulePurchase"
    },
    {
      "name": "tripletexAccountsalesForceUser"
    },
    {
      "name": "tripletexAccountsalesForceUserOverview"
    },
    {
      "name": "tripletexAccountsalesForceCustomerStats"
    },
    {
      "name": "tripletexDashboard"
    },
    {
      "name": "tripletexDashboardbankingSummary"
    },
    {
      "name": "tripletexDashboardincomeAndCostSummary"
    },
    {
      "name": "tripletexDashboardinvoiceSummary"
    },
    {
      "name": "tripletexDashboardreminder"
    },
    {
      "name": "tripletexDashboardsalarySummary"
    },
    {
      "name": "tripletexDashboardtask"
    },
    {
      "name": "tripletexDashboardtrial"
    },
    {
      "name": "tripletexDashboardvoucherSummary"
    },
    {
      "name": "vatReturns"
    },
    {
      "name": "vatReturnsvalidateCreate"
    },
    {
      "name": "vatReturnscomment"
    },
    {
      "name": "vfFactoringOffer"
    },
    {
      "name": "vismaconnectonboard"
    },
    {
      "name": "vismaconnectwebhook"
    },
    {
      "name": "comment"
    },
    {
      "name": "voucherInboxsendToArchive"
    },
    {
      "name": "voucherInbox"
    },
    {
      "name": "voucherMessage"
    },
    {
      "name": "voucherStatus"
    },
    {
      "name": "banner"
    },
    {
      "name": "webcallout"
    },
    {
      "name": "webclient"
    },
    {
      "name": "internalfavorites"
    },
    {
      "name": "favorites/internal"
    },
    {
      "name": "internalpilotFeatureuser"
    },
    {
      "name": "internalmenu"
    },
    {
      "name": "internalnews"
    },
    {
      "name": "optionspage"
    },
    {
      "name": "internalcompany-chooser"
    },
    {
      "name": "internalprofile"
    },
    {
      "name": "internalhelpcenter"
    },
    {
      "name": "internalsearch"
    },
    {
      "name": "internalsegmentation"
    },
    {
      "name": "segmentation/internal"
    },
    {
      "name": "internalzendesk-chat"
    },
    {
      "name": "yearEndannualAccounts"
    },
    {
      "name": "yearEndtaxCalculation"
    },
    {
      "name": "yearEndbrreg"
    },
    {
      "name": "yearEnd"
    },
    {
      "name": "yearEndaccountSpecification"
    },
    {
      "name": "yearEndbasicData"
    },
    {
      "name": "yearEndchecklist"
    },
    {
      "name": "yearEnddepreciationRate"
    },
    {
      "name": "yearEnddisposition"
    },
    {
      "name": "yearEnddividend"
    },
    {
      "name": "yearEndenumType"
    },
    {
      "name": "yearEndgenericData"
    },
    {
      "name": "yearEndgenericDataRate"
    },
    {
      "name": "yearEndincomeStatement"
    },
    {
      "name": "yearEndmapping"
    },
    {
      "name": "yearEndnote"
    },
    {
      "name": "yearEnd/note"
    },
    {
      "name": "yearEndnoteData"
    },
    {
      "name": "yearEndpersonalIncome"
    },
    {
      "name": "yearEndriskFreeInterestRate"
    },
    {
      "name": "ztlaccount"
    },
    {
      "name": "ztlconsent"
    },
    {
      "name": "ztlonboardingpage"
    },
    {
      "name": "ztlonboarding"
    },
    {
      "name": "ztlsettings"
    }
  ]
}